From ggutierrez at atlas.puj.edu.co  Wed Feb  9 18:01:21 2005
From: ggutierrez at atlas.puj.edu.co (Gustavo Gutierrez)
Date: Wed, 9 Feb 2005 12:01:21 -0500
Subject: [Gecode] Propgator copy
Message-ID: <20050209152738.M79307@atlas.puj.edu.co>

Hi,

First of all congratulations, GECODE is a really good piece of software! it is
very useful and really *easily* extensible. Source code is very clear, at
least the parts i've read.

I have a question about propagators. I am writing a propagator, for instance
Prop, which needs to maintain a binary tree with some information and a
variable vector (VarArray). This propagator inherits from NaryPropagator. Is
there any special issue with this tree structure i need to take into account? 

The tree is used only by the propagate method and  it doesn't change its
structure along propagation. I have some doubts implementing two methods:

Prop(Space* home, Prop<Var>& p);

Call the super class NaryPropagator method to do this is not enough, what
would happened with the tree?

Actor* copy(Space* home, bool);
This method call the constructor i mentioned before, so i think all depends on
that implementation.

Finally, i think the memory allocated by the tree must be freed only at
propagator destructor method.


Thanks in advance and hope to be clear. Feel free to ask for more details.

Gustavo Gutierrez


From schulte at imit.kth.se  Thu Feb 10 09:22:27 2005
From: schulte at imit.kth.se (Christian Schulte)
Date: Thu, 10 Feb 2005 09:22:27 +0100
Subject: [Gecode] Propgator copy
In-Reply-To: <20050209152738.M79307@atlas.puj.edu.co>
Message-ID: <05a501c50f49$a8251940$acd4ed82@beule>

The first issue is that of course your propagator is in charge of copying,
if needed.

Secondly, consider whether you really want to always copy! Have a look to
int/distinct/dom.icc. There the propagator also needs a graph only during
propagation. It maintains this graph as follows: when the propagator is
created or copied set the graph to empty. If the propagate function is
invoked, check whether the graph exists. If not, create it. If yes, update
it accordingly. Upon destruction delete it, if it exists. Make sure that the
destructor is called! This you have to do by giving a special flag to the
propagator. Again see the above mentioned example.

All the best
Christian 

--
Christian Schulte, http://www.imit.kth.se/~schulte/ 

-----Original Message-----
From: gecode-bounces at ps.uni-sb.de [mailto:gecode-bounces at ps.uni-sb.de] On
Behalf Of Gustavo Gutierrez
Sent: Wednesday, February 09, 2005 6:01 PM
To: gecode at ps.uni-sb.de
Subject: [Gecode] Propgator copy


Hi,

First of all congratulations, GECODE is a really good piece of software! it
is very useful and really *easily* extensible. Source code is very clear, at
least the parts i've read.

I have a question about propagators. I am writing a propagator, for instance
Prop, which needs to maintain a binary tree with some information and a
variable vector (VarArray). This propagator inherits from NaryPropagator. Is
there any special issue with this tree structure i need to take into
account? 

The tree is used only by the propagate method and  it doesn't change its
structure along propagation. I have some doubts implementing two methods:

Prop(Space* home, Prop<Var>& p);

Call the super class NaryPropagator method to do this is not enough, what
would happened with the tree?

Actor* copy(Space* home, bool);
This method call the constructor i mentioned before, so i think all depends
on that implementation.

Finally, i think the memory allocated by the tree must be freed only at
propagator destructor method.


Thanks in advance and hope to be clear. Feel free to ask for more details.

Gustavo Gutierrez _______________________________________________
Gecode mailing list
Gecode at ps.uni-sb.de http://www.ps.uni-sb.de/mailman/listinfo/gecode




From tack at ps.uni-sb.de  Thu Feb 10 09:53:12 2005
From: tack at ps.uni-sb.de (Guido Tack)
Date: Thu, 10 Feb 2005 09:53:12 +0100
Subject: [Gecode] Propgator copy
In-Reply-To: <05a501c50f49$a8251940$acd4ed82@beule>
References: <05a501c50f49$a8251940$acd4ed82@beule>
Message-ID: <420B20F8.9030903@ps.uni-sb.de>

Actually, if the tree doesn't change during propagation (that is, if 
it's only created during initialization of the propagator and not 
touched afterwards), shouldn't it rather be handled like a SharedArray 
in e.g. int/element/int.icc?

Christian Schulte wrote:
> The first issue is that of course your propagator is in charge of copying,
> if needed.
> 
> Secondly, consider whether you really want to always copy! Have a look to
> int/distinct/dom.icc. There the propagator also needs a graph only during
> propagation. It maintains this graph as follows: when the propagator is
> created or copied set the graph to empty. If the propagate function is
> invoked, check whether the graph exists. If not, create it. If yes, update
> it accordingly. Upon destruction delete it, if it exists. Make sure that the
> destructor is called! This you have to do by giving a special flag to the
> propagator. Again see the above mentioned example.
> 
> All the best
> Christian 

-- 
Guido Tack
http://www.ps.uni-sb.de/~tack


From dooms at info.ucl.ac.be  Thu Feb 10 11:09:21 2005
From: dooms at info.ucl.ac.be (=?ISO-8859-1?Q?Gr=E9goire_Dooms?=)
Date: Thu, 10 Feb 2005 11:09:21 +0100
Subject: [Gecode] Problem compiling gecode.
Message-ID: <420B32D1.8010004@info.ucl.ac.be>

Hi,
I'm new to gecode and got a tarball of a cvs check-out from Christian.
I've encountered a problem while trying to compile gecode.

The error is in int/gcc/bnd_tree.icc .
I'm building on Pentium M, linux 2.6.4 , gcc version 3.3.4 (Debian
1:3.3.4-7).

The versions of the files in int/gcc are
/bnd_tree.icc/1.5/Tue Feb  1 12:55:53 2005//
/dom.icc/1.9/Tue Feb  1 12:55:53 2005//
/gccbndsup.icc/1.8/Tue Feb  1 12:55:53 2005//
/gccdomsup.icc/1.9/Tue Feb  1 12:55:53 2005//
/graphalg.icc/1.8/Tue Feb  1 12:55:53 2005//
/lbc.icc/1.4/Fri Jan 28 11:36:33 2005//
/post.cc/1.6/Tue Feb  1 12:55:53 2005//
/ubc.icc/1.5/Fri Jan 28 11:36:33 2005//
/val.icc/1.4/Tue Feb  1 12:55:53 2005//


make  all-recursive
make[1]: Entering directory `/home/dooms/gecode'
Making all in kernel
make[2]: Entering directory `/home/dooms/gecode/kernel'
make  all-am
make[3]: Entering directory `/home/dooms/gecode/kernel'
make[3]: Nothing to be done for `all-am'.
make[3]: Leaving directory `/home/dooms/gecode/kernel'
make[2]: Leaving directory `/home/dooms/gecode/kernel'
Making all in search
make[2]: Entering directory `/home/dooms/gecode/search'
make[2]: Nothing to be done for `all'.
make[2]: Leaving directory `/home/dooms/gecode/search'
Making all in int
make[2]: Entering directory `/home/dooms/gecode/int'
if /bin/sh ../libtool --mode=compile g++ -DHAVE_CONFIG_H -I. -I. -I..
-I..   -DGECODE_BUILD_INT -O3 -finline-limit=3000 -DNDEBUG -Wall -MT
gcc/post.lo -MD -MP -MF "gcc/.deps/post.Tpo" \
  -c -o gcc/post.lo `test -f 'gcc/post.cc' || echo './'`gcc/post.cc; \
then mv -f "gcc/.deps/post.Tpo" "gcc/.deps/post.Plo"; \
else rm -f "gcc/.deps/post.Tpo"; exit 1; \
fi
g++ -DHAVE_CONFIG_H -I. -I. -I.. -I.. -DGECODE_BUILD_INT -O3
-finline-limit=3000 -DNDEBUG -Wall -MT gcc/post.lo -MD -MP -MF
gcc/.deps/post.Tpo -c gcc/post.cc
../int/gcc/bnd_tree.icc: In constructor
`GCC::Bnd_Tree<Var>::Bnd_Tree(Space*,
   VarArray<T>&, SharedArray<int>&, SharedArray<int>&) [with Var = IntVar]':
../int/gcc/bnd_tree.icc:198:   instantiated from `static ExecStatus
GCC::Bnd_Tree<Var>::post(Space*, VarArray<T>&, SharedArray<int>&,
SharedArray<int>&) [with Var = IntVar]'
gcc/post.cc:62:   instantiated from here
../int/gcc/bnd_tree.icc:113: error: `counter' undeclared (first use this
   function)
../int/gcc/bnd_tree.icc:113: error: (Each undeclared identifier is reported
   only once for each function it appears in.)
make[2]: *** [gcc/post.lo] Error 1
make[2]: Leaving directory `/home/dooms/gecode/int'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/home/dooms/gecode'
make: *** [all] Error 2

If I try to remove everything related to int/gcc in int/Makefile, 
compilation fails in int/regular/dfa.cc

I can provide any additional information needed to spot the problem.
Cheers,
--
Gr?goire Dooms



From pekczynski at ps.uni-sb.de  Thu Feb 10 12:13:28 2005
From: pekczynski at ps.uni-sb.de (pekczynski at ps.uni-sb.de)
Date: Thu, 10 Feb 2005 12:13:28 +0100
Subject: [Gecode] Problem compiling gecode.
In-Reply-To: <420B32D1.8010004@info.ucl.ac.be>
References: <420B32D1.8010004@info.ucl.ac.be>
Message-ID: <200502101213.28820.pekczynski@ps.uni-sb.de>

Hi there, 
This was my mistake, since I was just looking for some optimzations and 
updated the "value-consistent" version for the gcc while doing the 
benchmarks.
The bug was just that the gcc.hh - headerfile did not contain the member 
"counter" I needed for this gcc-part which I unfortunately did not commit.
Everything should compile fine now. 
Maybe you can get a new tarball from Christian if it won't trouble him that 
much.
Sorry again.



From pekczynski at ps.uni-sb.de  Thu Feb 10 13:03:16 2005
From: pekczynski at ps.uni-sb.de (pekczynski at ps.uni-sb.de)
Date: Thu, 10 Feb 2005 13:03:16 +0100
Subject: [Gecode] Problem compiling gecode.
In-Reply-To: <420B32D1.8010004@info.ucl.ac.be>
References: <420B32D1.8010004@info.ucl.ac.be>
Message-ID: <200502101303.16561.pekczynski@ps.uni-sb.de>

Maybe it's way faster to add the following line in

	class Bnd_Tree 
	  protected:
>>	     DynamicArray<Memory::ArrayAllocator<int>, int> counter;

of gcc.hh in order to introduce the member "counter"
That should do the trick. If there should be anything else just dont hesitate 
to ask.

Best regards, 
Patrick Pekczynski




From schulte at imit.kth.se  Thu Feb 10 15:30:58 2005
From: schulte at imit.kth.se (Christian Schulte)
Date: Thu, 10 Feb 2005 15:30:58 +0100
Subject: [Gecode] Propgator copy
In-Reply-To: <20050210135854.M28269@atlas.puj.edu.co>
Message-ID: <05b001c50f7d$232b8330$acd4ed82@beule>

Please have a look to the DFA implementation (or to sharedArray) in
int/regular/dfa.*. There you will see that also reference counting is used.
This is done in the proper C++ way with overloading the copy
constructor/assignment operators.

However, you should also provide a real copy operation for reference
counting: the clone operation of a space can be given an additional argument
telling whether to share data or to completely copy it.

The reasoning behind this is to allow for thread-safety (I have a master
student doing a parallel thread-based search engine): if you want to have
spaces to be run in parallel, you have to copy rather than share. Otherwise
reference counting will introduce race conditions.

All the best
Christian

--
Christian Schulte, http://www.imit.kth.se/~schulte/ 

-----Original Message-----
From: Gustavo Gutierrez [mailto:ggutierrez at atlas.puj.edu.co] 
Sent: Thursday, February 10, 2005 3:18 PM
To: schulte at imit.kth.se
Subject: RE: [Gecode] Propgator copy


Hi all,

Thanks for the answer.

Looking at int/distinct/dom.icc gave me some implementations hints. My case
is a little distinct since it is better (i.e. time) to maintain a reference
to the tree than to build the tree at every propagate method invocation.

What i am doing is not to copy the tree in the copy method. Instead i am
passing a reference to the tree. Additionally each copy has a counter to the
number of references to the tree structure. This allows to free the memory
allocated by the tree when there are only one reference to it.

This is my code. I hope any of you can give me your opinion.

template <class Var>
class HC4 : public NaryPropagator<Var,PC_RI_LAST> {
	private:
		/*An object to store the constraint in user form (A TREE)*/
		Constraint* _cst;
		/*An integer to count how many rerefences are to _cst*/
		int _copies;
	protected:
		HC4(Space*,Constraint*,VarArray<Var>);
		HC4(Space*,HC4<Var>&);
	public:
		virtual Actor* copy(Space*,bool);
		virtual PropCost   cost(void) const;
		virtual ExecStatus propagate(Space*);
		static  ExecStatus post(Space*,Constraint*,VarArray<Var>);
		~HC4(void);
};

template <class Var>
HC4<Var>::HC4(Space* home, Constraint* c, VarArray<Var> vars) 
	: NaryPropagator<Var,PC_RI_LAST>(home,vars), _cst(c), _copies(1) {}

template <class Var>
HC4<Var>::HC4(Space* home, HC4<Var>& p)
	: NaryPropagator<Var,PC_RI_LAST>(home,*this), _cst(p._cst),     
_copies(p._copies+1) {}
 
emplate <class Var>
HC4<Var>::~HC4(void) {
	if (copies == 1) 
		delete _cst;
	copies--;
	NaryPropagator<Var,PC_RI_LAST>::~NaryPropagator();
}

template <class Var>
Actor* 
HC4<Var>::copy(Space* hom,bool){
	return new (home) HC4<Var>(home, *this);
}


Regards,
Gustavo Gutierrez
On Thu, 10 Feb 2005 09:22:27 +0100, Christian Schulte wrote
> The first issue is that of course your propagator is in charge of
> copying, if needed.
> 
> Secondly, consider whether you really want to always copy! Have a
> look to int/distinct/dom.icc. There the propagator also needs a 
> graph only during propagation. It maintains this graph as follows: 
> when the propagator is created or copied set the graph to empty. If 
> the propagate function is invoked, check whether the graph exists. 
> If not, create it. If yes, update it accordingly. Upon destruction 
> delete it, if it exists. Make sure that the destructor is called! 
> This you have to do by giving a special flag to the propagator. 
> Again see the above mentioned example.
> 
> All the best
> Christian
> 
> --
> Christian Schulte, http://www.imit.kth.se/~schulte/
> 
> -----Original Message-----
> From: gecode-bounces at ps.uni-sb.de [mailto:gecode-bounces at ps.uni- 
> sb.de] On Behalf Of Gustavo Gutierrez Sent: Wednesday, February 09,  
> 2005 6:01 PM To: gecode at ps.uni-sb.de Subject: [Gecode] Propgator copy
> 
> Hi,
> 
> First of all congratulations, GECODE is a really good piece of
> software! it is very useful and really *easily* extensible. Source 
> code is very clear, at least the parts i've read.
> 
> I have a question about propagators. I am writing a propagator, for 
> instance Prop, which needs to maintain a binary tree with some 
> information and a variable vector (VarArray). This propagator inherits 
> from NaryPropagator. Is there any special issue with this tree 
> structure i need to take into account?
> 
> The tree is used only by the propagate method and  it doesn't change
> its structure along propagation. I have some doubts implementing two 
> methods:
> 
> Prop(Space* home, Prop<Var>& p);
> 
> Call the super class NaryPropagator method to do this is not enough,
> what would happened with the tree?
> 
> Actor* copy(Space* home, bool);
> This method call the constructor i mentioned before, so i think all 
> depends on that implementation.
> 
> Finally, i think the memory allocated by the tree must be freed only
> at propagator destructor method.
> 
> Thanks in advance and hope to be clear. Feel free to ask for more 
> details.
> 
> Gustavo Gutierrez _______________________________________________
> Gecode mailing list
> Gecode at ps.uni-sb.de http://www.ps.uni-sb.de/mailman/listinfo/gecode




From dooms at info.ucl.ac.be  Thu Feb 10 16:44:36 2005
From: dooms at info.ucl.ac.be (=?ISO-8859-1?Q?Gr=E9goire_Dooms?=)
Date: Thu, 10 Feb 2005 16:44:36 +0100
Subject: [Gecode] Problem compiling gecode.
In-Reply-To: <200502101303.16561.pekczynski@ps.uni-sb.de>
References: <420B32D1.8010004@info.ucl.ac.be>
	<200502101303.16561.pekczynski@ps.uni-sb.de>
Message-ID: <420B8164.5050301@info.ucl.ac.be>

pekczynski at ps.uni-sb.de wrote:

>Maybe it's way faster to add the following line in
>
>	class Bnd_Tree 
>	  protected:
>>> DynamicArray<Memory::ArrayAllocator<int>, int> counter;
>  
>
Thanks Patrick,
I had to add the same line to class Dom too and then it compiled fine.

--
Gr?goire Dooms


From tack at ps.uni-sb.de  Tue Feb 22 18:27:54 2005
From: tack at ps.uni-sb.de (Guido Tack)
Date: Tue, 22 Feb 2005 18:27:54 +0100
Subject: [Gecode] gcc 3.4 build problems
Message-ID: <200502221827.54464.tack@ps.uni-sb.de>

Hi all!

I've just installed gcc 3.4 on my machine, because Didier reported some 
problems he had using it to compile gecode. And indeed, it's just completely 
screwed :-(
It seems that they made some fundamental changes in the way they treat name 
lookup in inherited template classes. As a quick example, the following code 
doesn't work any more:

template <class T>
class Foo {
protected:
  int e;
};

template <class T>
class Bar : public Foo<T>
{
 public:
  void test() { e = e+1; }
};

>> error: `e' undeclared (first use this function)

You can fix it by prefixing every occurrence of e with Foo<T>. Now you can 
imagine that this is simply not feasible for Gecode, we're using this pattern 
in nearly every propagator that inherits from one of the generic templates.

I'm not sure if this is a bug or a feature, to me it definitely seems like a 
bug. If anyone has any suggestions, please let me know; otherwise I would 
suggest marking gcc 3.4 as not supported and hoping that this won't stay an 
issue in 4.0.

Btw: 3.4 did find some weird bugs that 3.3 overlooked, however ;-)

Guido

-- 
http://www.ps.uni-sb.de/~tack


From pape5004 at stud.uni-saarland.de  Tue Feb 22 22:27:22 2005
From: pape5004 at stud.uni-saarland.de (pape5004)
Date: Tue, 22 Feb 2005 22:27:22 +0100
Subject: AW: [Gecode] gcc 3.4 build problems
In-Reply-To: <200502221827.54464.tack@ps.uni-sb.de>
Message-ID: <000201c51925$4c305f10$0100a8c0@Zion>

Hi all!

>>>>I'm not sure if this is a bug or a feature, to me it definitely
seems like a bug. 

Don't know whether anyone has already found a solution, but my good old
friend "google" said
that it's a feature of gcc 3.4. See:
http://gcc.gnu.org/gcc-3.4/changes.html

If I understood the problem right here's what they say:


In a template definition, unqualified names will no longer find members
of a dependent base (as specified by [temp.dep]/3 in the C++ standard).
For example,

	template <typename T> struct B {
	  int m;
	  int n;
	  int f ();
	  int g ();
	};
	int n;
	int g ();
	template <typename T> struct C : B<T> {
	  void h ()
	  {
		m = 0; // error
		f ();  // error
		n = 0; // ::n is modified
		g ();  // ::g is called
	  }
	};

You must make the names dependent, e.g. by prefixing them with this->.
Here is the corrected definition of C<T>::h,

	template <typename T> void C<T>::h ()
	{
	  this->m = 0;
	  this->f ();
	  this->n = 0
	  this->g ();
	}

As an alternative solution, you may use using declarations instead of
this->:

	template <typename T> struct C : B<T> {
	  using B<T>::m;
	  using B<T>::f;
	  using B<T>::n;
	  using B<T>::g;
	  void h ()
	  {
		m = 0;
		f ();
		n = 0;
		g ();
	  }
	};

Hope this helps....
Since I haven't gcc 3.4 installed on my machine yet I can't tell whether
this is ok, but to me it seems
that the compiler just insists on a more detailed qualification, i.e. 3
or 4 signs more to write :-D

Greetz 


Patrick Pekczynski




From schulte at imit.kth.se  Wed Feb 23 10:04:04 2005
From: schulte at imit.kth.se (Christian Schulte)
Date: Wed, 23 Feb 2005 10:04:04 +0100
Subject: [Gecode] gcc 3.4 build problems
In-Reply-To: <000201c51925$4c305f10$0100a8c0@Zion>
Message-ID: <013201c51986$9f9c4d60$acd4ed82@beule>

Looks like Patrick is absolutely right :-( So eventually we need to
rewrite...

This stinks (but hey, C++ always stinks)
Christian

--
Christian Schulte, http://www.imit.kth.se/~schulte/ 

-----Original Message-----
From: gecode-bounces at ps.uni-sb.de [mailto:gecode-bounces at ps.uni-sb.de] On
Behalf Of pape5004
Sent: Tuesday, February 22, 2005 10:27 PM
To: 'Technical discussions about Gecode'
Subject: AW: [Gecode] gcc 3.4 build problems


Hi all!

>>>>I'm not sure if this is a bug or a feature, to me it definitely
seems like a bug. 

Don't know whether anyone has already found a solution, but my good old
friend "google" said that it's a feature of gcc 3.4. See:
http://gcc.gnu.org/gcc-3.4/changes.html

If I understood the problem right here's what they say:


In a template definition, unqualified names will no longer find members of a
dependent base (as specified by [temp.dep]/3 in the C++ standard). For
example,

	template <typename T> struct B {
	  int m;
	  int n;
	  int f ();
	  int g ();
	};
	int n;
	int g ();
	template <typename T> struct C : B<T> {
	  void h ()
	  {
		m = 0; // error
		f ();  // error
		n = 0; // ::n is modified
		g ();  // ::g is called
	  }
	};

You must make the names dependent, e.g. by prefixing them with this->. Here
is the corrected definition of C<T>::h,

	template <typename T> void C<T>::h ()
	{
	  this->m = 0;
	  this->f ();
	  this->n = 0
	  this->g ();
	}

As an alternative solution, you may use using declarations instead of
this->:

	template <typename T> struct C : B<T> {
	  using B<T>::m;
	  using B<T>::f;
	  using B<T>::n;
	  using B<T>::g;
	  void h ()
	  {
		m = 0;
		f ();
		n = 0;
		g ();
	  }
	};

Hope this helps....
Since I haven't gcc 3.4 installed on my machine yet I can't tell whether
this is ok, but to me it seems that the compiler just insists on a more
detailed qualification, i.e. 3 or 4 signs more to write :-D

Greetz 


Patrick Pekczynski


_______________________________________________
Gecode mailing list
Gecode at ps.uni-sb.de http://www.ps.uni-sb.de/mailman/listinfo/gecode




From tack at ps.uni-sb.de  Wed Feb 23 11:06:59 2005
From: tack at ps.uni-sb.de (Guido Tack)
Date: Wed, 23 Feb 2005 11:06:59 +0100
Subject: [Gecode] gcc 3.4 build problems
In-Reply-To: <013201c51986$9f9c4d60$acd4ed82@beule>
References: <013201c51986$9f9c4d60$acd4ed82@beule>
Message-ID: <200502231107.00115.tack@ps.uni-sb.de>



On Wednesday 23 February 2005 10:04, Christian Schulte wrote:
> Looks like Patrick is absolutely right :-( So eventually we need to
> rewrite...
>
> This stinks (but hey, C++ always stinks)
> Christian

Right. I've already started, I think I'll have it running again this evening.

Guido

-- 
http://www.ps.uni-sb.de/~tack


