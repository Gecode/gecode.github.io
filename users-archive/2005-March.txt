From ggutierrez at atlas.puj.edu.co  Thu Mar  3 15:18:57 2005
From: ggutierrez at atlas.puj.edu.co (Gustavo Gutierrez)
Date: Thu, 3 Mar 2005 09:18:57 -0500
Subject: [Gecode] design question
Message-ID: <20050303141857.GA9774@atlas.puj.edu.co>

Hi all,

I am trying to write a propagator implementing 3b-consistency.
3b-consistency uses bound consistency to performs propagation (prune
non-bound-consistent parts of variable's domain). I already have an
implementation of bound consistency called hc4, so, in the source code
there is the class hc4 which inherits from NaryPropagator. 

The idea is that the class implementing 3b-consistency can be
parametrized (template) with any of the bound consistency
implementations, an example of the class could be:

template <class Var, class Bc>
class k3b : public NaryPropagator {
...
};

Propagation have to test for bound consistent parts of each variable's domain, in the case that any part to be non-bound-consistent, it can be pruned, otherwise it have to remains the same. 

This is what i am confused about. What i tried was to clone the variable
array, change the domain of the selected var by the guessed domain in
the cloned array, create an instance of the bound consistent propagator
and call directly the propagate method, and prune or not depending on
the returned value (ES_FAILED = prune, ES_FIX= not prune). 

The problem is that when i try to run an example a segmentation fault
error occurs. I think this way is not the right one to do that, so
please help me with some hints.

All the best,

Gustavo Gutierrez




From schulte at imit.kth.se  Thu Mar  3 15:51:29 2005
From: schulte at imit.kth.se (Christian Schulte)
Date: Thu, 3 Mar 2005 15:51:29 +0100
Subject: [Gecode] design question
In-Reply-To: <20050303141857.GA9774@atlas.puj.edu.co>
Message-ID: <005901c52000$7b7c26f0$acd4ed82@beule>

I am sorry but from what you say I cannot come up with any suggestion but to
use a debugger...

Cheers and sorry
Christian

--
Christian Schulte, http://www.imit.kth.se/~schulte/ 

-----Original Message-----
From: gecode-bounces at ps.uni-sb.de [mailto:gecode-bounces at ps.uni-sb.de] On
Behalf Of Gustavo Gutierrez
Sent: Thursday, March 03, 2005 3:19 PM
To: gecode at ps.uni-sb.de
Subject: [Gecode] design question


Hi all,

I am trying to write a propagator implementing 3b-consistency.
3b-consistency uses bound consistency to performs propagation (prune
non-bound-consistent parts of variable's domain). I already have an
implementation of bound consistency called hc4, so, in the source code there
is the class hc4 which inherits from NaryPropagator. 

The idea is that the class implementing 3b-consistency can be parametrized
(template) with any of the bound consistency implementations, an example of
the class could be:

template <class Var, class Bc>
class k3b : public NaryPropagator {
...
};

Propagation have to test for bound consistent parts of each variable's
domain, in the case that any part to be non-bound-consistent, it can be
pruned, otherwise it have to remains the same. 

This is what i am confused about. What i tried was to clone the variable
array, change the domain of the selected var by the guessed domain in the
cloned array, create an instance of the bound consistent propagator and call
directly the propagate method, and prune or not depending on the returned
value (ES_FAILED = prune, ES_FIX= not prune). 

The problem is that when i try to run an example a segmentation fault error
occurs. I think this way is not the right one to do that, so please help me
with some hints.

All the best,

Gustavo Gutierrez


_______________________________________________
Gecode mailing list
Gecode at ps.uni-sb.de http://www.ps.uni-sb.de/mailman/listinfo/gecode




From tack at ps.uni-sb.de  Thu Mar  3 16:07:41 2005
From: tack at ps.uni-sb.de (Guido Tack)
Date: Thu, 3 Mar 2005 16:07:41 +0100
Subject: [Gecode] design question
In-Reply-To: <005901c52000$7b7c26f0$acd4ed82@beule>
References: <005901c52000$7b7c26f0$acd4ed82@beule>
Message-ID: <200503031607.41427.tack@ps.uni-sb.de>

On Thursday 03 March 2005 15:51, Christian Schulte wrote:
> I am sorry but from what you say I cannot come up with any suggestion but
> to use a debugger...

>From what I see here, you may have hit one of the main design decisions in 
Gecode: When a space fails, it can be in an arbitrarily screwed up state. If 
I understand you correctly, you perform some propagation, and if that fails, 
you go on with some other propagation in the same space. If failing the first 
propagation means that one variable is actually failed, you may not use the 
space any longer. I think this can easily lead to segmentation faults, can't 
it, Christian?

Guido

-- 
http://www.ps.uni-sb.de/~tack



From ggutierrez at atlas.puj.edu.co  Thu Mar  3 20:43:14 2005
From: ggutierrez at atlas.puj.edu.co (Gustavo Gutierrez)
Date: Thu, 3 Mar 2005 14:43:14 -0500
Subject: [Gecode] design question
In-Reply-To: <200503031607.41427.tack@ps.uni-sb.de>
References: <005901c52000$7b7c26f0$acd4ed82@beule>
	<200503031607.41427.tack@ps.uni-sb.de>
Message-ID: <20050303194314.GA11639@atlas.puj.edu.co>

On Thu, Mar 03, 2005 at 04:07:41PM +0100, Guido Tack wrote:
> On Thursday 03 March 2005 15:51, Christian Schulte wrote:
> > I am sorry but from what you say I cannot come up with any suggestion but
> > to use a debugger...
> 
> >From what I see here, you may have hit one of the main design decisions in 
> Gecode: When a space fails, it can be in an arbitrarily screwed up state. If 
> I understand you correctly, you perform some propagation, and if that fails, 
> you go on with some other propagation in the same space. If failing the first 
> propagation means that one variable is actually failed, you may not use the 
> space any longer. I think this can easily lead to segmentation faults, can't 
> it, Christian?
>

I will write a part of the corresponding propagator as a
pseudo-algorithm:

Suppose Bc is a propagator already implemented.
I am interested on writing K3b which has the VarArray x.
K3b<Var,Bc>::propagate(Space* home) {
	VarArray<Var> clone(x);
	for (int i = n; i--; ){
		//new guess upper bound
		double new_upper = clone[i].lower() + 2.0;
		clone[i].upper(home,new_upper);
		Bc narr(home,clone);
		if(narr::propagate(home) == ES_FAILED)
			x[i].lower(home,new_upper);
	}
}

>From Guido's answer i infer the problem occurs because both propagators
share the same space. Another way to accomplish the same behavior is by creating a new Space and to put there the propagator. This will prevent the parent
space to become failed or "...in an arbitrarily screwed up state".

I will try to write the function guessing some space primitives because
i have not seen much about spaces.

K3b<Var,Bc>::propagate(Space* home) {
        VarArray<Var> clone(x);
	for (int i = n; i--; ){
		//compute a guess upper bound
		double new_upper = clone[i].lower() + 2.0;
		//Create a new space
		Space test();
		Bc narr(test,clone);
		clone[i].upper(test,new_upper);
		if(narr::propagate(test)==ES_FAILED)
			x[i].lower(home,new_upper);
	}
}

In this new version, the space 'test' is created to test the propagator
(narr) in another independent space.  Note that the processes performed on test influence subsequent propagation on home. I don't know if this can work
but i don't feel so good creating additional spaces in propagation steps.
										All the best,
										Gustavo Gutierrez


From dooms at info.ucl.ac.be  Fri Mar  4 12:34:28 2005
From: dooms at info.ucl.ac.be (=?ISO-8859-1?Q?Gr=E9goire_Dooms?=)
Date: Fri, 04 Mar 2005 12:34:28 +0100
Subject: [Gecode] propagators, events, updated variables and domain deltas
Message-ID: <422847C4.20503@info.ucl.ac.be>

Hi,

I've been reading the source code of gecode and I would like to ask you 
a few basic questions.

Looking at the implementation of singleton elimination in 
int/distinct/val.icc, the propagator scans all the variables in order to 
know which are singletons and which are not.
It looks like there is no way for a propagator to know which variable(s) 
triggered it. Is this right ?

When a propagator is awakened by a variable (int or set) domain update, 
I would like to be able to know which values where taken out of the 
domain. Is there an other way than to compare the new domains of the 
variables with a previously stored copy of these domains ?

--
Gr?goire Dooms


From schulte at imit.kth.se  Fri Mar  4 15:47:22 2005
From: schulte at imit.kth.se (Christian Schulte)
Date: Fri, 4 Mar 2005 15:47:22 +0100
Subject: [Gecode] propagators, events, updated variables and domain deltas
In-Reply-To: <422847C4.20503@info.ucl.ac.be>
Message-ID: <003301c520c9$12aa4070$acd4ed82@beule>

Hi,

you are right on all questions. The idea is to keep the kernel very simple
and yet efficient.

Assume the question about which variable is modified. You only have to pay
for it in a propagator who uses it and the price is just linear time (there
are hardly any propagation algorithms with sublinear complexity...) and
linear space (this is also true).

I am currently working with somebody else on an architecture which will
provide these services at sublinear cost but we are still far away at
something that is efficient and simple enough to beat the na?ve way.

And even if you had seomthing like a delta, it is actually typically not
what you need: a propagator quite often works on a particular data structure
geared towards the propagation algorithm. This data structure needs to be
updated according to what has changed. So the point is that it does not
really matter whether you compute on data structure plus delta or on data
structure plus new domain.

And of course, if you want to know which variables have been modified, you
don't have to store entire domains but just the size of the domain.

All the best
Christian

--
Christian Schulte, http://www.imit.kth.se/~schulte/ 

-----Original Message-----
From: gecode-bounces at ps.uni-sb.de [mailto:gecode-bounces at ps.uni-sb.de] On
Behalf Of Gr?goire Dooms
Sent: Friday, March 04, 2005 12:34 PM
To: Technical discussions about Gecode
Subject: [Gecode] propagators, events, updated variables and domain deltas


Hi,

I've been reading the source code of gecode and I would like to ask you 
a few basic questions.

Looking at the implementation of singleton elimination in 
int/distinct/val.icc, the propagator scans all the variables in order to 
know which are singletons and which are not.
It looks like there is no way for a propagator to know which variable(s) 
triggered it. Is this right ?

When a propagator is awakened by a variable (int or set) domain update, 
I would like to be able to know which values where taken out of the 
domain. Is there an other way than to compare the new domains of the 
variables with a previously stored copy of these domains ?

--
Gr?goire Dooms
_______________________________________________
Gecode mailing list
Gecode at ps.uni-sb.de http://www.ps.uni-sb.de/mailman/listinfo/gecode




From ggutierrez at atlas.puj.edu.co  Fri Mar 18 23:00:04 2005
From: ggutierrez at atlas.puj.edu.co (Gustavo Gutierrez)
Date: Fri, 18 Mar 2005 17:00:04 -0500 (COT)
Subject: [Gecode] Discarding propagators
Message-ID: <38620.10.5.27.2.1111183204.squirrel@10.5.27.6>

Hi all,

Few weeks ago i posted a message with subject "design question". There, i
was trying to implement a propagator that uses other propagators to verify
some kind of consistency and then decide to prune or not domain values.
That is, the user-imposed propagator calls auxiliar propagators, and using
the outcome of such propagators, takes certain actions.

In order to do that without fall in space failures i use a copy of
variables and create a new propagator, then call the propagate method
directly. This new propagator needs to be disabled after the consistency
proof (i.e. it will not exist as long as ordinary propagators imposed by
user). In order to "simulate" propagator disabling i added a new method
that contains a flag. When the flag becomes true the propagate method
returns ES_SUBSUMMED. My hope is that the auxiliar propagator will be
removed (in a safe way) from the propagation queue at some time after
this.

I was able of implementing the "main" propagator following this approach.
My problem is that it works fine in some examples, but for others it
raises a segfault. Very likely, I have a misassumption regarding the role
and functioning of the propagation queue. I would apprecciate any comments
and/or suggestions on this issue.

Thanks in advance,

Gustavo Gutierrez


From schulte at imit.kth.se  Tue Mar 29 09:34:23 2005
From: schulte at imit.kth.se (Christian Schulte)
Date: Tue, 29 Mar 2005 09:34:23 +0200
Subject: [Gecode] Discarding propagators
In-Reply-To: <38620.10.5.27.2.1111183204.squirrel@10.5.27.6>
Message-ID: <001401c53431$baa2f210$acd4ed82@beule>

Hi,

the problem is to call the propagate method directly: this is not possible!
The only interaction that is allowed for a propagator is creation!

What is not entirely clear to me why do you want to have temporay
propagators. As far as I understand, you are just using some propagation
method, that's it. Why not use a method that can be used without creating a
propagator first?

Christian

--
Christian Schulte, http://www.imit.kth.se/~schulte/ 

-----Original Message-----
From: gecode-bounces at ps.uni-sb.de [mailto:gecode-bounces at ps.uni-sb.de] On
Behalf Of Gustavo Gutierrez
Sent: Friday, March 18, 2005 11:00 PM
To: gecode at ps.uni-sb.de
Subject: [Gecode] Discarding propagators


Hi all,

Few weeks ago i posted a message with subject "design question". There, i
was trying to implement a propagator that uses other propagators to verify
some kind of consistency and then decide to prune or not domain values. That
is, the user-imposed propagator calls auxiliar propagators, and using the
outcome of such propagators, takes certain actions.

In order to do that without fall in space failures i use a copy of variables
and create a new propagator, then call the propagate method directly. This
new propagator needs to be disabled after the consistency proof (i.e. it
will not exist as long as ordinary propagators imposed by user). In order to
"simulate" propagator disabling i added a new method that contains a flag.
When the flag becomes true the propagate method returns ES_SUBSUMMED. My
hope is that the auxiliar propagator will be removed (in a safe way) from
the propagation queue at some time after this.

I was able of implementing the "main" propagator following this approach. My
problem is that it works fine in some examples, but for others it raises a
segfault. Very likely, I have a misassumption regarding the role and
functioning of the propagation queue. I would apprecciate any comments
and/or suggestions on this issue.

Thanks in advance,

Gustavo Gutierrez _______________________________________________
Gecode mailing list
Gecode at ps.uni-sb.de http://www.ps.uni-sb.de/mailman/listinfo/gecode




From ggutierrez at atlas.puj.edu.co  Tue Mar 29 17:09:14 2005
From: ggutierrez at atlas.puj.edu.co (Gustavo Gutierrez)
Date: Tue, 29 Mar 2005 10:09:14 -0500 (COT)
Subject: [Gecode] Discarding propagators
In-Reply-To: <001401c53431$baa2f210$acd4ed82@beule>
References: <38620.10.5.27.2.1111183204.squirrel@10.5.27.6>
	<001401c53431$baa2f210$acd4ed82@beule>
Message-ID: <34188.10.5.27.2.1112108954.squirrel@10.5.27.6>

Hi,

Christian Schulte said:
> Hi,
>
> the problem is to call the propagate method directly: this is not
> possible!
> The only interaction that is allowed for a propagator is creation!
>

Actually, what I am doing at propagate method is just a by-pass (i.e
it returns whatever the method implementing the consistency will
return). So the propagate method is never called directly.


> What is not entirely clear to me why do you want to have temporay
> propagators.

Temporary propagators intend to separate the behaviour of a propagator. This
is a design decision. Different algorithms (in terms of complexity) may
enforce the same consistency technique. In this context, the idea of using a
propagator as an auxiliar tool to build up a more sophisticated,
parametrized consistency technique makes sense.

>From a design view, one could write propagators that can be *parametrized*
with other propagators. For instance, a propagator implementing some
consistency technique that uses other low level consistency
technique. The way in which the other (low level) consistency is
used depends entirely on the new propagator.

The propagator I am implementing uses the returned value from a
low level propagator to decide whether to prune domains or not. A failure of
the low level propagator does not imply that the propagator must fail.
Here is when temporary propagators come into play. The temporary
propagator is created only for checking purposes and depending on its
output some
actions are taken. For instance, another low level propagator may be
invoked. That is why i need temporary propagators.

>As far as I understand, you are just using some propagation
> method, that's it. Why not use a method that can be used without creating
> a
> propagator first?

That is another choice. To implement functions enforcing consistency
techniques and to make this functions friends of propagator objects.
I think this could work but in my opinion it is not as clear as the
temporary propagator approach and it does not allow parametrization either.

Thanks in advance,
Gustavo Gutierrez

>
> Christian
>
> --
> Christian Schulte, http://www.imit.kth.se/~schulte/
>
> -----Original Message-----
> From: gecode-bounces at ps.uni-sb.de [mailto:gecode-bounces at ps.uni-sb.de] On
> Behalf Of Gustavo Gutierrez
> Sent: Friday, March 18, 2005 11:00 PM
> To: gecode at ps.uni-sb.de
> Subject: [Gecode] Discarding propagators
>
>
> Hi all,
>
> Few weeks ago i posted a message with subject "design question". There, i
> was trying to implement a propagator that uses other propagators to verify
> some kind of consistency and then decide to prune or not domain values.
> That
> is, the user-imposed propagator calls auxiliar propagators, and using the
> outcome of such propagators, takes certain actions.
>
> In order to do that without fall in space failures i use a copy of
> variables
> and create a new propagator, then call the propagate method directly. This
> new propagator needs to be disabled after the consistency proof (i.e. it
> will not exist as long as ordinary propagators imposed by user). In order
> to
> "simulate" propagator disabling i added a new method that contains a flag.
> When the flag becomes true the propagate method returns ES_SUBSUMMED. My
> hope is that the auxiliar propagator will be removed (in a safe way) from
> the propagation queue at some time after this.
>
> I was able of implementing the "main" propagator following this approach.
> My
> problem is that it works fine in some examples, but for others it raises a
> segfault. Very likely, I have a misassumption regarding the role and
> functioning of the propagation queue. I would apprecciate any comments
> and/or suggestions on this issue.
>
> Thanks in advance,
>
> Gustavo Gutierrez _______________________________________________
> Gecode mailing list
> Gecode at ps.uni-sb.de http://www.ps.uni-sb.de/mailman/listinfo/gecode


--------------------------------------------------------------
 Please avoid sending me Word or PowerPoint attachments.
 See http://www.gnu.org/philosophy/no-word-attachments.html




From schulte at imit.kth.se  Tue Mar 29 17:26:41 2005
From: schulte at imit.kth.se (Christian Schulte)
Date: Tue, 29 Mar 2005 17:26:41 +0200
Subject: [Gecode] Discarding propagators
In-Reply-To: <34188.10.5.27.2.1112108954.squirrel@10.5.27.6>
Message-ID: <010701c53473$b5003420$acd4ed82@beule>

As I tried to point out earlier is that you confuse two issues here: one is
how to structure your code (such as by inheritance, etc). The other one is
creation of propagators. You just can't do that and it is just not useful. I
don't see how parametrization pertains to that issue. You can still, if you
wish inherit from Propagator, add a static method and do what you want
without creating a new propagator (that's the only problem here).

Look to other examples of propagators (such as the domain consistent version
of distinct which uses also the na?ve version of it). Here the delegation is
by calling the propagate method which has been overriden by inheritance. But
not by creating a new propagator!

Also, creating propagators is costly as it requires quite some book keeping.

Christian

--
Christian Schulte, http://www.imit.kth.se/~schulte/ 

-----Original Message-----
From: Gustavo Gutierrez [mailto:ggutierrez at atlas.puj.edu.co] 
Sent: Tuesday, March 29, 2005 5:09 PM
To: schulte at imit.kth.se
Cc: 'Technical discussions about Gecode'
Subject: RE: [Gecode] Discarding propagators


Hi,

Christian Schulte said:
> Hi,
>
> the problem is to call the propagate method directly: this is not 
> possible! The only interaction that is allowed for a propagator is 
> creation!
>

Actually, what I am doing at propagate method is just a by-pass (i.e it
returns whatever the method implementing the consistency will return). So
the propagate method is never called directly.


> What is not entirely clear to me why do you want to have temporay 
> propagators.

Temporary propagators intend to separate the behaviour of a propagator. This
is a design decision. Different algorithms (in terms of complexity) may
enforce the same consistency technique. In this context, the idea of using a
propagator as an auxiliar tool to build up a more sophisticated,
parametrized consistency technique makes sense.

>From a design view, one could write propagators that can be *parametrized*
with other propagators. For instance, a propagator implementing some
consistency technique that uses other low level consistency technique. The
way in which the other (low level) consistency is used depends entirely on
the new propagator.

The propagator I am implementing uses the returned value from a low level
propagator to decide whether to prune domains or not. A failure of the low
level propagator does not imply that the propagator must fail. Here is when
temporary propagators come into play. The temporary propagator is created
only for checking purposes and depending on its output some actions are
taken. For instance, another low level propagator may be invoked. That is
why i need temporary propagators.

>As far as I understand, you are just using some propagation  method, 
>that's it. Why not use a method that can be used without creating  a
> propagator first?

That is another choice. To implement functions enforcing consistency
techniques and to make this functions friends of propagator objects. I think
this could work but in my opinion it is not as clear as the temporary
propagator approach and it does not allow parametrization either.

Thanks in advance,
Gustavo Gutierrez

>
> Christian
>
> --
> Christian Schulte, http://www.imit.kth.se/~schulte/
>
> -----Original Message-----
> From: gecode-bounces at ps.uni-sb.de [mailto:gecode-bounces at ps.uni-sb.de] 
> On Behalf Of Gustavo Gutierrez
> Sent: Friday, March 18, 2005 11:00 PM
> To: gecode at ps.uni-sb.de
> Subject: [Gecode] Discarding propagators
>
>
> Hi all,
>
> Few weeks ago i posted a message with subject "design question". 
> There, i was trying to implement a propagator that uses other 
> propagators to verify some kind of consistency and then decide to 
> prune or not domain values. That is, the user-imposed propagator calls 
> auxiliar propagators, and using the outcome of such propagators, takes 
> certain actions.
>
> In order to do that without fall in space failures i use a copy of 
> variables and create a new propagator, then call the propagate method 
> directly. This new propagator needs to be disabled after the 
> consistency proof (i.e. it will not exist as long as ordinary 
> propagators imposed by user). In order to
> "simulate" propagator disabling i added a new method that contains a flag.
> When the flag becomes true the propagate method returns ES_SUBSUMMED. My
> hope is that the auxiliar propagator will be removed (in a safe way) from
> the propagation queue at some time after this.
>
> I was able of implementing the "main" propagator following this 
> approach. My problem is that it works fine in some examples, but for 
> others it raises a segfault. Very likely, I have a misassumption 
> regarding the role and functioning of the propagation queue. I would 
> apprecciate any comments and/or suggestions on this issue.
>
> Thanks in advance,
>
> Gustavo Gutierrez _______________________________________________
> Gecode mailing list
> Gecode at ps.uni-sb.de http://www.ps.uni-sb.de/mailman/listinfo/gecode


--------------------------------------------------------------
 Please avoid sending me Word or PowerPoint attachments.
 See http://www.gnu.org/philosophy/no-word-attachments.html






From schulte at imit.kth.se  Tue Mar 29 17:26:41 2005
From: schulte at imit.kth.se (Christian Schulte)
Date: Tue, 29 Mar 2005 17:26:41 +0200
Subject: [Gecode] Discarding propagators
In-Reply-To: <34188.10.5.27.2.1112108954.squirrel@10.5.27.6>
Message-ID: <003d01c53473$b5027e10$acd4ed82@beule>

As I tried to point out earlier is that you confuse two issues here: one is
how to structure your code (such as by inheritance, etc). The other one is
creation of propagators. You just can't do that and it is just not useful. I
don't see how parametrization pertains to that issue. You can still, if you
wish inherit from Propagator, add a static method and do what you want
without creating a new propagator (that's the only problem here).

Look to other examples of propagators (such as the domain consistent version
of distinct which uses also the na?ve version of it). Here the delegation is
by calling the propagate method which has been overriden by inheritance. But
not by creating a new propagator!

Also, creating propagators is costly as it requires quite some book keeping.

Christian

--
Christian Schulte, http://www.imit.kth.se/~schulte/ 

-----Original Message-----
From: Gustavo Gutierrez [mailto:ggutierrez at atlas.puj.edu.co] 
Sent: Tuesday, March 29, 2005 5:09 PM
To: schulte at imit.kth.se
Cc: 'Technical discussions about Gecode'
Subject: RE: [Gecode] Discarding propagators


Hi,

Christian Schulte said:
> Hi,
>
> the problem is to call the propagate method directly: this is not 
> possible! The only interaction that is allowed for a propagator is 
> creation!
>

Actually, what I am doing at propagate method is just a by-pass (i.e it
returns whatever the method implementing the consistency will return). So
the propagate method is never called directly.


> What is not entirely clear to me why do you want to have temporay 
> propagators.

Temporary propagators intend to separate the behaviour of a propagator. This
is a design decision. Different algorithms (in terms of complexity) may
enforce the same consistency technique. In this context, the idea of using a
propagator as an auxiliar tool to build up a more sophisticated,
parametrized consistency technique makes sense.

>From a design view, one could write propagators that can be *parametrized*
with other propagators. For instance, a propagator implementing some
consistency technique that uses other low level consistency technique. The
way in which the other (low level) consistency is used depends entirely on
the new propagator.

The propagator I am implementing uses the returned value from a low level
propagator to decide whether to prune domains or not. A failure of the low
level propagator does not imply that the propagator must fail. Here is when
temporary propagators come into play. The temporary propagator is created
only for checking purposes and depending on its output some actions are
taken. For instance, another low level propagator may be invoked. That is
why i need temporary propagators.

>As far as I understand, you are just using some propagation  method, 
>that's it. Why not use a method that can be used without creating  a
> propagator first?

That is another choice. To implement functions enforcing consistency
techniques and to make this functions friends of propagator objects. I think
this could work but in my opinion it is not as clear as the temporary
propagator approach and it does not allow parametrization either.

Thanks in advance,
Gustavo Gutierrez

>
> Christian
>
> --
> Christian Schulte, http://www.imit.kth.se/~schulte/
>
> -----Original Message-----
> From: gecode-bounces at ps.uni-sb.de [mailto:gecode-bounces at ps.uni-sb.de] 
> On Behalf Of Gustavo Gutierrez
> Sent: Friday, March 18, 2005 11:00 PM
> To: gecode at ps.uni-sb.de
> Subject: [Gecode] Discarding propagators
>
>
> Hi all,
>
> Few weeks ago i posted a message with subject "design question". 
> There, i was trying to implement a propagator that uses other 
> propagators to verify some kind of consistency and then decide to 
> prune or not domain values. That is, the user-imposed propagator calls 
> auxiliar propagators, and using the outcome of such propagators, takes 
> certain actions.
>
> In order to do that without fall in space failures i use a copy of 
> variables and create a new propagator, then call the propagate method 
> directly. This new propagator needs to be disabled after the 
> consistency proof (i.e. it will not exist as long as ordinary 
> propagators imposed by user). In order to
> "simulate" propagator disabling i added a new method that contains a flag.
> When the flag becomes true the propagate method returns ES_SUBSUMMED. My
> hope is that the auxiliar propagator will be removed (in a safe way) from
> the propagation queue at some time after this.
>
> I was able of implementing the "main" propagator following this 
> approach. My problem is that it works fine in some examples, but for 
> others it raises a segfault. Very likely, I have a misassumption 
> regarding the role and functioning of the propagation queue. I would 
> apprecciate any comments and/or suggestions on this issue.
>
> Thanks in advance,
>
> Gustavo Gutierrez _______________________________________________
> Gecode mailing list
> Gecode at ps.uni-sb.de http://www.ps.uni-sb.de/mailman/listinfo/gecode


--------------------------------------------------------------
 Please avoid sending me Word or PowerPoint attachments.
 See http://www.gnu.org/philosophy/no-word-attachments.html






From ggutierrez at atlas.puj.edu.co  Tue Mar 29 17:52:25 2005
From: ggutierrez at atlas.puj.edu.co (Gustavo Gutierrez)
Date: Tue, 29 Mar 2005 10:52:25 -0500 (COT)
Subject: [Gecode] Discarding propagators
In-Reply-To: <003e01c53473$c98e0b60$acd4ed82@beule>
References: <34188.10.5.27.2.1112108954.squirrel@10.5.27.6>
	<003e01c53473$c98e0b60$acd4ed82@beule>
Message-ID: <35192.10.5.27.2.1112111545.squirrel@10.5.27.6>

Hi,

You are right i was confused with the two issues, now i understand your
point. By looking the propagator you mentioned i have clear up some other
doubts.

Thanks a lot.

Gustavo Gutierrez

Christian Schulte said:
> As I tried to point out earlier is that you confuse two issues here: one
> is
> how to structure your code (such as by inheritance, etc). The other one is
> creation of propagators. You just can't do that and it is just not useful.
> I
> don't see how parametrization pertains to that issue. You can still, if
> you
> wish inherit from Propagator, add a static method and do what you want
> without creating a new propagator (that's the only problem here).
>
> Look to other examples of propagators (such as the domain consistent
> version
> of distinct which uses also the na?ve version of it). Here the delegation
> is
> by calling the propagate method which has been overriden by inheritance.
> But
> not by creating a new propagator!
>
> Also, creating propagators is costly as it requires quite some book
> keeping.
>
> Christian
>
> --
> Christian Schulte, http://www.imit.kth.se/~schulte/
>
> -----Original Message-----
> From: Gustavo Gutierrez [mailto:ggutierrez at atlas.puj.edu.co]
> Sent: Tuesday, March 29, 2005 5:09 PM
> To: schulte at imit.kth.se
> Cc: 'Technical discussions about Gecode'
> Subject: RE: [Gecode] Discarding propagators
>
>
> Hi,
>
> Christian Schulte said:
>> Hi,
>>
>> the problem is to call the propagate method directly: this is not
>> possible! The only interaction that is allowed for a propagator is
>> creation!
>>
>
> Actually, what I am doing at propagate method is just a by-pass (i.e it
> returns whatever the method implementing the consistency will return). So
> the propagate method is never called directly.
>
>
>> What is not entirely clear to me why do you want to have temporay
>> propagators.
>
> Temporary propagators intend to separate the behaviour of a propagator.
> This
> is a design decision. Different algorithms (in terms of complexity) may
> enforce the same consistency technique. In this context, the idea of using
> a
> propagator as an auxiliar tool to build up a more sophisticated,
> parametrized consistency technique makes sense.
>
>>From a design view, one could write propagators that can be
>> *parametrized*
> with other propagators. For instance, a propagator implementing some
> consistency technique that uses other low level consistency technique. The
> way in which the other (low level) consistency is used depends entirely on
> the new propagator.
>
> The propagator I am implementing uses the returned value from a low level
> propagator to decide whether to prune domains or not. A failure of the low
> level propagator does not imply that the propagator must fail. Here is
> when
> temporary propagators come into play. The temporary propagator is created
> only for checking purposes and depending on its output some actions are
> taken. For instance, another low level propagator may be invoked. That is
> why i need temporary propagators.
>
>>As far as I understand, you are just using some propagation  method,
>>that's it. Why not use a method that can be used without creating  a
>> propagator first?
>
> That is another choice. To implement functions enforcing consistency
> techniques and to make this functions friends of propagator objects. I
> think
> this could work but in my opinion it is not as clear as the temporary
> propagator approach and it does not allow parametrization either.
>
> Thanks in advance,
> Gustavo Gutierrez
>
>>
>> Christian
>>
>> --
>> Christian Schulte, http://www.imit.kth.se/~schulte/
>>
>> -----Original Message-----
>> From: gecode-bounces at ps.uni-sb.de [mailto:gecode-bounces at ps.uni-sb.de]
>> On Behalf Of Gustavo Gutierrez
>> Sent: Friday, March 18, 2005 11:00 PM
>> To: gecode at ps.uni-sb.de
>> Subject: [Gecode] Discarding propagators
>>
>>
>> Hi all,
>>
>> Few weeks ago i posted a message with subject "design question".
>> There, i was trying to implement a propagator that uses other
>> propagators to verify some kind of consistency and then decide to
>> prune or not domain values. That is, the user-imposed propagator calls
>> auxiliar propagators, and using the outcome of such propagators, takes
>> certain actions.
>>
>> In order to do that without fall in space failures i use a copy of
>> variables and create a new propagator, then call the propagate method
>> directly. This new propagator needs to be disabled after the
>> consistency proof (i.e. it will not exist as long as ordinary
>> propagators imposed by user). In order to
>> "simulate" propagator disabling i added a new method that contains a
>> flag.
>> When the flag becomes true the propagate method returns ES_SUBSUMMED. My
>> hope is that the auxiliar propagator will be removed (in a safe way)
>> from
>> the propagation queue at some time after this.
>>
>> I was able of implementing the "main" propagator following this
>> approach. My problem is that it works fine in some examples, but for
>> others it raises a segfault. Very likely, I have a misassumption
>> regarding the role and functioning of the propagation queue. I would
>> apprecciate any comments and/or suggestions on this issue.
>>
>> Thanks in advance,
>>
>> Gustavo Gutierrez _______________________________________________
>> Gecode mailing list
>> Gecode at ps.uni-sb.de http://www.ps.uni-sb.de/mailman/listinfo/gecode
>
>
> --------------------------------------------------------------
>  Please avoid sending me Word or PowerPoint attachments.
>  See http://www.gnu.org/philosophy/no-word-attachments.html
>
>


--------------------------------------------------------------
 Please avoid sending me Word or PowerPoint attachments.
 See http://www.gnu.org/philosophy/no-word-attachments.html




From schulte at imit.kth.se  Tue Mar 29 17:27:15 2005
From: schulte at imit.kth.se (Christian Schulte)
Date: Tue, 29 Mar 2005 17:27:15 +0200
Subject: [Gecode] Discarding propagators
In-Reply-To: <34188.10.5.27.2.1112108954.squirrel@10.5.27.6>
Message-ID: <003e01c53473$c98e0b60$acd4ed82@beule>

As I tried to point out earlier is that you confuse two issues here: one is
how to structure your code (such as by inheritance, etc). The other one is
creation of propagators. You just can't do that and it is just not useful. I
don't see how parametrization pertains to that issue. You can still, if you
wish inherit from Propagator, add a static method and do what you want
without creating a new propagator (that's the only problem here).

Look to other examples of propagators (such as the domain consistent version
of distinct which uses also the na?ve version of it). Here the delegation is
by calling the propagate method which has been overriden by inheritance. But
not by creating a new propagator!

Also, creating propagators is costly as it requires quite some book keeping.

Christian

--
Christian Schulte, http://www.imit.kth.se/~schulte/ 

-----Original Message-----
From: Gustavo Gutierrez [mailto:ggutierrez at atlas.puj.edu.co] 
Sent: Tuesday, March 29, 2005 5:09 PM
To: schulte at imit.kth.se
Cc: 'Technical discussions about Gecode'
Subject: RE: [Gecode] Discarding propagators


Hi,

Christian Schulte said:
> Hi,
>
> the problem is to call the propagate method directly: this is not 
> possible! The only interaction that is allowed for a propagator is 
> creation!
>

Actually, what I am doing at propagate method is just a by-pass (i.e it
returns whatever the method implementing the consistency will return). So
the propagate method is never called directly.


> What is not entirely clear to me why do you want to have temporay 
> propagators.

Temporary propagators intend to separate the behaviour of a propagator. This
is a design decision. Different algorithms (in terms of complexity) may
enforce the same consistency technique. In this context, the idea of using a
propagator as an auxiliar tool to build up a more sophisticated,
parametrized consistency technique makes sense.

>From a design view, one could write propagators that can be *parametrized*
with other propagators. For instance, a propagator implementing some
consistency technique that uses other low level consistency technique. The
way in which the other (low level) consistency is used depends entirely on
the new propagator.

The propagator I am implementing uses the returned value from a low level
propagator to decide whether to prune domains or not. A failure of the low
level propagator does not imply that the propagator must fail. Here is when
temporary propagators come into play. The temporary propagator is created
only for checking purposes and depending on its output some actions are
taken. For instance, another low level propagator may be invoked. That is
why i need temporary propagators.

>As far as I understand, you are just using some propagation  method, 
>that's it. Why not use a method that can be used without creating  a
> propagator first?

That is another choice. To implement functions enforcing consistency
techniques and to make this functions friends of propagator objects. I think
this could work but in my opinion it is not as clear as the temporary
propagator approach and it does not allow parametrization either.

Thanks in advance,
Gustavo Gutierrez

>
> Christian
>
> --
> Christian Schulte, http://www.imit.kth.se/~schulte/
>
> -----Original Message-----
> From: gecode-bounces at ps.uni-sb.de [mailto:gecode-bounces at ps.uni-sb.de] 
> On Behalf Of Gustavo Gutierrez
> Sent: Friday, March 18, 2005 11:00 PM
> To: gecode at ps.uni-sb.de
> Subject: [Gecode] Discarding propagators
>
>
> Hi all,
>
> Few weeks ago i posted a message with subject "design question". 
> There, i was trying to implement a propagator that uses other 
> propagators to verify some kind of consistency and then decide to 
> prune or not domain values. That is, the user-imposed propagator calls 
> auxiliar propagators, and using the outcome of such propagators, takes 
> certain actions.
>
> In order to do that without fall in space failures i use a copy of 
> variables and create a new propagator, then call the propagate method 
> directly. This new propagator needs to be disabled after the 
> consistency proof (i.e. it will not exist as long as ordinary 
> propagators imposed by user). In order to
> "simulate" propagator disabling i added a new method that contains a flag.
> When the flag becomes true the propagate method returns ES_SUBSUMMED. My
> hope is that the auxiliar propagator will be removed (in a safe way) from
> the propagation queue at some time after this.
>
> I was able of implementing the "main" propagator following this 
> approach. My problem is that it works fine in some examples, but for 
> others it raises a segfault. Very likely, I have a misassumption 
> regarding the role and functioning of the propagation queue. I would 
> apprecciate any comments and/or suggestions on this issue.
>
> Thanks in advance,
>
> Gustavo Gutierrez _______________________________________________
> Gecode mailing list
> Gecode at ps.uni-sb.de http://www.ps.uni-sb.de/mailman/listinfo/gecode


--------------------------------------------------------------
 Please avoid sending me Word or PowerPoint attachments.
 See http://www.gnu.org/philosophy/no-word-attachments.html






