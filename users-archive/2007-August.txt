From nick.hindle at tesco.net  Mon Aug  6 21:19:33 2007
From: nick.hindle at tesco.net (Nick Hindle)
Date: Mon, 6 Aug 2007 20:19:33 +0100
Subject: [gecode-users] Intersection
Message-ID: <002801c7d85e$b8835a50$0601a8c0@HindleDesktop>

Hi,

I would like to constrain values in an IntSet to the intersection with another IntSet, so all values from outside the intersection are eliminated from the space.

Being a CSP novice I am struggling with how to implement this in Gecode!

Thanks in advance

Nick




-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20070806/29ca0016/attachment.htm>

From tack at ps.uni-sb.de  Tue Aug  7 10:37:43 2007
From: tack at ps.uni-sb.de (Guido Tack)
Date: Tue, 7 Aug 2007 10:37:43 +0200
Subject: [gecode-users] Intersection
In-Reply-To: <002801c7d85e$b8835a50$0601a8c0@HindleDesktop>
References: <002801c7d85e$b8835a50$0601a8c0@HindleDesktop>
Message-ID: <3C3B02A8-AA13-4B95-96DC-44D1246D48D5@ps.uni-sb.de>

Hi.

Nick Hindle wrote:
> I would like to constrain values in an IntSet to the intersection  
> with another IntSet, so all values from outside the intersection  
> are eliminated from the space.
>
> Being a CSP novice I am struggling with how to implement this in  
> Gecode!

An IntSet is just a constant set, not a variable that you can post  
constraints (like intersection) on.  It's like the difference between  
an IntVar and an int.  If it's really about constants, you can use  
range iterators to just compute the intersection.
If you want your sets to be real constraint variables, have a look at  
one of the examples (like golf.cc), it will give you an idea how to  
use finite set constraints in Gecode.

Cheers,
	Guido

-- 
Guido Tack
Programming Systems Lab, Saarland University, Germany
http://www.ps.uni-sb.de/~tack






From Justin.Pearson at it.uu.se  Thu Aug 16 15:09:48 2007
From: Justin.Pearson at it.uu.se (Justin Pearson)
Date: Thu, 16 Aug 2007 15:09:48 +0200
Subject: [gecode-users] A rather basic quesion
Message-ID: <18116.19612.786954.797218@harpo.it.uu.se>



This show my lack of understanding of Gecode but.
I  have a question about using intermediate variables when settig up
constraints.

Suppose I have a script, I know that I have to do the business with
the copy constructor and sharing. But suppose I set up a constraint as
follows (V is already copyed in the copy/sharing stuff):

 BoolVar X;
 rel(this,V,IRT_NQ,42,X);
 eq(this,X,1);

Do I have to copy X as well in the copy constructor/sharing? 

What happens if I don't?


Justin



From zayenz at gmail.com  Thu Aug 16 16:15:44 2007
From: zayenz at gmail.com (Mikael Zayenz Lagerkvist)
Date: Thu, 16 Aug 2007 16:15:44 +0200
Subject: [gecode-users] A rather basic quesion
In-Reply-To: <18116.19612.786954.797218@harpo.it.uu.se>
References: <18116.19612.786954.797218@harpo.it.uu.se>
Message-ID: <63b5c8b00708160715y72759afdj9ec9ddb25d29aae5@mail.gmail.com>

On 8/16/07, Justin Pearson <Justin.Pearson at it.uu.se> wrote:
> Suppose I have a script, I know that I have to do the business with
> the copy constructor and sharing. But suppose I set up a constraint as
> follows (V is already copyed in the copy/sharing stuff):
>
>  BoolVar X;
>  rel(this,V,IRT_NQ,42,X);
>  eq(this,X,1);
>
> Do I have to copy X as well in the copy constructor/sharing?
>
> What happens if I don't?

There is no need to copy the temporary variables, you only need to
copy those variables that you are interested in inspecting in a
solution.

The temporary variable will be maintained by the associated
propagators as long as it is needed.

Cheers,
Mikael

-- 
Mikael Zayenz Lagerkvist, http://www.ict.kth.se/~zayenz/



From cschulte at kth.se  Fri Aug 17 10:16:51 2007
From: cschulte at kth.se (Christian Schulte)
Date: Fri, 17 Aug 2007 10:16:51 +0200
Subject: [gecode-users] A rather basic quesion
In-Reply-To: <63b5c8b00708160715y72759afdj9ec9ddb25d29aae5@mail.gmail.com>
Message-ID: <000001c7e0a6$f74a8ec0$acd4ed82@beule>

However, there is a small quirk in your code: writing just "BollVar X" does
not initialize X. You need to write
	BoolVar X(this,0,1);

Cheers
Christian

--
Christian Schulte, http://www.imit.kth.se/~schulte/ 

-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Mikael Zayenz Lagerkvist
Sent: Thursday, August 16, 2007 4:16 PM
To: Justin Pearson
Cc: users at gecode.org
Subject: Re: [gecode-users] A rather basic quesion


On 8/16/07, Justin Pearson <Justin.Pearson at it.uu.se> wrote:
> Suppose I have a script, I know that I have to do the business with 
> the copy constructor and sharing. But suppose I set up a constraint as 
> follows (V is already copyed in the copy/sharing stuff):
>
>  BoolVar X;
>  rel(this,V,IRT_NQ,42,X);
>  eq(this,X,1);
>
> Do I have to copy X as well in the copy constructor/sharing?
>
> What happens if I don't?

There is no need to copy the temporary variables, you only need to copy
those variables that you are interested in inspecting in a solution.

The temporary variable will be maintained by the associated propagators as
long as it is needed.

Cheers,
Mikael

-- 
Mikael Zayenz Lagerkvist, http://www.ict.kth.se/~zayenz/

_______________________________________________
Gecode users mailing list
users at gecode.org https://www.gecode.org/mailman/listinfo/gecode-users




From debdeep.banerjee at rsise.anu.edu.au  Tue Aug 21 03:16:12 2007
From: debdeep.banerjee at rsise.anu.edu.au (Debdeep Banerjee)
Date: Tue, 21 Aug 2007 11:16:12 +1000
Subject: [gecode-users] How Can I use Gecode/J with Eclipse
Message-ID: <46CA3CDC.5080509@rsise.anu.edu.au>

hi,
I have tried to use the Gecodej.jar within Eclipse but it is giving me 
error, saying Gecode native code can't be loaded. How can I use Gecode/J 
with other application ?

With regards
Debdeep



From jeremie.vautard at laposte.net  Tue Aug 21 13:33:16 2007
From: jeremie.vautard at laposte.net (=?ISO-8859-1?Q?J=E9r=E9mie_Vautard?=)
Date: Tue, 21 Aug 2007 13:33:16 +0200
Subject: [gecode-users] Intersecting a variable domain with an IntSet ?
Message-ID: <17E28712-D4F7-4276-BD8F-43BC08C90C19@laposte.net>

Hi !

I would like to post a unary constraint  x \in Y, x being an IntVar  
and Y an IntSet. I thought it existed, but I can't find it again in  
the documentation... Is it possible to do that ?

Cheers,

Jeremie Vautard



From tack at ps.uni-sb.de  Tue Aug 21 22:49:07 2007
From: tack at ps.uni-sb.de (Guido Tack)
Date: Tue, 21 Aug 2007 22:49:07 +0200 (CEST)
Subject: [gecode-users] Intersecting a variable domain with an IntSet ?
In-Reply-To: <17E28712-D4F7-4276-BD8F-43BC08C90C19@laposte.net>
References: <17E28712-D4F7-4276-BD8F-43BC08C90C19@laposte.net>
Message-ID: <21462.212.247.172.218.1187729347.squirrel@www.ps.uni-sb.de>

Hi!

> I would like to post a unary constraint  x \in Y, x being an IntVar
> and Y an IntSet. I thought it existed, but I can't find it again in
> the documentation... Is it possible to do that ?

Yes, using dom:
http://www.gecode.org/gecode-doc-latest/group__TaskIntIntDomain.html#gac26cca18d43516ad87b31d30b345524

Cheers,
   Guido

-- 
Guido Tack
http://www.ps.uni-sb.de/~tack





From filip.konvicka at logis.cz  Wed Aug 22 20:29:09 2007
From: filip.konvicka at logis.cz (=?UTF-8?B?RmlsaXAgS29udmnEjWth?=)
Date: Wed, 22 Aug 2007 20:29:09 +0200
Subject: [gecode-users] ND constructs in scripts
Message-ID: <46CC8075.2040702@logis.cz>

Hi,

I have worked with Mozart previously, and I have helped my colleague to 
start with Gecode/J last week - and now I want to finally start using 
Gecode myself (the C++ version). Although some concepts look familiar to 
me, some do not, and reading through this mailing list archive did not 
answer all my questions.

One thing that I'm not sure about is non-deterministic programming 
constructs in scripts, like Oz's "choice". I see that C++ is not going 
to help here in terms of concurrency/blocking/etc. like Oz does, so I 
think that the expressive power of scripts in Gecode is probably weaker 
than in Mozart (am I right? no offence! :-)). To be more specific, from 
what I understand, such thing as "choice" could be done by cutting the 
script at the points of nondeterministic statements, putting the 
deterministic parts' bodies in the appropriate functions of some 
branchings... (posting a new branching should be done in commit(), 
right?). Is this correct?

So my question for now is - do you have a suggestion on how 
non-deterministic constructs could be done in scripts, if this can be 
done at all?

Please forgive my ignorance, I just do not know what am I 
allowed/disallowed to do in respective functions of spaces and branchings.

Thanks,
Filip




From jeremie.vautard at laposte.net  Thu Aug 23 18:56:59 2007
From: jeremie.vautard at laposte.net (=?ISO-8859-1?Q?J=E9r=E9mie_Vautard?=)
Date: Thu, 23 Aug 2007 18:56:59 +0200
Subject: [gecode-users] Multiple branchings...
Message-ID: <CDE7700F-0D61-4604-88C1-AF94D1C230F5@laposte.net>

Hi !

I have got a space containing integer and boolean variables. These  
boolean variables are only auxiliary variables and are normally  
assigned by propagation once the IntVars have been instanciated.
I would like to branch on the IntVars using the smallest domain first  
heuristic, and only then on the boolean variables just in case  
someone have not been instanciated for a reason...).

Is it OK to write this in the constructor of my space :
------------
branch(this, An_Array_Containing_My_IntVars,BVAR_SIZE_MIN,BVAL_MIN);
branch(this,An_Array_Containing_My_BoolVars,,BVAR_SIZE_MIN,BVAL_MIN);
------------
... to achieve this particular branching ?


Cheers,

Jeremie

PS : Guido, thanks for the dom reminder ! :)



From tack at ps.uni-sb.de  Thu Aug 23 19:59:35 2007
From: tack at ps.uni-sb.de (Guido Tack)
Date: Thu, 23 Aug 2007 19:59:35 +0200 (CEST)
Subject: [gecode-users] Multiple branchings...
In-Reply-To: <CDE7700F-0D61-4604-88C1-AF94D1C230F5@laposte.net>
References: <CDE7700F-0D61-4604-88C1-AF94D1C230F5@laposte.net>
Message-ID: <21627.212.247.172.218.1187891975.squirrel@www.ps.uni-sb.de>

> Is it OK to write this in the constructor of my space :
> ------------
> branch(this, An_Array_Containing_My_IntVars,BVAR_SIZE_MIN,BVAL_MIN);
> branch(this,An_Array_Containing_My_BoolVars,,BVAR_SIZE_MIN,BVAL_MIN);
> ------------
> ... to achieve this particular branching ?

Yes, that does exactly what you want.

Cheers,
   Guido

-- 
Guido Tack
http://www.ps.uni-sb.de/~tack





From tack at ps.uni-sb.de  Thu Aug 23 20:09:02 2007
From: tack at ps.uni-sb.de (Guido Tack)
Date: Thu, 23 Aug 2007 20:09:02 +0200 (CEST)
Subject: [gecode-users] ND constructs in scripts
In-Reply-To: <46CC8075.2040702@logis.cz>
References: <46CC8075.2040702@logis.cz>
Message-ID: <21652.212.247.172.218.1187892542.squirrel@www.ps.uni-sb.de>

Hi!

> One thing that I'm not sure about is non-deterministic programming
> constructs in scripts, like Oz's "choice". I see that C++ is not going
> to help here in terms of concurrency/blocking/etc. like Oz does, so I
> think that the expressive power of scripts in Gecode is probably weaker
> than in Mozart (am I right? no offence! :-)).

That's right, you cannot use Gecode as a general abstraction for
non-deterministic programming.

> To be more specific, from
> what I understand, such thing as "choice" could be done by cutting the
> script at the points of nondeterministic statements, putting the
> deterministic parts' bodies in the appropriate functions of some
> branchings... (posting a new branching should be done in commit(),
> right?). Is this correct?

I'm not sure we use the same terminology here ;-)  A branching is
something that is "installed" in a space, like a propagator, and which
will be queried after propagation has finished to a) determine how many
branches the space has and b) commit the space to one of these branches.

Just as with propagators, you can write your own Gecode branchings by
inheriting from the Branching class and implementing the necessary
interface.  As all branches will be explored during search, this is a way
of implementing non-determinism.

> So my question for now is - do you have a suggestion on how
> non-deterministic constructs could be done in scripts, if this can be
> done at all?

It really depends on what kind of non-determinism you want to implement. 
We use branchings only for search in the context of finite domain
constraint problems.  So if the non-determinism you have in mind is used
to split a constraint problem into two or more simpler problems, this is
the way to go.  I'm however not sure the abstractions we provide are the
best choice for other kinds of non-determinism.

Cheers,
   Guido

-- 
Guido Tack
http://www.ps.uni-sb.de/~tack





From tack at ps.uni-sb.de  Thu Aug 23 20:16:47 2007
From: tack at ps.uni-sb.de (Guido Tack)
Date: Thu, 23 Aug 2007 20:16:47 +0200 (CEST)
Subject: [gecode-users] How Can I use Gecode/J with Eclipse
In-Reply-To: <46CA3CDC.5080509@rsise.anu.edu.au>
References: <46CA3CDC.5080509@rsise.anu.edu.au>
Message-ID: <21462.212.247.172.218.1187893007.squirrel@www.ps.uni-sb.de>

Hi!

> I have tried to use the Gecodej.jar within Eclipse but it is giving me
> error, saying Gecode native code can't be loaded. How can I use Gecode/J
> with other application ?

I don't use Eclipse, so I cannot give you a definitive answer.  But you
should make sure that certain paths are set.  In particular, the property
java.library.path has to point to a directory containing the file
GecodeJ.dll on Windows or libgecodej.so on Linux.  Furthermore, the
location where the other Gecode libraries are installed (i.e.
GecodeKernel.dll etc. on Windows, and libgecodekernel.so etc. on Linux)
has to be on the system library path (which is PATH on Windows and
LD_LIBRARY_PATH on Linux).  I hope this helps you solve the problem!

Cheers,
   Guido

-- 
Guido Tack
http://www.ps.uni-sb.de/~tack





From zayenz at gmail.com  Thu Aug 23 19:28:31 2007
From: zayenz at gmail.com (Mikael Zayenz Lagerkvist)
Date: Thu, 23 Aug 2007 19:28:31 +0200
Subject: [gecode-users]  Multiple branchings...
In-Reply-To: <63b5c8b00708231027vb9bc9b2y36f63758a63ff3bc@mail.gmail.com>
References: <CDE7700F-0D61-4604-88C1-AF94D1C230F5@laposte.net>
	<63b5c8b00708231027vb9bc9b2y36f63758a63ff3bc@mail.gmail.com>
Message-ID: <63b5c8b00708231028v7d60cfafw7478b3382f9a67e0@mail.gmail.com>

On 8/23/07, J?r?mie Vautard <jeremie.vautard at laposte.net> wrote:
> I have got a space containing integer and boolean variables. These
> boolean variables are only auxiliary variables and are normally
> assigned by propagation once the IntVars have been instanciated.
> I would like to branch on the IntVars using the smallest domain first
> heuristic, and only then on the boolean variables just in case
> someone have not been instanciated for a reason...).
>
> Is it OK to write this in the constructor of my space :
> ------------
> branch(this, An_Array_Containing_My_IntVars,BVAR_SIZE_MIN,BVAL_MIN);
> branch(this,An_Array_Containing_My_BoolVars,,BVAR_SIZE_MIN,BVAL_MIN);
> ------------
> ... to achieve this particular branching ?

Yes, you can install multiple branchings in a Space in this way.

Cheers,
Mikael

--
Mikael Zayenz Lagerkvist, http://www.ict.kth.se/~zayenz/



From filip.konvicka at logis.cz  Thu Aug 23 23:31:51 2007
From: filip.konvicka at logis.cz (=?UTF-8?B?RmlsaXAgS29udmnEjWth?=)
Date: Thu, 23 Aug 2007 23:31:51 +0200
Subject: [gecode-users] ND constructs in scripts
In-Reply-To: <21652.212.247.172.218.1187892542.squirrel@www.ps.uni-sb.de>
References: <46CC8075.2040702@logis.cz>
	<21652.212.247.172.218.1187892542.squirrel@www.ps.uni-sb.de>
Message-ID: <46CDFCC7.9010400@logis.cz>

Hi,
>> To be more specific, from
>> what I understand, such thing as "choice" could be done by cutting the
>> script at the points of nondeterministic statements, putting the
>> deterministic parts' bodies in the appropriate functions of some
>> branchings... (posting a new branching should be done in commit(),
>> right?). Is this correct?
>>     
>
> I'm not sure we use the same terminology here ;-)  A branching is
> something that is "installed" in a space, like a propagator, and which
> will be queried after propagation has finished to a) determine how many
> branches the space has and b) commit the space to one of these branches.
>   

Yes, I think I understand what a branching is in Gecode. The 
non-determinism I was interested in was a "choice"-like construct. I 
assumed that I could achieve that by posting a cascade of branchings. I 
thought I could install a new branching inside the preceding branching's 
commit function - so during batch recomputation, when only "b)" would 
occur, I would get all the branchings I need in a specific search tree node.

Also I don't think that those ND constructs are essential  - I grew used 
to them using Mozart, and I'm just curious about how to change my 
thinking when I switch to Gecode.

> Just as with propagators, you can write your own Gecode branchings by
> inheriting from the Branching class and implementing the necessary
> interface.  As all branches will be explored during search, this is a way
> of implementing non-determinism.
>   

I looked at some of the examples and I don't remember seeing one that 
would use more than one branching. That's why I'm asking these questions.

>> So my question for now is - do you have a suggestion on how
>> non-deterministic constructs could be done in scripts, if this can be
>> done at all?
>>     
>
> It really depends on what kind of non-determinism you want to implement. 
> We use branchings only for search in the context of finite domain
> constraint problems.  So if the non-determinism you have in mind is used
> to split a constraint problem into two or more simpler problems, this is
> the way to go.  I'm however not sure the abstractions we provide are the
> best choice for other kinds of non-determinism.
>   

Agreed, I didn't think much about other constructs. I'm happy that you 
generally agree that my thinking is correct in this specific case.

Guido, thanks for your answers, they helped!

As for the library itself, I very much like the design, the language 
used and the focus on efficiency. I know that your're probably working 
hard on getting version 2 out soon, nevertheless I hope that you publish 
some brief tutorial for newbies like me sometime soon :-)

Cheers,
Filip




From tack at ps.uni-sb.de  Fri Aug 24 08:28:57 2007
From: tack at ps.uni-sb.de (Guido Tack)
Date: Fri, 24 Aug 2007 08:28:57 +0200
Subject: [gecode-users] ND constructs in scripts
In-Reply-To: <46CDFCC7.9010400@logis.cz>
References: <46CC8075.2040702@logis.cz>
	<21652.212.247.172.218.1187892542.squirrel@www.ps.uni-sb.de>
	<46CDFCC7.9010400@logis.cz>
Message-ID: <560AD42F-0DF5-4866-A30F-AB7A6EF17EA2@ps.uni-sb.de>

Filip Konvi?ka wrote:

> Yes, I think I understand what a branching is in Gecode. The
> non-determinism I was interested in was a "choice"-like construct. I
> assumed that I could achieve that by posting a cascade of  
> branchings. I
> thought I could install a new branching inside the preceding  
> branching's
> commit function - so during batch recomputation, when only "b)" would
> occur, I would get all the branchings I need in a specific search  
> tree node.

Now I understand what you're up to :-)  As a matter of fact, that's  
possible.  Or rather, it will be in the next release, which fixes a  
nasty bug related to "nested" branchings (see the previous thread  
"order in calls to status and commit" on this mailing list) .

> I looked at some of the examples and I don't remember seeing one that
> would use more than one branching. That's why I'm asking these  
> questions.

Right, in particular, we don't have an example that uses nested  
branchings.

> As for the library itself, I very much like the design, the language
> used and the focus on efficiency. I know that your're probably working
> hard on getting version 2 out soon, nevertheless I hope that you  
> publish
> some brief tutorial for newbies like me sometime soon :-)

This is still high on our agenda, but we can't make promises about a  
release date for the tutorial at the moment.

Cheers,
	Guido

-- 
Guido Tack
Programming Systems Lab, Saarland University, Germany
http://www.ps.uni-sb.de/~tack



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20070824/41cb7aae/attachment.htm>

From filip.konvicka at logis.cz  Mon Aug 27 09:04:21 2007
From: filip.konvicka at logis.cz (=?UTF-8?B?RmlsaXAgS29udmnEjWth?=)
Date: Mon, 27 Aug 2007 09:04:21 +0200
Subject: [gecode-users] msvc 8.0 SP1 warning C4251
Message-ID: <46D27775.8090207@logis.cz>

Hi,

simply including Gecode 1.3.1 headers (kernel.hh, int.hh, search.hh) 
caused the C4251 warning. Looking at the class definitions, I see the 
warning can be safely ignored, but it might still be worth wrapping the 
definitions in a
  #pragma warning(push) + #pragma warning(disable : 4251) + #pragma 
warning(pop)
block. BTW, did you consider using the pimpl idiom to hide the *Engine 
implementation classes? Why are the engine members "protected" and not 
"private", anyway? (Deriving from Gecode::Search::DFS would make this 
non-dll-export class accessible, wouldn't it?) I know that this is all a 
bit of hair-splitting.... :-)

Cheers,
Filip


1>c:\program files\gecode\include\gecode\search.hh(360) : warning C4251: 
'Gecode::Search::DFS::e' : class 'Gecode::Search::DfsEngine' needs to 
have dll-interface to be used by clients of class 'Gecode::Search::DFS'
1>        c:\program files\gecode\include\gecode\search.hh(318) : see 
declaration of 'Gecode::Search::DfsEngine'
1>c:\program files\gecode\include\gecode\search.hh(481) : warning C4251: 
'Gecode::Search::LDS::e' : class 'Gecode::Search::ProbeEngine' needs to 
have dll-interface to be used by clients of class 'Gecode::Search::LDS'
1>        c:\program files\gecode\include\gecode\search.hh(428) : see 
declaration of 'Gecode::Search::ProbeEngine'
1>c:\program files\gecode\include\gecode\search.hh(607) : warning C4251: 
'Gecode::Search::BAB::e' : class 'Gecode::Search::BabEngine' needs to 
have dll-interface to be used by clients of class 'Gecode::Search::BAB'
1>        c:\program files\gecode\include\gecode\search.hh(543) : see 
declaration of 'Gecode::Search::BabEngine'




From cschulte at kth.se  Mon Aug 27 10:44:52 2007
From: cschulte at kth.se (Christian Schulte)
Date: Mon, 27 Aug 2007 10:44:52 +0200
Subject: [gecode-users] msvc 8.0 SP1 warning C4251
In-Reply-To: <46D27775.8090207@logis.cz>
Message-ID: <000101c7e886$8938c810$acd4ed82@beule>

Dear Filip,

these warnings you only get when using -Wall, right? So with normal defaults
you should not get any warnings. If you want to switch them off, use
-wd4251. I am rather reluctant to add the pragmas as this clutters the code.

As it comes to Pimpl, I am not convinced that this is really an issue for
us. Our interfaces can change, that's okay. Why pay for a level of
indirection then. BTW: it used to be Pimpl before.

The problem with DLL linkage in general is that you can't get it warning
free for all compilers on Windows... 

Cheers
Christian

--
Christian Schulte, http://www.imit.kth.se/~schulte/ 

-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Filip Konvicka
Sent: Monday, August 27, 2007 9:04 AM
To: users at gecode.org
Subject: [gecode-users] msvc 8.0 SP1 warning C4251


Hi,

simply including Gecode 1.3.1 headers (kernel.hh, int.hh, search.hh) 
caused the C4251 warning. Looking at the class definitions, I see the 
warning can be safely ignored, but it might still be worth wrapping the 
definitions in a
  #pragma warning(push) + #pragma warning(disable : 4251) + #pragma 
warning(pop)
block. BTW, did you consider using the pimpl idiom to hide the *Engine 
implementation classes? Why are the engine members "protected" and not 
"private", anyway? (Deriving from Gecode::Search::DFS would make this 
non-dll-export class accessible, wouldn't it?) I know that this is all a 
bit of hair-splitting.... :-)

Cheers,
Filip


1>c:\program files\gecode\include\gecode\search.hh(360) : warning C4251:
'Gecode::Search::DFS::e' : class 'Gecode::Search::DfsEngine' needs to 
have dll-interface to be used by clients of class 'Gecode::Search::DFS'
1>        c:\program files\gecode\include\gecode\search.hh(318) : see
declaration of 'Gecode::Search::DfsEngine'
1>c:\program files\gecode\include\gecode\search.hh(481) : warning C4251:
'Gecode::Search::LDS::e' : class 'Gecode::Search::ProbeEngine' needs to 
have dll-interface to be used by clients of class 'Gecode::Search::LDS'
1>        c:\program files\gecode\include\gecode\search.hh(428) : see
declaration of 'Gecode::Search::ProbeEngine'
1>c:\program files\gecode\include\gecode\search.hh(607) : warning C4251:
'Gecode::Search::BAB::e' : class 'Gecode::Search::BabEngine' needs to 
have dll-interface to be used by clients of class 'Gecode::Search::BAB'
1>        c:\program files\gecode\include\gecode\search.hh(543) : see
declaration of 'Gecode::Search::BabEngine'


_______________________________________________
Gecode users mailing list
users at gecode.org
https://www.gecode.org/mailman/listinfo/gecode-users




From filip.konvicka at logis.cz  Mon Aug 27 11:11:42 2007
From: filip.konvicka at logis.cz (=?UTF-8?B?RmlsaXAgS29udmnEjWth?=)
Date: Mon, 27 Aug 2007 11:11:42 +0200
Subject: [gecode-users] msvc 8.0 SP1 warning C4251
In-Reply-To: <000101c7e886$8938c810$acd4ed82@beule>
References: <000101c7e886$8938c810$acd4ed82@beule>
Message-ID: <46D2954E.2060809@logis.cz>

Christian Schulte (27.8.2007 10:44):
> Dear Filip,
>
> these warnings you only get when using -Wall, right? So with normal defaults
> you should not get any warnings. If you want to switch them off, use
> -wd4251. I am rather reluctant to add the pragmas as this clutters the code. 

Actually, I just created a fresh project for this, and it seems to be
using /W3 (Level 3). Anyway, C4251 seems to be Level 1 warning.
I agree that getting warning-free builds everywhere is hard to maintain,
and users can do the anti-warning hacks in their own code if needed.

> As it comes to Pimpl, I am not convinced that this is really an issue for
> us. Our interfaces can change, that's okay. Why pay for a level of
> indirection then. BTW: it used to be Pimpl before.

Not an issue, as I said, just curiosity.

Cheers,
Filip





From cschulte at kth.se  Mon Aug 27 11:33:33 2007
From: cschulte at kth.se (Christian Schulte)
Date: Mon, 27 Aug 2007 11:33:33 +0200
Subject: [gecode-users] msvc 8.0 SP1 warning C4251
In-Reply-To: <46D2954E.2060809@logis.cz>
Message-ID: <000201c7e88d$56080f30$acd4ed82@beule>

Hmmm, I never get these wannings unless I ask for it ;-) I myself use MSVC 8
SP1 for development. But I use it from the commandline with Cygwin.

Christian

--
Christian Schulte, http://www.imit.kth.se/~schulte/ 

-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Filip Konvicka
Sent: Monday, August 27, 2007 11:12 AM
To: users at gecode.org
Subject: Re: [gecode-users] msvc 8.0 SP1 warning C4251


Christian Schulte (27.8.2007 10:44):
> Dear Filip,
>
> these warnings you only get when using -Wall, right? So with normal 
> defaults you should not get any warnings. If you want to switch them 
> off, use -wd4251. I am rather reluctant to add the pragmas as this 
> clutters the code.

Actually, I just created a fresh project for this, and it seems to be using
/W3 (Level 3). Anyway, C4251 seems to be Level 1 warning. I agree that
getting warning-free builds everywhere is hard to maintain, and users can do
the anti-warning hacks in their own code if needed.

> As it comes to Pimpl, I am not convinced that this is really an issue 
> for us. Our interfaces can change, that's okay. Why pay for a level of 
> indirection then. BTW: it used to be Pimpl before.

Not an issue, as I said, just curiosity.

Cheers,
Filip



_______________________________________________
Gecode users mailing list
users at gecode.org https://www.gecode.org/mailman/listinfo/gecode-users




From filip.konvicka at logis.cz  Mon Aug 27 17:54:34 2007
From: filip.konvicka at logis.cz (=?UTF-8?B?RmlsaXAgS29udmnEjWth?=)
Date: Mon, 27 Aug 2007 17:54:34 +0200
Subject: [gecode-users] Schedule Branching Recommendations
In-Reply-To: <000c01c77b73$d59dc2d0$acd4ed82@beule>
References: <000c01c77b73$d59dc2d0$acd4ed82@beule>
Message-ID: <46D2F3BA.5000403@logis.cz>

Hi Christian,

> Please do not hesitate to ask more questions of that sort! Do you consider
> to only do branching or also propagation? Because there is a very
> interesting issue for edge-finding/first-last: both propagation and
> branching should share the same data structures to maintain their
> information for efficiency. Support for sharing state among several
> propagators/branching is on our todo list for a long time but we decided to
> only do it when we implement exactly what you are now appareantly trying to
> do...
>   

I am in a similar situation now. Could you please explain why (if this 
is the case indeed) is it not possible to just share the data in some 
raw data structure inside the Space? I mean, in the above mentioned 
case, propagation computes some information that can be re-used in the 
branching. I was under the impression that the following might work in 
similar cases:

- During propagation, store (overwrite) some "raw" data in the Space 
instance (I know, this is not exactly a good architecture design...)
- As soon as the Space is stable, the system looks for active 
branchings, asking for alternatives
- The branching might access the data now, knowing that it is the result 
of the last propagation (which led to the fixpoint), and return some 
alternatives

The thing I'm not sure about is whether there must always be a 
propagation step after recomputation. In case that not, the branching 
should have the possibility to compute the data from scratch, using only 
the variables' domains (in this case, copying the space should 
invalidate the data to make sure it is recomputed).

The reason I believe this could work is that the shared information is 
after all just some kind of cache which reflects the current domains.

Thanks for any comments,
Filip




From cschulte at kth.se  Tue Aug 28 09:49:20 2007
From: cschulte at kth.se (Christian Schulte)
Date: Tue, 28 Aug 2007 09:49:20 +0200
Subject: [gecode-users] Schedule Branching Recommendations
In-Reply-To: <46D2F3BA.5000403@logis.cz>
Message-ID: <001b01c7e947$f1c0e950$acd4ed82@beule>

Hi Filip,

well, well. Let me just summarize some facts:

 - Your idea will work but, as you say yourself, is not going to win any
   software design beauty contest. It might be good to tinker, but for
   Gecode itself a design will be needed that does not require to change
   a space (that's typically a user's model) when using a propagator
   cum branching.

 - The idea that this data is just a cache is very helpful. Indeed, we
   use the very same idea to great advantage in many propagators that
   ship with Gecode: do not copy the data just reconstruct it when needed,
   and if the data is already there keep it up to date while doing
   propagation. If the data becomes to messy, just flush the cache (data)
   an reconstruct it.

 - Invoking the status method of a space will always compute a fixpoint,
   regardless of recomputation or not (as does the attempt to clone a
   space). This also entails that when the status method of a branching
   is called, the home is at fixpoint (stable).

 - Invoking a commit method however will not compute a fixpoint: the very
   idea of making recomputation efficient relies on this.

 - You might be able to speed up branching considerably if you take
advantage
   of branching descriptions. They must store information to actually
perform
   a commit operation (as the space is typically not at fixpoint, see
above).
   You have the possibility to add additional information to the branching 
   description that assists in maintaing your data.
   
The idea to maintain the data as a cache is orthogonal to these facts.

Hope that helps
Christian

--
Christian Schulte, http://www.imit.kth.se/~schulte/ 

-----Original Message-----
From: Filip Konvicka [mailto:filip.konvicka at logis.cz] 
Sent: Monday, August 27, 2007 5:55 PM
To: cschulte at kth.se
Cc: users at gecode.org
Subject: Re: [gecode-users] Schedule Branching Recommendations


Hi Christian,

> Please do not hesitate to ask more questions of that sort! Do you 
> consider to only do branching or also propagation? Because there is a 
> very interesting issue for edge-finding/first-last: both propagation 
> and branching should share the same data structures to maintain their 
> information for efficiency. Support for sharing state among several 
> propagators/branching is on our todo list for a long time but we 
> decided to only do it when we implement exactly what you are now 
> appareantly trying to do...
>   

I am in a similar situation now. Could you please explain why (if this 
is the case indeed) is it not possible to just share the data in some 
raw data structure inside the Space? I mean, in the above mentioned 
case, propagation computes some information that can be re-used in the 
branching. I was under the impression that the following might work in 
similar cases:

- During propagation, store (overwrite) some "raw" data in the Space 
instance (I know, this is not exactly a good architecture design...)
- As soon as the Space is stable, the system looks for active 
branchings, asking for alternatives
- The branching might access the data now, knowing that it is the result 
of the last propagation (which led to the fixpoint), and return some 
alternatives

The thing I'm not sure about is whether there must always be a 
propagation step after recomputation. In case that not, the branching 
should have the possibility to compute the data from scratch, using only 
the variables' domains (in this case, copying the space should 
invalidate the data to make sure it is recomputed).

The reason I believe this could work is that the shared information is 
after all just some kind of cache which reflects the current domains.

Thanks for any comments,
Filip





From filip.konvicka at logis.cz  Tue Aug 28 11:08:39 2007
From: filip.konvicka at logis.cz (=?UTF-8?B?RmlsaXAgS29udmnEjWth?=)
Date: Tue, 28 Aug 2007 11:08:39 +0200
Subject: [gecode-users] Schedule Branching Recommendations
In-Reply-To: <001b01c7e947$f1c0e950$acd4ed82@beule>
References: <001b01c7e947$f1c0e950$acd4ed82@beule>
Message-ID: <46D3E617.4070306@logis.cz>


> Hi Filip,
>
> well, well. Let me just summarize some facts:
>
>  - Your idea will work but, as you say yourself, is not going to win any
>    software design beauty contest. It might be good to tinker, but for
>    Gecode itself a design will be needed that does not require to change
>    a space (that's typically a user's model) when using a propagator
>    cum branching.
>   

:-D

Yes, I realize that the approach is not generally applicable and is not 
"clean" at all, and I am looking forward for your general solution!

>  - The idea that this data is just a cache is very helpful. Indeed, we
>    use the very same idea to great advantage in many propagators that
>    ship with Gecode: do not copy the data just reconstruct it when needed,
>    and if the data is already there keep it up to date while doing
>    propagation. If the data becomes to messy, just flush the cache (data)
>    an reconstruct it.
>   

This I understand, and this is also one of the things that make Gecode 
so nice for me.

>  - Invoking the status method of a space will always compute a fixpoint,
>    regardless of recomputation or not (as does the attempt to clone a
>    space). This also entails that when the status method of a branching
>    is called, the home is at fixpoint (stable).
>
>  - Invoking a commit method however will not compute a fixpoint: the very
>    idea of making recomputation efficient relies on this.
>
>  - You might be able to speed up branching considerably if you take
> advantage
>    of branching descriptions. They must store information to actually
> perform
>    a commit operation (as the space is typically not at fixpoint, see
> above).
>    You have the possibility to add additional information to the branching 
>    description that assists in maintaing your data.
>   

I think that in most cases, the branching descriptions can be really 
small and fast to copy. Currently I don't think I'd use it for 
maintaining the data.

I was thinking about one more thing - whether it is possible to 
communicate with existing propagators to extend the constraints on the 
fly. In the case of scheduling constraints, this could be adding tasks 
to a resource for example. Again, I think this could be done in commit, 
I'm just not sure whether it's possible to somehow access the 
propagators. One way I thought of is having some dedicated "spare" 
variables (probably quite clean, but not much flexible and quite 
costly); another approach that I think could work is implementing a 
(probably one-way) "message queue" for the communication. I realize that 
in this case, a variable would have to be associated with the queue that 
would wake up the propagator when needed.

> The idea to maintain the data as a cache is orthogonal to these facts.
>
> Hope that helps
>   
It certainly does. Thanks very much, Christian!

Cheers,
Filip




From cschulte at kth.se  Tue Aug 28 14:30:21 2007
From: cschulte at kth.se (Christian Schulte)
Date: Tue, 28 Aug 2007 14:30:21 +0200
Subject: [gecode-users] Schedule Branching Recommendations
In-Reply-To: <46D3E617.4070306@logis.cz>
Message-ID: <002401c7e96f$33ef7040$acd4ed82@beule>

Hi Filip,

as you might have guessed, Gecode has nothing built in that is not used. So
far, we had no need to have first class references to propagators. That
entails that communication with a propagator currently is not possible.
That's another thing we knew would come up some day, but so far there was no
need. If you see a little clearer of what you want, we will try to come up
with something that does the job. 

Actually, I believe the only thing that's needed are first-class references
to a propagator that you can store somewhere (this is not totally
straightforward as these references must be updated during cloning and the
current architecture for cloning takes advantage of the fact that there are
no references to propagator but at a single well-defined location). But
that's something we could easily squeeze in for 2.0.

Another small point, branching descriptions are not copied: they act as a
closure to a space and are hence maintained by the search engine
independently of cloning.

Christian

--
Christian Schulte, http://www.imit.kth.se/~schulte/ 

-----Original Message-----
From: Filip Konvicka [mailto:filip.konvicka at logis.cz] 
Sent: Tuesday, August 28, 2007 11:09 AM
To: cschulte at kth.se
Cc: users at gecode.org
Subject: Re: [gecode-users] Schedule Branching Recommendations



> Hi Filip,
>
> well, well. Let me just summarize some facts:
>
>  - Your idea will work but, as you say yourself, is not going to win any
>    software design beauty contest. It might be good to tinker, but for
>    Gecode itself a design will be needed that does not require to change
>    a space (that's typically a user's model) when using a propagator
>    cum branching.
>   

:-D

Yes, I realize that the approach is not generally applicable and is not 
"clean" at all, and I am looking forward for your general solution!

>  - The idea that this data is just a cache is very helpful. Indeed, we
>    use the very same idea to great advantage in many propagators that
>    ship with Gecode: do not copy the data just reconstruct it when needed,
>    and if the data is already there keep it up to date while doing
>    propagation. If the data becomes to messy, just flush the cache (data)
>    an reconstruct it.
>   

This I understand, and this is also one of the things that make Gecode 
so nice for me.

>  - Invoking the status method of a space will always compute a fixpoint,
>    regardless of recomputation or not (as does the attempt to clone a
>    space). This also entails that when the status method of a branching
>    is called, the home is at fixpoint (stable).
>
>  - Invoking a commit method however will not compute a fixpoint: the very
>    idea of making recomputation efficient relies on this.
>
>  - You might be able to speed up branching considerably if you take 
> advantage
>    of branching descriptions. They must store information to actually 
> perform
>    a commit operation (as the space is typically not at fixpoint, see 
> above).
>    You have the possibility to add additional information to the branching

>    description that assists in maintaing your data.
>   

I think that in most cases, the branching descriptions can be really 
small and fast to copy. Currently I don't think I'd use it for 
maintaining the data.

I was thinking about one more thing - whether it is possible to 
communicate with existing propagators to extend the constraints on the 
fly. In the case of scheduling constraints, this could be adding tasks 
to a resource for example. Again, I think this could be done in commit, 
I'm just not sure whether it's possible to somehow access the 
propagators. One way I thought of is having some dedicated "spare" 
variables (probably quite clean, but not much flexible and quite 
costly); another approach that I think could work is implementing a 
(probably one-way) "message queue" for the communication. I realize that 
in this case, a variable would have to be associated with the queue that 
would wake up the propagator when needed.

> The idea to maintain the data as a cache is orthogonal to these facts.
>
> Hope that helps
>   
It certainly does. Thanks very much, Christian!

Cheers,
Filip





From filip.konvicka at logis.cz  Tue Aug 28 15:10:04 2007
From: filip.konvicka at logis.cz (=?UTF-8?B?RmlsaXAgS29udmnEjWth?=)
Date: Tue, 28 Aug 2007 15:10:04 +0200
Subject: [gecode-users] Schedule Branching Recommendations
In-Reply-To: <002401c7e96f$33ef7040$acd4ed82@beule>
References: <002401c7e96f$33ef7040$acd4ed82@beule>
Message-ID: <46D41EAC.1090209@logis.cz>

Hi Christian,

> as you might have guessed, Gecode has nothing built in that is not used. So
> far, we had no need to have first class references to propagators. That
> entails that communication with a propagator currently is not possible.
> That's another thing we knew would come up some day, but so far there was no
> need. If you see a little clearer of what you want, we will try to come up
> with something that does the job. 
>
> Actually, I believe the only thing that's needed are first-class references
> to a propagator that you can store somewhere (this is not totally
> straightforward as these references must be updated during cloning and the
> current architecture for cloning takes advantage of the fact that there are
> no references to propagator but at a single well-defined location). But
> that's something we could easily squeeze in for 2.0.
>   

I should have been more specific here - I was not asking whether it is 
possible now, using the current library, but wheter it is possible at 
all. I'm definitely not asking you to add anything to Gecode now, 
because I don't know exactly what I will need, nor whether it would be 
generally useful. I was just thinking of what could be possible in 
version 8.0 :-)

As for first-class references to propagators - that's why I thought I'd 
do it the other way round: the message queue could be a part of the 
space, accessible both from branching during commits and in the 
propagator as well. This does not require changes in the library, and 
will be sufficien for my needs (should I find out that I really need 
it). Of course, this is not good design, as the propagators/branchings 
need to know the space's type (though some generalization is possible at 
this level too).

> Another small point, branching descriptions are not copied: they act as a
> closure to a space and are hence maintained by the search engine
> independently of cloning.
>   

I did not think of them being copied during cloning, but rather as a 
part of some computation-path-structure reorganization (I don't know 
whether a branching description is ever copied...I thought that perhaps 
some std::vector or the like could be used internally by the library).

Thanks!
Filip

> Christian
>
> --
> Christian Schulte, http://www.imit.kth.se/~schulte/ 
>
> -----Original Message-----
> From: Filip Konvicka [mailto:filip.konvicka at logis.cz] 
> Sent: Tuesday, August 28, 2007 11:09 AM
> To: cschulte at kth.se
> Cc: users at gecode.org
> Subject: Re: [gecode-users] Schedule Branching Recommendations
>
>
>
>   
>> Hi Filip,
>>
>> well, well. Let me just summarize some facts:
>>
>>  - Your idea will work but, as you say yourself, is not going to win any
>>    software design beauty contest. It might be good to tinker, but for
>>    Gecode itself a design will be needed that does not require to change
>>    a space (that's typically a user's model) when using a propagator
>>    cum branching.
>>   
>>     
>
> :-D
>
> Yes, I realize that the approach is not generally applicable and is not 
> "clean" at all, and I am looking forward for your general solution!
>
>   
>>  - The idea that this data is just a cache is very helpful. Indeed, we
>>    use the very same idea to great advantage in many propagators that
>>    ship with Gecode: do not copy the data just reconstruct it when needed,
>>    and if the data is already there keep it up to date while doing
>>    propagation. If the data becomes to messy, just flush the cache (data)
>>    an reconstruct it.
>>   
>>     
>
> This I understand, and this is also one of the things that make Gecode 
> so nice for me.
>
>   
>>  - Invoking the status method of a space will always compute a fixpoint,
>>    regardless of recomputation or not (as does the attempt to clone a
>>    space). This also entails that when the status method of a branching
>>    is called, the home is at fixpoint (stable).
>>
>>  - Invoking a commit method however will not compute a fixpoint: the very
>>    idea of making recomputation efficient relies on this.
>>
>>  - You might be able to speed up branching considerably if you take 
>> advantage
>>    of branching descriptions. They must store information to actually 
>> perform
>>    a commit operation (as the space is typically not at fixpoint, see 
>> above).
>>    You have the possibility to add additional information to the branching
>>     
>
>   
>>    description that assists in maintaing your data.
>>   
>>     
>
> I think that in most cases, the branching descriptions can be really 
> small and fast to copy. Currently I don't think I'd use it for 
> maintaining the data.
>
> I was thinking about one more thing - whether it is possible to 
> communicate with existing propagators to extend the constraints on the 
> fly. In the case of scheduling constraints, this could be adding tasks 
> to a resource for example. Again, I think this could be done in commit, 
> I'm just not sure whether it's possible to somehow access the 
> propagators. One way I thought of is having some dedicated "spare" 
> variables (probably quite clean, but not much flexible and quite 
> costly); another approach that I think could work is implementing a 
> (probably one-way) "message queue" for the communication. I realize that 
> in this case, a variable would have to be associated with the queue that 
> would wake up the propagator when needed.
>
>   
>> The idea to maintain the data as a cache is orthogonal to these facts.
>>
>> Hope that helps
>>   
>>     
> It certainly does. Thanks very much, Christian!
>
> Cheers,
> Filip



From peliculasivan at gmail.com  Tue Aug 28 23:55:07 2007
From: peliculasivan at gmail.com (Ivan Carvajal)
Date: Tue, 28 Aug 2007 23:55:07 +0200
Subject: [gecode-users] How i can save a copy of a Space?
Message-ID: <49959f050708281455w558c6a14gb5a29fc0dc744e69@mail.gmail.com>

Hi,

i've a problem, i need implement a backtrack during the search. I try save a
copy of ReCoStack and current space in a static stack, but when i look the
stack, the Space variable is corrupt,

i.e: in n-queens, i save the first space: [qqqq,qqqq,qqqq,qqqq] but when i
look the stack i see [Q???,??Q?,?Q??,???Q].

how can happend this?

Sorry for my english :)

Thanks!


Ivan



-- 
...:::PAU TE AMO:::...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20070828/5850c4bf/attachment.htm>

From rafaparafernalia at gmail.com  Wed Aug 29 04:07:12 2007
From: rafaparafernalia at gmail.com (Rafael Meneses)
Date: Tue, 28 Aug 2007 22:07:12 -0400
Subject: [gecode-users] How i can save a copy of a Space?
In-Reply-To: <49959f050708281455w558c6a14gb5a29fc0dc744e69@mail.gmail.com>
References: <49959f050708281455w558c6a14gb5a29fc0dc744e69@mail.gmail.com>
Message-ID: <d701e0390708281907o2231d357jd72d6bebf41d3cb0@mail.gmail.com>

Hi,

> i've a problem, i need implement a backtrack during the search. I try save a
> copy of ReCoStack and current space in a static stack, but when i look the
> stack, the Space variable is corrupt,
>
> i.e: in n-queens, i save the first space: [qqqq,qqqq,qqqq,qqqq] but when i
> look the stack i see [Q???,??Q?,?Q??,???Q].
>
> how can happend this?

I don't know if understand the question but...

If you use a standard search engine, they use a recomputation technique.

http://www.gecode.org/gecode-doc-latest/group__TaskIntSearch.html
http://www.gecode.org/paper.html?id=Schulte:LNAI:2002


Only in some parts of the stack exist a space, in the other parts you
must recompute the space.

You can modify the parameters to the search to force the use of  a
full copy, to force the copy on all positions and the search don't
make a recomputation.


Saludos,

>
> Sorry for my english :)
>
> Thanks!
>
>
> Ivan
>
>
>
> --
> ...:::PAU TE AMO:::...
> _______________________________________________
> Gecode users mailing list
> users at gecode.org
> https://www.gecode.org/mailman/listinfo/gecode-users
>
>


-- 
Rafael Meneses
http://www.zeke.cl
Alvarez 88 Local 10, Vi?a del Mar.
(32) 2626447



From filip.konvicka at logis.cz  Fri Aug 31 10:38:21 2007
From: filip.konvicka at logis.cz (=?UTF-8?B?RmlsaXAgS29udmnEjWth?=)
Date: Fri, 31 Aug 2007 10:38:21 +0200
Subject: [gecode-users] branchings methods Space* arguments
Message-ID: <46D7D37D.8080600@logis.cz>

Hi,

my new propagators run just fine :-) Now I wanted to do create a 
branching, and I don't understand why status(), descrption() and 
commit() take the "Space *home" parameter. I thought that a branching is 
bound to "its" space in the constructor, and that it would always 
operate on that space. I also thought that it would, in the constructor 
or in the post() function, create some views of some variables in the 
space, and operate on them instead of accessing the space directly. In 
fact, the same holds for propagators as well.

Can you explain, please?

Thanks,
Filip




From zayenz at gmail.com  Fri Aug 31 11:22:04 2007
From: zayenz at gmail.com (Mikael Zayenz Lagerkvist)
Date: Fri, 31 Aug 2007 11:22:04 +0200
Subject: [gecode-users] branchings methods Space* arguments
In-Reply-To: <46D7D37D.8080600@logis.cz>
References: <46D7D37D.8080600@logis.cz>
Message-ID: <63b5c8b00708310222n4e8e8d0ej6aa45f5b4b34c852@mail.gmail.com>

On 8/31/07, Filip Konvi?ka <filip.konvicka at logis.cz> wrote:
> Hi,
>
> my new propagators run just fine :-) Now I wanted to do create a
> branching, and I don't understand why status(), descrption() and
> commit() take the "Space *home" parameter. I thought that a branching is
> bound to "its" space in the constructor, and that it would always
> operate on that space. I also thought that it would, in the constructor
> or in the post() function, create some views of some variables in the
> space, and operate on them instead of accessing the space directly. In
> fact, the same holds for propagators as well.
>
> Can you explain, please?

While propagators and branchings (collectively called actors) do
belong to a specific Space, they do not have this information stored.
Instead, the associated Space of an actor is passed as a dynamic scope
in calls to it. As for (views of) variables, they also do not contain
a reference to their associated Space.

The normal style for an actor is to, indeed, create some views in the
post-function and use these. For example, the Space argument is needed
to schedule propagators when a tell is made. It is also needed when
one needs to allocate memory from the Space-managed heap.

Hope this helps,
Mikael

-- 
Mikael Zayenz Lagerkvist, http://www.ict.kth.se/~zayenz/

From cschulte at kth.se  Fri Aug 31 11:36:26 2007
From: cschulte at kth.se (Christian Schulte)
Date: Fri, 31 Aug 2007 11:36:26 +0200
Subject: [gecode-users] branchings methods Space* arguments
In-Reply-To: <46D7D37D.8080600@logis.cz>
Message-ID: <000001c7ebb2$676448c0$0401a8c0@tiny>

Hi,

The best of all explanations: simplicity (and hence efficiency). No
datastructure in Gecode stores its home space, instead all operations that
might need a space get it passed as argument. Variables, propagators, etc,
still belong to its single home space, however they just do not store the
space information. This leads to much stricter invariants (compared to the
Mozart design to store the home space everywhere) and hence less bugs.

And the reason why pretty all operations need a space is for (that is, at
least) memory management: remember, memory is managed per space. That in
particular includes operations that modify variable domains either directly
or indirectly.

Cheers
Christian

--
Christian Schulte, www.ict.kth.se/~schulte/ 

-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Filip Konvicka
Sent: Friday, August 31, 2007 10:38 AM
To: users at gecode.org
Subject: [gecode-users] branchings methods Space* arguments


Hi,

my new propagators run just fine :-) Now I wanted to do create a 
branching, and I don't understand why status(), descrption() and 
commit() take the "Space *home" parameter. I thought that a branching is 
bound to "its" space in the constructor, and that it would always 
operate on that space. I also thought that it would, in the constructor 
or in the post() function, create some views of some variables in the 
space, and operate on them instead of accessing the space directly. In 
fact, the same holds for propagators as well.

Can you explain, please?

Thanks,
Filip


_______________________________________________
Gecode users mailing list
users at gecode.org https://www.gecode.org/mailman/listinfo/gecode-users




From jeremie.vautard at laposte.net  Fri Aug 31 15:54:20 2007
From: jeremie.vautard at laposte.net (=?ISO-8859-1?Q?J=E9r=E9mie_Vautard?=)
Date: Fri, 31 Aug 2007 15:54:20 +0200
Subject: [gecode-users] "anti-"dom constraint
Message-ID: <F0E55025-7BD7-4294-9361-43BD521B5CDA@laposte.net>

Hi !

I ask here to be sure : I would like to post a constraint such that a  
variable x is NOT in  an IntSet s. Is it OK to simply mimic the  
initial dom function :

dom(Space* home, IntVar x, const IntSet& is, IntConLevel) {
00049     if (home->failed()) return;
00050     IntView xv(x);
00051     IntSetRanges ris(is);
00052     GECODE_ME_FAIL(home,xv.inter(home,ris));
00053   }



just replacing "inter" by "minus" in the last line ?

Cheers,

Jeremie


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20070831/030f28c0/attachment.htm>

From cschulte at kth.se  Fri Aug 31 17:06:56 2007
From: cschulte at kth.se (Christian Schulte)
Date: Fri, 31 Aug 2007 17:06:56 +0200
Subject: [gecode-users] "anti-"dom constraint
In-Reply-To: <F0E55025-7BD7-4294-9361-43BD521B5CDA@laposte.net>
Message-ID: <001501c7ebe0$92e8cb00$0401a8c0@tiny>

Yes, Christian


--
Christian Schulte, www.ict.kth.se/~schulte/ 
-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of J?r?mie Vautard
Sent: Friday, August 31, 2007 3:54 PM
To: users at gecode.org
Subject: [gecode-users] "anti-"dom constraint


Hi ! 


I ask here to be sure : I would like to post a constraint such that a
variable x is NOT in an IntSet s. Is it OK to simply mimic the initial dom
function : 


dom(Space* home, IntVar x, const IntSet& is, IntConLevel) {
00049 if (home->failed()) return;
00050 IntView xv(x);
00051 IntSetRanges ris(is);
00052 GECODE_ME_FAIL(home,xv.inter(home,ris));
00053 }






just replacing "inter" by "minus" in the last line ?


Cheers, 


Jeremie




