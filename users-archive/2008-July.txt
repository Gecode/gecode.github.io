From stephane.zampelli at uclouvain.be  Tue Jul  1 18:46:02 2008
From: stephane.zampelli at uclouvain.be (Zampelli Stephane)
Date: Tue, 01 Jul 2008 16:46:02 +0000
Subject: [gecode-users] Non-monotonic propagator.
Message-ID: <486A5F4A.4050905@uclouvain.be>

Hi,

Suppose one has a non-monotonic propagator P, because the propagator 
uses an approximation (of a NP-Hard problem) of the pruning.
How can Gecode accomodate of this situation?
Does this mean that recomputation cannot be used?
Is the result correct if the recomputation is not used (full copying, 
c_d=1)?

What about executing the propag P after the fixpoint of all other 
monotonic constraints?

Thank you,

Zampelli St?phane.




From tack at ps.uni-sb.de  Tue Jul  1 17:32:41 2008
From: tack at ps.uni-sb.de (Guido Tack)
Date: Tue, 1 Jul 2008 17:32:41 +0200
Subject: [gecode-users] Non-monotonic propagator.
In-Reply-To: <486A5F4A.4050905@uclouvain.be>
References: <486A5F4A.4050905@uclouvain.be>
Message-ID: <AC169416-1815-46BC-8E60-2AE305245810@ps.uni-sb.de>

Zampelli Stephane wrote:
> Suppose one has a non-monotonic propagator P, because the propagator
> uses an approximation (of a NP-Hard problem) of the pruning.
> How can Gecode accomodate of this situation?
> Does this mean that recomputation cannot be used?

Recomputation will almost certainly fail (i.e., segfault or throw an  
exception) if non-monotonic propagators are present.

> Is the result correct if the recomputation is not used (full copying,
> c_d=1)?

Yes.

> What about executing the propag P after the fixpoint of all other
> monotonic constraints?

That looks like a solution in principle, but won't work in practice.   
The problem is that the space is not going to be stable (i.e. at a  
fixpoint) after running P.  Spaces in Gecode can only be copied at  
fixpoints.  You could iterate the normal fixpoint computation and the  
invocation of P until you reach a mutual fixpoint.  Still, this is not  
guaranteed to work with batch recomputation, where only one fixpoint  
is computed for each backtrack.

We have thought a bit about how to accomodate non-monotonic  
propagators, but it's really not easy.

Cheers,
	Guido




From mauriciotorob at gmail.com  Tue Jul 15 00:19:33 2008
From: mauriciotorob at gmail.com (Mauricio Toro)
Date: Tue, 15 Jul 2008 00:19:33 +0200
Subject: [gecode-users] Graph contribution
Message-ID: <a6b4b44a0807141519i5f476f4bwc38c9b650026a153@mail.gmail.com>

Hello all,
I would like to know what happened to the API for graph constraints that
used to be in Gecode's older versions.
Is that API somehow replaced by DFA and REGExp?
What has to be done to make it work again?

Thanks,

Mauricio

-- 
Mauricio Toro Bermudez
Estudiante de Ingenier?a de Sistemas
Pontificia Universidad Javeriana, Colombia

Stagiare ? l'Ircam
1, place Igor-Stravinsky 75004 Paris,
France de 2008 ? 2009
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20080715/b1f7d509/attachment.htm>

From tack at ps.uni-sb.de  Tue Jul 15 17:34:57 2008
From: tack at ps.uni-sb.de (Guido Tack)
Date: Tue, 15 Jul 2008 17:34:57 +0200
Subject: [gecode-users] Graph contribution
In-Reply-To: <a6b4b44a0807141519i5f476f4bwc38c9b650026a153@mail.gmail.com>
References: <a6b4b44a0807141519i5f476f4bwc38c9b650026a153@mail.gmail.com>
Message-ID: <F58B2D2D-9FF6-4C80-8386-711F0366DAAD@ps.uni-sb.de>

Mauricio Toro wrote:
> I would like to know what happened to the API for graph constraints  
> that used to be in Gecode's older versions.
> Is that API somehow replaced by DFA and REGExp?

DFA and REG have nothing to do with graph constraints, they are  
constraints on integer variables.

> What has to be done to make it work again?

This contribution has not been ported to Gecode 2.0 yet, and it is  
currently not likely that it will be ported in the near future.  
Basically, it would have to be adapted to all the Gecode API changes   
that happened between 1.3.1 (I guess) and the current release.

Cheers,
	Guido




From nick.hindle at tesco.net  Mon Jul 21 19:46:06 2008
From: nick.hindle at tesco.net (Nick Hindle)
Date: Mon, 21 Jul 2008 18:46:06 +0100
Subject: [gecode-users] Visual Studio 2008
Message-ID: <DC40464C250341A98952FE382ECD2B63@HindleDesktop>

Hi,

I've downloaded Gecode 2.1.1 and built some of the examples using Visual C++ Express 2008, but at runtime I get a memory allocation error in the print function. It appears this is because none of the IntVar values have been initialised by the branching process.

Can you confirm if VC++ 2008 supported?

Thanks,

Nick
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20080721/d5572ff7/attachment.htm>

From cschulte at kth.se  Tue Jul 22 21:32:10 2008
From: cschulte at kth.se (Christian Schulte)
Date: Tue, 22 Jul 2008 21:32:10 +0200
Subject: [gecode-users] Visual Studio 2008
In-Reply-To: <DC40464C250341A98952FE382ECD2B63@HindleDesktop>
References: <DC40464C250341A98952FE382ECD2B63@HindleDesktop>
Message-ID: <000601c8ec31$a7b37dd0$f71a7970$@se>

Yes, it is indeed supported: I develop Gecode using MSVC 2008 myself. 

 

You sure the compilation went okay?

 

Christian

 

--

Christian Schulte, www.ict.kth.se/~cschulte/

 

From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Nick Hindle
Sent: Monday, July 21, 2008 7:46 PM
To: users at gecode.org
Subject: [gecode-users] Visual Studio 2008

 

Hi,

 

I've downloaded Gecode 2.1.1 and built some of the examples using Visual C++
Express 2008, but at runtime I get a memory allocation error in the print
function. It appears this is because none of the IntVar values have been
initialised by the branching process.

 

Can you confirm if VC++ 2008 supported?

 

Thanks,

 

Nick

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20080722/10c79b62/attachment.htm>

From mauriciotorob at gmail.com  Mon Jul 28 12:02:15 2008
From: mauriciotorob at gmail.com (Mauricio Toro)
Date: Mon, 28 Jul 2008 12:02:15 +0200
Subject: [gecode-users] Gecode::MemoryExhausted
Message-ID: <a6b4b44a0807280302s5c6eeacdo28e33fce0bb007c9@mail.gmail.com>

Hello all,
I am running some examples with a wrapper I am developing for Gecode
to Common Lisp. Sometimes, the lisp interpreter gives this error:

terminate called after throwing an instance of 'Gecode::MemoryExhausted'
  what():  Memory: Heap memory exhausted

Error: Signal 6 [code 0] at 94FCDB9E {inside foreign code}
eax        0 ; ebx 9505443F ; ecx BFFFEDAC ; edx 94FCDB9E
esp BFFFEDAC ; ebp BFFFEDC8 ; esi   111B14 ; edi A065D578

What is this exception about?

Thanks

-- 
Mauricio Toro Bermudez
Estudiante de Ingenier?a de Sistemas
Pontificia Universidad Javeriana, Colombia

Stagiare ? l'Ircam
1, place Igor-Stravinsky 75004 Paris,
France de 2008 ? 2009
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20080728/aa4e3162/attachment.htm>

From zayenz at gmail.com  Mon Jul 28 14:23:50 2008
From: zayenz at gmail.com (Mikael Zayenz Lagerkvist)
Date: Mon, 28 Jul 2008 14:23:50 +0200
Subject: [gecode-users] Gecode::MemoryExhausted
In-Reply-To: <a6b4b44a0807280302s5c6eeacdo28e33fce0bb007c9@mail.gmail.com>
References: <a6b4b44a0807280302s5c6eeacdo28e33fce0bb007c9@mail.gmail.com>
Message-ID: <63b5c8b00807280523x39a64c51ke71889c805820102@mail.gmail.com>

The exception means exactly what the message says: the heap memory has
been exhausted.

Please see previous discussion about this exception in the
mailing-list: http://search.gmane.org/search.php?group=gmane.comp.lib.gecode.user&query=MemoryExhausted

Cheers/
Mikael

On Mon, Jul 28, 2008 at 12:02 PM, Mauricio Toro <mauriciotorob at gmail.com> wrote:
> Hello all,
> I am running some examples with a wrapper I am developing for Gecode
> to Common Lisp. Sometimes, the lisp interpreter gives this error:
> terminate called after throwing an instance of 'Gecode::MemoryExhausted'
>   what():  Memory: Heap memory exhausted
> Error: Signal 6 [code 0] at 94FCDB9E {inside foreign code}
> eax        0 ; ebx 9505443F ; ecx BFFFEDAC ; edx 94FCDB9E
> esp BFFFEDAC ; ebp BFFFEDC8 ; esi   111B14 ; edi A065D578
> What is this exception about?
> Thanks
> --
> Mauricio Toro Bermudez
> Estudiante de Ingenier?a de Sistemas
> Pontificia Universidad Javeriana, Colombia
>
> Stagiare ? l'Ircam
> 1, place Igor-Stravinsky 75004 Paris,
> France de 2008 ? 2009
>
> _______________________________________________
> Gecode users mailing list
> users at gecode.org
> https://www.gecode.org/mailman/listinfo/gecode-users
>
>



-- 
Mikael Zayenz Lagerkvist, http://www.ict.kth.se/~zayenz/



From tias.guns at cs.kuleuven.be  Mon Jul 28 18:08:06 2008
From: tias.guns at cs.kuleuven.be (Tias Guns)
Date: Mon, 28 Jul 2008 18:08:06 +0200
Subject: [gecode-users] reified linear sum of booleans
Message-ID: <op.ue0e3pl4qa8xjr@demerzel.cs.kuleuven.be>

Greetings,

I'm using a model in which I rely heavily on reified linear sums of  
booleans. Unfortunately the existing boolean reified linear sum  
implementatiom is horribly slow for this ! To overcome this, I'm currently  
channeling all boolean variables to integers, and posting the reified  
linear sum over the integers. This gives incredibly faster runtimes.

The first batch of constraints are regular reified linear sums, they are  
constructed by reading a binary matrix and creating an IntArgs 'row' which  
contains 0 or 1 (out or in). This 'row' is multiplied by an array of  
decision variables, each representing one column. Doing so selects the  
desired subset of those variables after which they are constrained and  
reified to the variable representing that row:
for (int r = 0; r!=nr_r;r++ ) {
   // make row
   for (int c = 0; c!=nr_c;c++ ) {
     row[c] = (1-tdb[r][c]); // complement
   }
   // sum(row*col_vars) = 0 <=> row_vars[r]
   linear(this, row, col_vars, IRT_EQ, 0, row_varsBool[r]);
}
here, the col_vars is an IntVarArgs that is channeled to corresponding  
BoolVars.

The second batch of constraints are imply-reified linear sums, having one  
sided reification. Because one-sided reification is not implemented in  
gecode directly, an extra auxiliary variable and constraint is used to  
manage it:
for (int c = 0; c!=nr_c;c++ ) {
   // make col
   for (int r = 0; r!=nr_r;r++ ) {
     col[r] = tdb[r][c];
   }
   // sum(col*row_vars) >= X <=> col_aux[c]
   linear(this, col, row_vars, IRT_GQ, X, col_aux[c]);
   // col_aux[c] => col_varsBool[c] (one-sided reificiation, reformulation  
is) col_aux[c] =< col_varsBool[c]
   rel(this, col_aux[c], IRT_LQ, col_varsBool[c]);
}
similarly as above, row_vars is an IntVarArgs channeled to corresponding  
BoolVars.


This model works very well but still, I'm wondering if there would be a  
better or cleaner way to model this, and if there are any plans to improve  
the reified linear sum of boolean constraints.


Kind regards,
Tias



From tack at ps.uni-sb.de  Tue Jul 29 08:59:26 2008
From: tack at ps.uni-sb.de (Guido Tack)
Date: Tue, 29 Jul 2008 08:59:26 +0200
Subject: [gecode-users] reified linear sum of booleans
In-Reply-To: <op.ue0e3pl4qa8xjr@demerzel.cs.kuleuven.be>
References: <op.ue0e3pl4qa8xjr@demerzel.cs.kuleuven.be>
Message-ID: <F9B15072-AEEE-4B2A-BB83-B39B20E17CB7@ps.uni-sb.de>

Hi Tias,

Tias Guns wrote:

> Greetings,
>
> I'm using a model in which I rely heavily on reified linear sums of
> booleans. Unfortunately the existing boolean reified linear sum
> implementatiom is horribly slow for this ! To overcome this, I'm  
> currently
> channeling all boolean variables to integers, and posting the reified
> linear sum over the integers. This gives incredibly faster runtimes.

The reified Boolean sums are currently not implemented by special  
propagators but using a decomposition that is not very efficient.

> The first batch of constraints are regular reified linear sums, they  
> are
> constructed by reading a binary matrix and creating an IntArgs 'row'  
> which
> contains 0 or 1 (out or in). This 'row' is multiplied by an array of
> decision variables, each representing one column. Doing so selects the
> desired subset of those variables after which they are constrained and
> reified to the variable representing that row:
> for (int r = 0; r!=nr_r;r++ ) {
>   // make row
>   for (int c = 0; c!=nr_c;c++ ) {
>     row[c] = (1-tdb[r][c]); // complement
>   }
>   // sum(row*col_vars) = 0 <=> row_vars[r]
>   linear(this, row, col_vars, IRT_EQ, 0, row_varsBool[r]);
> }
>
> here, the col_vars is an IntVarArgs that is channeled to corresponding
> BoolVars.

You may want to use Boolean disjunction here, although you'll have to  
use another temporary Boolean variable.  Something like this:

for (int r = 0; r != nr_r; r++) {
   BoolVarArgs col(noOfZeroesIn_tdb_Row[r]);
   for (int i = 0, int c = 0; c != nr_c; c++) {
     if (tdb[r][c])
     	col[i++] = col_varsBool[c];
   }
   BoolVar tmp(this, 0, 1);
   rel(this, BOT_OR, col, tmp);
   rel(this, tmp, IRT_NQ, row_varsBool[r]);
}

I'm not sure whether this is going to be more efficient, but the  
specialized Boolean propagators should be better.

> The second batch of constraints are imply-reified linear sums,  
> having one
> sided reification. Because one-sided reification is not implemented in
> gecode directly, an extra auxiliary variable and constraint is used to
> manage it:
> for (int c = 0; c!=nr_c;c++ ) {
>   // make col
>   for (int r = 0; r!=nr_r;r++ ) {
>     col[r] = tdb[r][c];
>   }
>   // sum(col*row_vars) >= X <=> col_aux[c]
>   linear(this, col, row_vars, IRT_GQ, X, col_aux[c]);
>   // col_aux[c] => col_varsBool[c] (one-sided reificiation,  
> reformulation
> is) col_aux[c] =< col_varsBool[c]
>   rel(this, col_aux[c], IRT_LQ, col_varsBool[c]);
> }
> similarly as above, row_vars is an IntVarArgs channeled to  
> corresponding
> BoolVars.

As suggested above, you could post the first linear constraint using  
just the row_vars for which col[r] is 1, but in this case it probably  
isn't more efficient (since the linear will immediately throw away all  
the variables with 0 coefficients anyway).

> This model works very well but still, I'm wondering if there would  
> be a
> better or cleaner way to model this, and if there are any plans to  
> improve
> the reified linear sum of boolean constraints.

Yes, the reified linear Boolean sum is going to be reimplemented, but  
not for the (upcoming) 2.2.0 release.

Cheers,
	Guido




From tias.guns at cs.kuleuven.be  Tue Jul 29 18:15:30 2008
From: tias.guns at cs.kuleuven.be (Tias Guns)
Date: Tue, 29 Jul 2008 18:15:30 +0200
Subject: [gecode-users] reified linear sum of booleans
In-Reply-To: <F9B15072-AEEE-4B2A-BB83-B39B20E17CB7@ps.uni-sb.de>
References: <op.ue0e3pl4qa8xjr@demerzel.cs.kuleuven.be>
	<F9B15072-AEEE-4B2A-BB83-B39B20E17CB7@ps.uni-sb.de>
Message-ID: <op.ue1934biqa8xjr@demerzel.cs.kuleuven.be>

On Tue, 29 Jul 2008 08:59:26 +0200, Guido Tack <tack at ps.uni-sb.de> wrote:

> Hi Tias,

Thank you for your answers,

> Tias Guns wrote:
>
>> Greetings,
>>
>> I'm using a model in which I rely heavily on reified linear sums of
>> booleans. Unfortunately the existing boolean reified linear sum
>> implementatiom is horribly slow for this ! To overcome this, I'm  
>> currently
>> channeling all boolean variables to integers, and posting the reified
>> linear sum over the integers. This gives incredibly faster runtimes.
>
> The reified Boolean sums are currently not implemented by special  
> propagators but using a decomposition that is not very efficient.
>
>> The first batch of constraints are regular reified linear sums, they are
>> constructed by reading a binary matrix and creating an IntArgs 'row'  
>> which
>> contains 0 or 1 (out or in). This 'row' is multiplied by an array of
>> decision variables, each representing one column. Doing so selects the
>> desired subset of those variables after which they are constrained and
>> reified to the variable representing that row:
>> for (int r = 0; r!=nr_r;r++ ) {
>>   // make row
>>   for (int c = 0; c!=nr_c;c++ ) {
>>     row[c] = (1-tdb[r][c]); // complement
>>   }
>>   // sum(row*col_vars) = 0 <=> row_vars[r]
>>   linear(this, row, col_vars, IRT_EQ, 0, row_varsBool[r]);
>> }
>>
>> here, the col_vars is an IntVarArgs that is channeled to corresponding
>> BoolVars.
>
> You may want to use Boolean disjunction here, although you'll have to  
> use another temporary Boolean variable.  Something like this:
>
> for (int r = 0; r != nr_r; r++) {
>    BoolVarArgs col(noOfZeroesIn_tdb_Row[r]);
>    for (int i = 0, int c = 0; c != nr_c; c++) {
>      if (tdb[r][c])
>      	col[i++] = col_varsBool[c];
>    }
>    BoolVar tmp(this, 0, 1);
>    rel(this, BOT_OR, col, tmp);
>    rel(this, tmp, IRT_NQ, row_varsBool[r]);
> }
>
> I'm not sure whether this is going to be more efficient, but the  
> specialized Boolean propagators should be better.

Unfortunately it's not more efficient. The number of propagations  
increases, probably because of the extra constraints. The runtime behaves  
worse and worse as the problem instances become larger and harder. I've  
looked into posting an NaryOr constraint with a BoolViewArray and a  
NegBoolView directly, but the current templating of NaryOr doesn't allow  
it. I'm hoping/thinking that a reified linear sum of booleans would be  
able to achieve equal propagation..

>> The second batch of constraints are imply-reified linear sums, having  
>> one
>> sided reification. Because one-sided reification is not implemented in
>> gecode directly, an extra auxiliary variable and constraint is used to
>> manage it:
>> for (int c = 0; c!=nr_c;c++ ) {
>>   // make col
>>   for (int r = 0; r!=nr_r;r++ ) {
>>     col[r] = tdb[r][c];
>>   }
>>   // sum(col*row_vars) >= X <=> col_aux[c]
>>   linear(this, col, row_vars, IRT_GQ, X, col_aux[c]);
>>   // col_aux[c] => col_varsBool[c] (one-sided reificiation,  
>> reformulation
>> is) col_aux[c] =< col_varsBool[c]
>>   rel(this, col_aux[c], IRT_LQ, col_varsBool[c]);
>> }
>> similarly as above, row_vars is an IntVarArgs channeled to corresponding
>> BoolVars.
>
> As suggested above, you could post the first linear constraint using  
> just the row_vars for which col[r] is 1, but in this case it probably  
> isn't more efficient (since the linear will immediately throw away all  
> the variables with 0 coefficients anyway).
>
>> This model works very well but still, I'm wondering if there would be a
>> better or cleaner way to model this, and if there are any plans to  
>> improve
>> the reified linear sum of boolean constraints.
>
> Yes, the reified linear Boolean sum is going to be reimplemented, but  
> not for the (upcoming) 2.2.0 release.

Excellent, thanks in advance.


Greetings,
Tias

> Cheers,
> 	Guido





