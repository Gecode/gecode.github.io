From jeffreym9 at yahoo.com.hk  Sun Feb  1 10:20:58 2009
From: jeffreym9 at yahoo.com.hk (Jeffrey)
Date: Sun, 1 Feb 2009 01:20:58 -0800 (PST)
Subject: [gecode-users] Constraint Hierachy
Message-ID: <964895.30941.qm@web111408.mail.gq1.yahoo.com>

Does Gecode support constraint hierarchy?

If not, how can I implemented one on Gecode?


      Yahoo!???????????????????! ??? http://hk.promo.yahoo.com/security/ ????!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20090201/d5c1d3dd/attachment.htm>

From tack at ps.uni-sb.de  Mon Feb  2 00:52:05 2009
From: tack at ps.uni-sb.de (Guido Tack)
Date: Mon, 2 Feb 2009 00:52:05 +0100 (CET)
Subject: [gecode-users] Meaning of red triangle and white circle in Gist
In-Reply-To: <454111.11945.qm@web111415.mail.gq1.yahoo.com>
References: <454111.11945.qm@web111415.mail.gq1.yahoo.com>
Message-ID: <47028.128.250.36.131.1233532325.squirrel@www.ps.uni-sb.de>

> Does red triangle means a pruned subtree and a white circle means a branch
> that has not been visited yet?

Yes.

Cheers,
   Guido





From cschulte at kth.se  Mon Feb  2 10:14:51 2009
From: cschulte at kth.se (Christian Schulte)
Date: Mon, 2 Feb 2009 10:14:51 +0100
Subject: [gecode-users] Constraint Hierachy
In-Reply-To: <964895.30941.qm@web111408.mail.gq1.yahoo.com>
References: <964895.30941.qm@web111408.mail.gq1.yahoo.com>
Message-ID: <000f01c98516$b4687890$1d3969b0$@se>

No, it does not. You need to be more detailled of what you want to do.

 

Christian

 

--

Christian Schulte, www.ict.kth.se/~cschulte/

 

From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf Of Jeffrey
Sent: Sunday, February 01, 2009 10:21 AM
To: gecode at gecode.org
Subject: [gecode-users] Constraint Hierachy

 

Does Gecode support constraint hierarchy?

 

If not, how can I implemented one on Gecode?

 

  _____  

Yahoo!???????????????????! <http://hk.promo.yahoo.com/security/> ????

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20090202/0474796c/attachment.htm>

From larsko at cs.st-andrews.ac.uk  Tue Feb  3 10:55:23 2009
From: larsko at cs.st-andrews.ac.uk (Lars Kotthoff)
Date: Tue, 3 Feb 2009 09:55:23 +0000
Subject: [gecode-users] Propagator priority queue
Message-ID: <20090203095523.59f944f9@akiba.cs.st-andrews.ac.uk>

Dear all,

 does Gecode use a priority queue for the propagators which are fired when a
variable becomes assigned etc or are they executed in the order they're
enqueued?

Thanks,

Lars



From cschulte at kth.se  Tue Feb  3 11:34:18 2009
From: cschulte at kth.se (Christian Schulte)
Date: Tue, 3 Feb 2009 11:34:18 +0100
Subject: [gecode-users] Propagator priority queue
In-Reply-To: <20090203095523.59f944f9@akiba.cs.st-andrews.ac.uk>
References: <20090203095523.59f944f9@akiba.cs.st-andrews.ac.uk>
Message-ID: <000301c985ea$f87d9130$e978b390$@se>

Please check here, this also has lots of experiments checking different
priority styles:
	
http://web.it.kth.se/~cschulte/paper.html?id=SchulteStuckey:TOPLAS:2008

For a more implementation-oriented discussion (including the data structures
for queues):
	http://www.ps.uni-sb.de/Papers/abstracts/tackDiss.html

But it is more or less the same what Eclipse does (I read Joachim Schimpf's
very clear reply to your question on the Eclipse mailing list). One
important difference is that Gecode's propagator queues support changing
priorities for propagators already being queued to support staging.

Christian

--
Christian Schulte, www.ict.kth.se/~cschulte/


-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Lars Kotthoff
Sent: Tuesday, February 03, 2009 10:55 AM
To: gecode at gecode.org
Subject: [gecode-users] Propagator priority queue

Dear all,

 does Gecode use a priority queue for the propagators which are fired when a
variable becomes assigned etc or are they executed in the order they're
enqueued?

Thanks,

Lars

_______________________________________________
Gecode users mailing list
users at gecode.org
https://www.gecode.org/mailman/listinfo/gecode-users




From boysen at itu.dk  Tue Feb  3 22:13:59 2009
From: boysen at itu.dk (Morten Boysen)
Date: Tue, 03 Feb 2009 22:13:59 +0100
Subject: [gecode-users] Weak points in Gecode
Message-ID: <4988B397.4070604@itu.dk>

Hi,

I have a somewhat odd request: I am looking for problem types that will 
make Gecode perform poorly. First I will explain what we are trying to do:

Me and my thesis partner are writing a thesis about configuration, where 
we are trying to do a hybrid between a configurator based on BDDs and a 
solver. The reason for this is that certain types of constraints will 
make a BDD perform very badly. An example of this is an Alldiff 
constraint, which makes a BDD take up exponentially space. However, 
other types of constraints are very well suited for BDDs and outperform 
any search-based configurator, if the BDD can be build. Therefore, our 
idea is to partition a problem, so the solver handles the Alldiff 
constraint, whereas all other constraints are compiled into a BDD. This 
BDD is then plugged into Gecode using a propagator. What we were hoping 
for was to get the best of both worlds: The efficient Alldiff propagator 
in Gecode, and the full inference of a BDD. However, out hybrid 
configurator is having a hard time beating a purely search based 
configurator, where all constraints are handled directly by Gecode.

What we therefore need, are some type of constraints that are well 
suited for a BDD, but make Gecode behave in a pathological way. We have 
tried knapsack constraints, binomial coefficients and we are now trying 
with table constraints (also known as ad-hoc constraints). In all cases, 
a pure Gecode configurator without a BDD propagator outperforms the 
hybrid using a BDD (which by the way, shows how efficient Gecode is!). 
Do you have any idea of any constraints that will make Gecode perform 
poorly (e.g. by making it very hard for Gecode to do propagation, thus 
resulting in a large search space).

Kind regards
Morten Boysen



From jeffreym9 at yahoo.com.hk  Mon Feb  2 15:49:59 2009
From: jeffreym9 at yahoo.com.hk (Jeffrey)
Date: Mon, 2 Feb 2009 06:49:59 -0800 (PST)
Subject: [gecode-users] Constraint Hierarchy on Gecode
Message-ID: <717099.48900.qm@web111413.mail.gq1.yahoo.com>

My problem involve 30 something constraints on a finite SetVar.

It involve 2 required constraints. All the rest are soft constraints.

I need to find a solution that can give me solutions which satisfy the most constraints.

So, should I implement the Algorithm myself to solve the Constraint Hierarchy?

Is there any examples or reference you would recommended?

The most straight one I can think of is the DeltaStar. 


      Yahoo!???????????????????! ??? http://hk.promo.yahoo.com/security/ ????!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20090202/ed4a6370/attachment.htm>

From malcolmr at cse.unsw.edu.au  Wed Feb  4 09:06:09 2009
From: malcolmr at cse.unsw.edu.au (Malcolm Ryan)
Date: Wed, 4 Feb 2009 19:06:09 +1100
Subject: [gecode-users] Copying spaces
Message-ID: <D2DE2986-E6EA-4355-A08A-2922DFB6A354@cse.unsw.edu.au>

What is the correct way to create a copy of a space? I'm confused by  
the behaviour of the following example:

class MySpace: public Space {
private:
	IntVar x;
public:
	MySpace() : Space(), x(this, 1, 4) {}

	MySpace(bool share, MySpace& old) : Space(share, old) {
		x.update(this, share, old.x);
	}

	Space* copy(bool share) {
		return new MySpace(share, *this);
	}

	virtual ~MySpace() {}
};

void CompletePlanVarTest::testUpdate0() {

	MySpace *space = new MySpace();
	cout << "Status: " << space->status() << endl;

	Space *copySpace = space->copy(true);
	cout << "Status: " << copySpace->status() << endl;
}

The output is:

Status: 1
Status: 0

That is the first space is solved (because it has no branchings) but  
the second space has failed. Why?

Is this not the right way to copy a space? Or have I implemented the  
space wrongly?

Malcolm



From zayenz at kth.se  Wed Feb  4 09:18:56 2009
From: zayenz at kth.se (Mikael Zayenz Lagerkvist)
Date: Wed, 4 Feb 2009 09:18:56 +0100
Subject: [gecode-users] Copying spaces
In-Reply-To: <D2DE2986-E6EA-4355-A08A-2922DFB6A354@cse.unsw.edu.au>
References: <D2DE2986-E6EA-4355-A08A-2922DFB6A354@cse.unsw.edu.au>
Message-ID: <63b5c8b00902040018k54ec9b89g62aee90094611ba5@mail.gmail.com>

Hi,

You shouldn't use the copy-function directly, it is only part of the
process of cloning a space. To make a clone of a space you should call
the clone-member in Space. Thus, you should change
        Space *copySpace = space->copy(true);
to
        Space *copySpace = space->clone(true);


Cheers,
Mikael

On Wed, Feb 4, 2009 at 9:06 AM, Malcolm Ryan <malcolmr at cse.unsw.edu.au> wrote:
> What is the correct way to create a copy of a space? I'm confused by
> the behaviour of the following example:
>
> class MySpace: public Space {
> private:
>        IntVar x;
> public:
>        MySpace() : Space(), x(this, 1, 4) {}
>
>        MySpace(bool share, MySpace& old) : Space(share, old) {
>                x.update(this, share, old.x);
>        }
>
>        Space* copy(bool share) {
>                return new MySpace(share, *this);
>        }
>
>        virtual ~MySpace() {}
> };
>
> void CompletePlanVarTest::testUpdate0() {
>
>        MySpace *space = new MySpace();
>        cout << "Status: " << space->status() << endl;
>
>        Space *copySpace = space->copy(true);
>        cout << "Status: " << copySpace->status() << endl;
> }
>
> The output is:
>
> Status: 1
> Status: 0
>
> That is the first space is solved (because it has no branchings) but
> the second space has failed. Why?
>
> Is this not the right way to copy a space? Or have I implemented the
> space wrongly?
>
> Malcolm
>
> _______________________________________________
> Gecode users mailing list
> users at gecode.org
> https://www.gecode.org/mailman/listinfo/gecode-users
>



-- 
Mikael Zayenz Lagerkvist, http://www.ict.kth.se/~zayenz/



From cschulte at kth.se  Wed Feb  4 09:14:28 2009
From: cschulte at kth.se (Christian Schulte)
Date: Wed, 4 Feb 2009 09:14:28 +0100
Subject: [gecode-users] Copying spaces
In-Reply-To: <D2DE2986-E6EA-4355-A08A-2922DFB6A354@cse.unsw.edu.au>
References: <D2DE2986-E6EA-4355-A08A-2922DFB6A354@cse.unsw.edu.au>
Message-ID: <000c01c986a0$9a467d50$ced377f0$@se>

Copy() is an internal function (maybe we should make it protected) use by
the clone() operation. So you have to use clone() to create a clone of a
space!

Christian

--
Christian Schulte, www.it.kth.se/~cschulte/


-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Malcolm Ryan
Sent: Wednesday, February 04, 2009 9:06 AM
To: gecode list
Subject: [gecode-users] Copying spaces

What is the correct way to create a copy of a space? I'm confused by  
the behaviour of the following example:

class MySpace: public Space {
private:
	IntVar x;
public:
	MySpace() : Space(), x(this, 1, 4) {}

	MySpace(bool share, MySpace& old) : Space(share, old) {
		x.update(this, share, old.x);
	}

	Space* copy(bool share) {
		return new MySpace(share, *this);
	}

	virtual ~MySpace() {}
};

void CompletePlanVarTest::testUpdate0() {

	MySpace *space = new MySpace();
	cout << "Status: " << space->status() << endl;

	Space *copySpace = space->copy(true);
	cout << "Status: " << copySpace->status() << endl;
}

The output is:

Status: 1
Status: 0

That is the first space is solved (because it has no branchings) but  
the second space has failed. Why?

Is this not the right way to copy a space? Or have I implemented the  
space wrongly?

Malcolm

_______________________________________________
Gecode users mailing list
users at gecode.org
https://www.gecode.org/mailman/listinfo/gecode-users




From malcolmr at cse.unsw.edu.au  Wed Feb  4 10:02:48 2009
From: malcolmr at cse.unsw.edu.au (Malcolm Ryan)
Date: Wed, 4 Feb 2009 20:02:48 +1100
Subject: [gecode-users] Copying spaces
In-Reply-To: <000c01c986a0$9a467d50$ced377f0$@se>
References: <D2DE2986-E6EA-4355-A08A-2922DFB6A354@cse.unsw.edu.au>
	<000c01c986a0$9a467d50$ced377f0$@se>
Message-ID: <4A2F2695-B150-4C0F-A4C5-45783C9B554B@cse.unsw.edu.au>

On 04/02/2009, at 7:14 PM, Christian Schulte wrote:
> Copy() is an internal function (maybe we should make it protected)  
> use by
> the clone() operation. So you have to use clone() to create a clone  
> of a
> space!

Thanks, that sorted out that problem... but left me with another. I  
haven't quite isolated it down to a simple example yet, but can you  
offer any idea what might be causing this:

Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0x0033d000
Gecode::Actor::unforce () at core.icc:1591
1591          while (this != *f)

The GDB backtrace shows:

#0  Gecode::Actor::unforce () at core.icc:1591
#1  Gecode::Actor::unforce () at core.icc:1591
#2  Gecode::Int::Extensional::Base<Gecode::Int::IntView,  
true>::dispose (this=0x1031038, home=0xf23d20) at gecode/int/ 
extensional.cc:145
#3  0x0058ae7d in Gecode::Actor::unforce () at core.icc:1646
#4  0x0058ae7d in  
Gecode::Int::Extensional::Basic<Gecode::Int::IntView>::propagate  
(this=0x1031038, home=0xf23d20) at gecode/int/extensional.cc:145
#5  0x0026a043 in Gecode::Space::status (this=0xf23d20, pn=@0x27c1b8)  
at gecode/int/extensional.cc:145

It occurs at a point in the code where I have just cloned a space and  
committed a Branching. Calling status() before the commit is fine.  
Calling it again after the commit causes this crash. If I run the same  
code on the original space (not the clone) it works fine.

I know that this is not really enough detail, but if you could give me  
any idea of what kind of problem I might be facing, it could help me  
track down the bug. What is the unforce() function doing at this point?

Malcolm 


From cschulte at kth.se  Wed Feb  4 16:10:32 2009
From: cschulte at kth.se (Christian Schulte)
Date: Wed, 4 Feb 2009 16:10:32 +0100
Subject: [gecode-users] Constraint Hierarchy on Gecode
In-Reply-To: <717099.48900.qm@web111413.mail.gq1.yahoo.com>
References: <717099.48900.qm@web111413.mail.gq1.yahoo.com>
Message-ID: <002e01c986da$b94af660$2be0e320$@se>

I don't think so: DeltaStar (if I remember correctly) requires a special filter function. For Gecode that would mean to re-implement every single constraint. That's infeasible.

 

Did you try the naive one: reify the constraints and maximize the number of satisfied constraints (after all, 30 constraints are not that much).

 

Christian

 

--

Christian Schulte, www.ict.kth.se/~cschulte/

 

From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf Of Jeffrey
Sent: Monday, February 02, 2009 3:50 PM
To: gecode at gecode.org
Subject: [gecode-users] Constraint Hierarchy on Gecode

 

My problem involve 30 something constraints on a finite SetVar.

 

It involve 2 required constraints. All the rest are soft constraints.

 

I need to find a solution that can give me solutions which satisfy the most constraints.

 

So, should I implement the Algorithm myself to solve the Constraint Hierarchy?

 

Is there any examples or reference you would recommended?

 

The most straight one I can think of is the DeltaStar. 

 

  _____  

Yahoo!???????????????????! <http://hk.promo.yahoo.com/security/> ????

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20090204/14fa07c8/attachment.htm>

From cschulte at kth.se  Wed Feb  4 16:15:13 2009
From: cschulte at kth.se (Christian Schulte)
Date: Wed, 4 Feb 2009 16:15:13 +0100
Subject: [gecode-users] Copying spaces
In-Reply-To: <4A2F2695-B150-4C0F-A4C5-45783C9B554B@cse.unsw.edu.au>
References: <D2DE2986-E6EA-4355-A08A-2922DFB6A354@cse.unsw.edu.au>	<000c01c986a0$9a467d50$ced377f0$@se>
	<4A2F2695-B150-4C0F-A4C5-45783C9B554B@cse.unsw.edu.au>
Message-ID: <003c01c986db$60d8a3a0$2289eae0$@se>

That is absolutely bizarre! unforce de-registers a propagator that requires
deletion (many propagators do not have to be deleted if their space are
deleted. some need explicit deletion as they keep external memory for
example).

So, I have no idea, I thought for a while. Do you use anything self-built
(propagator, branching)? Or maybe is your copy function and/or the
constructor called by the copy function wrong (forgot something to update
and just assigned it)? That is most likely.

Christian

--
Christian Schulte, www.ict.kth.se/~cschulte/


-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Malcolm Ryan
Sent: Wednesday, February 04, 2009 10:03 AM
To: gecode list
Subject: Re: [gecode-users] Copying spaces

On 04/02/2009, at 7:14 PM, Christian Schulte wrote:
> Copy() is an internal function (maybe we should make it protected)  
> use by
> the clone() operation. So you have to use clone() to create a clone  
> of a
> space!

Thanks, that sorted out that problem... but left me with another. I  
haven't quite isolated it down to a simple example yet, but can you  
offer any idea what might be causing this:

Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0x0033d000
Gecode::Actor::unforce () at core.icc:1591
1591          while (this != *f)

The GDB backtrace shows:

#0  Gecode::Actor::unforce () at core.icc:1591
#1  Gecode::Actor::unforce () at core.icc:1591
#2  Gecode::Int::Extensional::Base<Gecode::Int::IntView,  
true>::dispose (this=0x1031038, home=0xf23d20) at gecode/int/ 
extensional.cc:145
#3  0x0058ae7d in Gecode::Actor::unforce () at core.icc:1646
#4  0x0058ae7d in  
Gecode::Int::Extensional::Basic<Gecode::Int::IntView>::propagate  
(this=0x1031038, home=0xf23d20) at gecode/int/extensional.cc:145
#5  0x0026a043 in Gecode::Space::status (this=0xf23d20, pn=@0x27c1b8)  
at gecode/int/extensional.cc:145

It occurs at a point in the code where I have just cloned a space and  
committed a Branching. Calling status() before the commit is fine.  
Calling it again after the commit causes this crash. If I run the same  
code on the original space (not the clone) it works fine.

I know that this is not really enough detail, but if you could give me  
any idea of what kind of problem I might be facing, it could help me  
track down the bug. What is the unforce() function doing at this point?

Malcolm 
_______________________________________________
Gecode users mailing list
users at gecode.org
https://www.gecode.org/mailman/listinfo/gecode-users




From cschulte at kth.se  Wed Feb  4 16:18:57 2009
From: cschulte at kth.se (Christian Schulte)
Date: Wed, 4 Feb 2009 16:18:57 +0100
Subject: [gecode-users] Weak points in Gecode
In-Reply-To: <4988B397.4070604@itu.dk>
References: <4988B397.4070604@itu.dk>
Message-ID: <003f01c986db$e6aae8d0$b400ba70$@se>

Hi,

Well, well, I do spare you the details of the obvious answer ;-)

I though a little and have to say that I would have expected linear
arithmetic to be weak, where you really need reasoning about individual
values and not just bounds as Gecode does. But you basically tried that
already with Knapsack. (Also Gecode should suck at binomial). Table
constraints might work depending on the application.

So, honestly, no idea.

Sorry
Christian

--
Christian Schulte, www.ict.kth.se/~cschulte/


-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Morten Boysen
Sent: Tuesday, February 03, 2009 10:14 PM
To: users at gecode.org
Subject: [gecode-users] Weak points in Gecode

Hi,

I have a somewhat odd request: I am looking for problem types that will 
make Gecode perform poorly. First I will explain what we are trying to do:

Me and my thesis partner are writing a thesis about configuration, where 
we are trying to do a hybrid between a configurator based on BDDs and a 
solver. The reason for this is that certain types of constraints will 
make a BDD perform very badly. An example of this is an Alldiff 
constraint, which makes a BDD take up exponentially space. However, 
other types of constraints are very well suited for BDDs and outperform 
any search-based configurator, if the BDD can be build. Therefore, our 
idea is to partition a problem, so the solver handles the Alldiff 
constraint, whereas all other constraints are compiled into a BDD. This 
BDD is then plugged into Gecode using a propagator. What we were hoping 
for was to get the best of both worlds: The efficient Alldiff propagator 
in Gecode, and the full inference of a BDD. However, out hybrid 
configurator is having a hard time beating a purely search based 
configurator, where all constraints are handled directly by Gecode.

What we therefore need, are some type of constraints that are well 
suited for a BDD, but make Gecode behave in a pathological way. We have 
tried knapsack constraints, binomial coefficients and we are now trying 
with table constraints (also known as ad-hoc constraints). In all cases, 
a pure Gecode configurator without a BDD propagator outperforms the 
hybrid using a BDD (which by the way, shows how efficient Gecode is!). 
Do you have any idea of any constraints that will make Gecode perform 
poorly (e.g. by making it very hard for Gecode to do propagation, thus 
resulting in a large search space).

Kind regards
Morten Boysen

_______________________________________________
Gecode users mailing list
users at gecode.org
https://www.gecode.org/mailman/listinfo/gecode-users




From gualandi at elet.polimi.it  Wed Feb  4 17:41:04 2009
From: gualandi at elet.polimi.it (Stefano Gualandi)
Date: Wed, 4 Feb 2009 16:41:04 +0000
Subject: [gecode-users] Weak points in Gecode
In-Reply-To: <4988B397.4070604@itu.dk>
References: <4988B397.4070604@itu.dk>
Message-ID: <BA2D5F4D-4085-490C-92EE-0B2C173FFBD2@elet.polimi.it>

Dear Morten,

I am not an expert of BDDs, but maybe the paper below can help you:

http://www.cs.mu.oz.au/~pjs/papers/hawkins05a.pdf

The paper is about Reduced Ordered Binary Decision Diagrams (ROBDDs).  
Likely, you already know the paper...

It seems ROBDDs are good for constraints defined over set variables,  
as the partition constraints (implemented in Gecode as disjoint/union  
set operation), or the weighted sum constraints.

hope it helps.
Stefano


On Feb 3, 2009, at 9:13 PM, Morten Boysen wrote:

> Hi,
>
> I have a somewhat odd request: I am looking for problem types that  
> will
> make Gecode perform poorly. First I will explain what we are trying  
> to do:
>
> Me and my thesis partner are writing a thesis about configuration,  
> where
> we are trying to do a hybrid between a configurator based on BDDs  
> and a
> solver. The reason for this is that certain types of constraints will
> make a BDD perform very badly. An example of this is an Alldiff
> constraint, which makes a BDD take up exponentially space. However,
> other types of constraints are very well suited for BDDs and  
> outperform
> any search-based configurator, if the BDD can be build. Therefore, our
> idea is to partition a problem, so the solver handles the Alldiff
> constraint, whereas all other constraints are compiled into a BDD.  
> This
> BDD is then plugged into Gecode using a propagator. What we were  
> hoping
> for was to get the best of both worlds: The efficient Alldiff  
> propagator
> in Gecode, and the full inference of a BDD. However, out hybrid
> configurator is having a hard time beating a purely search based
> configurator, where all constraints are handled directly by Gecode.
>
> What we therefore need, are some type of constraints that are well
> suited for a BDD, but make Gecode behave in a pathological way. We  
> have
> tried knapsack constraints, binomial coefficients and we are now  
> trying
> with table constraints (also known as ad-hoc constraints). In all  
> cases,
> a pure Gecode configurator without a BDD propagator outperforms the
> hybrid using a BDD (which by the way, shows how efficient Gecode is!).
> Do you have any idea of any constraints that will make Gecode perform
> poorly (e.g. by making it very hard for Gecode to do propagation, thus
> resulting in a large search space).
>
> Kind regards
> Morten Boysen
>
> _______________________________________________
> Gecode users mailing list
> users at gecode.org
> https://www.gecode.org/mailman/listinfo/gecode-users




From cschulte at kth.se  Wed Feb  4 17:08:26 2009
From: cschulte at kth.se (Christian Schulte)
Date: Wed, 4 Feb 2009 17:08:26 +0100
Subject: [gecode-users] Weak points in Gecode
In-Reply-To: <BA2D5F4D-4085-490C-92EE-0B2C173FFBD2@elet.polimi.it>
References: <4988B397.4070604@itu.dk>
	<BA2D5F4D-4085-490C-92EE-0B2C173FFBD2@elet.polimi.it>
Message-ID: <004501c986e2$d017a070$7046e150$@se>

Well, that might be considered cheating: Gecode features complete set
variables (CpltSetVar as opposed to SetVar) that actually implement the idea
from the paper Stefano mentions.

Christian

--
Christian Schulte, www.ict.kth.se/~cschulte/


-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Stefano Gualandi
Sent: Wednesday, February 04, 2009 5:41 PM
To: Morten Boysen; users at gecode.org
Subject: Re: [gecode-users] Weak points in Gecode

Dear Morten,

I am not an expert of BDDs, but maybe the paper below can help you:

http://www.cs.mu.oz.au/~pjs/papers/hawkins05a.pdf

The paper is about Reduced Ordered Binary Decision Diagrams (ROBDDs).  
Likely, you already know the paper...

It seems ROBDDs are good for constraints defined over set variables,  
as the partition constraints (implemented in Gecode as disjoint/union  
set operation), or the weighted sum constraints.

hope it helps.
Stefano


On Feb 3, 2009, at 9:13 PM, Morten Boysen wrote:

> Hi,
>
> I have a somewhat odd request: I am looking for problem types that  
> will
> make Gecode perform poorly. First I will explain what we are trying  
> to do:
>
> Me and my thesis partner are writing a thesis about configuration,  
> where
> we are trying to do a hybrid between a configurator based on BDDs  
> and a
> solver. The reason for this is that certain types of constraints will
> make a BDD perform very badly. An example of this is an Alldiff
> constraint, which makes a BDD take up exponentially space. However,
> other types of constraints are very well suited for BDDs and  
> outperform
> any search-based configurator, if the BDD can be build. Therefore, our
> idea is to partition a problem, so the solver handles the Alldiff
> constraint, whereas all other constraints are compiled into a BDD.  
> This
> BDD is then plugged into Gecode using a propagator. What we were  
> hoping
> for was to get the best of both worlds: The efficient Alldiff  
> propagator
> in Gecode, and the full inference of a BDD. However, out hybrid
> configurator is having a hard time beating a purely search based
> configurator, where all constraints are handled directly by Gecode.
>
> What we therefore need, are some type of constraints that are well
> suited for a BDD, but make Gecode behave in a pathological way. We  
> have
> tried knapsack constraints, binomial coefficients and we are now  
> trying
> with table constraints (also known as ad-hoc constraints). In all  
> cases,
> a pure Gecode configurator without a BDD propagator outperforms the
> hybrid using a BDD (which by the way, shows how efficient Gecode is!).
> Do you have any idea of any constraints that will make Gecode perform
> poorly (e.g. by making it very hard for Gecode to do propagation, thus
> resulting in a large search space).
>
> Kind regards
> Morten Boysen
>
> _______________________________________________
> Gecode users mailing list
> users at gecode.org
> https://www.gecode.org/mailman/listinfo/gecode-users


_______________________________________________
Gecode users mailing list
users at gecode.org
https://www.gecode.org/mailman/listinfo/gecode-users




From boysen at itu.dk  Wed Feb  4 20:02:39 2009
From: boysen at itu.dk (Morten Boysen)
Date: Wed, 04 Feb 2009 20:02:39 +0100
Subject: [gecode-users] Weak points in Gecode
In-Reply-To: <004501c986e2$d017a070$7046e150$@se>
References: <4988B397.4070604@itu.dk>
	<BA2D5F4D-4085-490C-92EE-0B2C173FFBD2@elet.polimi.it>
	<004501c986e2$d017a070$7046e150$@se>
Message-ID: <4989E64F.2040908@itu.dk>

Hi,

Another problem is that our models only include boolean and integer 
variables, so the set variables will unfortunately not work.

Do you have any other suggestions? For example, how does Gecode perform 
with a very large amount of binary constraints? Can Gecode be 
overwhelmed by the shear amount of propagators?

Kind regars
Morten Boysen

Christian Schulte skrev:
> Well, that might be considered cheating: Gecode features complete set
> variables (CpltSetVar as opposed to SetVar) that actually implement the idea
> from the paper Stefano mentions.
> 
> Christian
> 
> --
> Christian Schulte, www.ict.kth.se/~cschulte/
> 
> 
> -----Original Message-----
> From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
> Of Stefano Gualandi
> Sent: Wednesday, February 04, 2009 5:41 PM
> To: Morten Boysen; users at gecode.org
> Subject: Re: [gecode-users] Weak points in Gecode
> 
> Dear Morten,
> 
> I am not an expert of BDDs, but maybe the paper below can help you:
> 
> http://www.cs.mu.oz.au/~pjs/papers/hawkins05a.pdf
> 
> The paper is about Reduced Ordered Binary Decision Diagrams (ROBDDs).  
> Likely, you already know the paper...
> 
> It seems ROBDDs are good for constraints defined over set variables,  
> as the partition constraints (implemented in Gecode as disjoint/union  
> set operation), or the weighted sum constraints.
> 
> hope it helps.
> Stefano
> 
> 
> On Feb 3, 2009, at 9:13 PM, Morten Boysen wrote:
> 
>> Hi,
>>
>> I have a somewhat odd request: I am looking for problem types that  
>> will
>> make Gecode perform poorly. First I will explain what we are trying  
>> to do:
>>
>> Me and my thesis partner are writing a thesis about configuration,  
>> where
>> we are trying to do a hybrid between a configurator based on BDDs  
>> and a
>> solver. The reason for this is that certain types of constraints will
>> make a BDD perform very badly. An example of this is an Alldiff
>> constraint, which makes a BDD take up exponentially space. However,
>> other types of constraints are very well suited for BDDs and  
>> outperform
>> any search-based configurator, if the BDD can be build. Therefore, our
>> idea is to partition a problem, so the solver handles the Alldiff
>> constraint, whereas all other constraints are compiled into a BDD.  
>> This
>> BDD is then plugged into Gecode using a propagator. What we were  
>> hoping
>> for was to get the best of both worlds: The efficient Alldiff  
>> propagator
>> in Gecode, and the full inference of a BDD. However, out hybrid
>> configurator is having a hard time beating a purely search based
>> configurator, where all constraints are handled directly by Gecode.
>>
>> What we therefore need, are some type of constraints that are well
>> suited for a BDD, but make Gecode behave in a pathological way. We  
>> have
>> tried knapsack constraints, binomial coefficients and we are now  
>> trying
>> with table constraints (also known as ad-hoc constraints). In all  
>> cases,
>> a pure Gecode configurator without a BDD propagator outperforms the
>> hybrid using a BDD (which by the way, shows how efficient Gecode is!).
>> Do you have any idea of any constraints that will make Gecode perform
>> poorly (e.g. by making it very hard for Gecode to do propagation, thus
>> resulting in a large search space).
>>
>> Kind regards
>> Morten Boysen
>>
>> _______________________________________________
>> Gecode users mailing list
>> users at gecode.org
>> https://www.gecode.org/mailman/listinfo/gecode-users
> 
> 
> _______________________________________________
> Gecode users mailing list
> users at gecode.org
> https://www.gecode.org/mailman/listinfo/gecode-users
> 




From cschulte at kth.se  Wed Feb  4 20:29:18 2009
From: cschulte at kth.se (Christian Schulte)
Date: Wed, 4 Feb 2009 20:29:18 +0100
Subject: [gecode-users] Weak points in Gecode
In-Reply-To: <4989E64F.2040908@itu.dk>
References: <4988B397.4070604@itu.dk>
	<BA2D5F4D-4085-490C-92EE-0B2C173FFBD2@elet.polimi.it>
	<004501c986e2$d017a070$7046e150$@se> <4989E64F.2040908@itu.dk>
Message-ID: <000001c986fe$e0548360$a0fd8a20$@se>

Nope, you will have to throw a really large number at it. To bring it down,
definitely more than 100 000, better more than a million (we regularly run
stupid benchmarks for scalability, so that's not even guessing). Also,
recomputation gives Gecode quite an edge here.

What might work are lots of small constraints that take some memory. As it
comes to binary constraints the one that uses more memory than others is the
element constraint with large arrays. But, there the BDD will explode
because you need large domains for that to be meaningful. Maybe mid-size
domains and lots of element constraints could be something.

Christian

--
Christian Schulte, www.it.kth.se/~cschulte/

-----Original Message-----
From: Morten Boysen [mailto:boysen at itu.dk] 
Sent: Wednesday, February 04, 2009 8:03 PM
To: Christian Schulte
Cc: 'Stefano Gualandi'; users at gecode.org
Subject: Re: [gecode-users] Weak points in Gecode

Hi,

Another problem is that our models only include boolean and integer 
variables, so the set variables will unfortunately not work.

Do you have any other suggestions? For example, how does Gecode perform 
with a very large amount of binary constraints? Can Gecode be 
overwhelmed by the shear amount of propagators?

Kind regars
Morten Boysen

Christian Schulte skrev:
> Well, that might be considered cheating: Gecode features complete set
> variables (CpltSetVar as opposed to SetVar) that actually implement the
idea
> from the paper Stefano mentions.
> 
> Christian
> 
> --
> Christian Schulte, www.ict.kth.se/~cschulte/
> 
> 
> -----Original Message-----
> From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
> Of Stefano Gualandi
> Sent: Wednesday, February 04, 2009 5:41 PM
> To: Morten Boysen; users at gecode.org
> Subject: Re: [gecode-users] Weak points in Gecode
> 
> Dear Morten,
> 
> I am not an expert of BDDs, but maybe the paper below can help you:
> 
> http://www.cs.mu.oz.au/~pjs/papers/hawkins05a.pdf
> 
> The paper is about Reduced Ordered Binary Decision Diagrams (ROBDDs).  
> Likely, you already know the paper...
> 
> It seems ROBDDs are good for constraints defined over set variables,  
> as the partition constraints (implemented in Gecode as disjoint/union  
> set operation), or the weighted sum constraints.
> 
> hope it helps.
> Stefano
> 
> 
> On Feb 3, 2009, at 9:13 PM, Morten Boysen wrote:
> 
>> Hi,
>>
>> I have a somewhat odd request: I am looking for problem types that  
>> will
>> make Gecode perform poorly. First I will explain what we are trying  
>> to do:
>>
>> Me and my thesis partner are writing a thesis about configuration,  
>> where
>> we are trying to do a hybrid between a configurator based on BDDs  
>> and a
>> solver. The reason for this is that certain types of constraints will
>> make a BDD perform very badly. An example of this is an Alldiff
>> constraint, which makes a BDD take up exponentially space. However,
>> other types of constraints are very well suited for BDDs and  
>> outperform
>> any search-based configurator, if the BDD can be build. Therefore, our
>> idea is to partition a problem, so the solver handles the Alldiff
>> constraint, whereas all other constraints are compiled into a BDD.  
>> This
>> BDD is then plugged into Gecode using a propagator. What we were  
>> hoping
>> for was to get the best of both worlds: The efficient Alldiff  
>> propagator
>> in Gecode, and the full inference of a BDD. However, out hybrid
>> configurator is having a hard time beating a purely search based
>> configurator, where all constraints are handled directly by Gecode.
>>
>> What we therefore need, are some type of constraints that are well
>> suited for a BDD, but make Gecode behave in a pathological way. We  
>> have
>> tried knapsack constraints, binomial coefficients and we are now  
>> trying
>> with table constraints (also known as ad-hoc constraints). In all  
>> cases,
>> a pure Gecode configurator without a BDD propagator outperforms the
>> hybrid using a BDD (which by the way, shows how efficient Gecode is!).
>> Do you have any idea of any constraints that will make Gecode perform
>> poorly (e.g. by making it very hard for Gecode to do propagation, thus
>> resulting in a large search space).
>>
>> Kind regards
>> Morten Boysen
>>
>> _______________________________________________
>> Gecode users mailing list
>> users at gecode.org
>> https://www.gecode.org/mailman/listinfo/gecode-users
> 
> 
> _______________________________________________
> Gecode users mailing list
> users at gecode.org
> https://www.gecode.org/mailman/listinfo/gecode-users
> 





From malcolmr at cse.unsw.edu.au  Thu Feb  5 07:25:31 2009
From: malcolmr at cse.unsw.edu.au (Malcolm Ryan)
Date: Thu, 5 Feb 2009 17:25:31 +1100
Subject: [gecode-users] Copying spaces
In-Reply-To: <003c01c986db$60d8a3a0$2289eae0$@se>
References: <D2DE2986-E6EA-4355-A08A-2922DFB6A354@cse.unsw.edu.au>	<000c01c986a0$9a467d50$ced377f0$@se>
	<4A2F2695-B150-4C0F-A4C5-45783C9B554B@cse.unsw.edu.au>
	<003c01c986db$60d8a3a0$2289eae0$@se>
Message-ID: <8C446E3F-7B7E-4859-9D16-D6DF2A4B384F@cse.unsw.edu.au>

Ah, I was using a custom Branching which I created in the original  
space but then applied to the copy. Is there a way to clone the  
Branching alongside the space?

Malcolm

On 05/02/2009, at 2:15 AM, Christian Schulte wrote:

> That is absolutely bizarre! unforce de-registers a propagator that  
> requires
> deletion (many propagators do not have to be deleted if their space  
> are
> deleted. some need explicit deletion as they keep external memory for
> example).
>
> So, I have no idea, I thought for a while. Do you use anything self- 
> built
> (propagator, branching)? Or maybe is your copy function and/or the
> constructor called by the copy function wrong (forgot something to  
> update
> and just assigned it)? That is most likely.
>
> Christian
>
> --
> Christian Schulte, www.ict.kth.se/~cschulte/
>
>
> -----Original Message-----
> From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On  
> Behalf
> Of Malcolm Ryan
> Sent: Wednesday, February 04, 2009 10:03 AM
> To: gecode list
> Subject: Re: [gecode-users] Copying spaces
>
> On 04/02/2009, at 7:14 PM, Christian Schulte wrote:
>> Copy() is an internal function (maybe we should make it protected)
>> use by
>> the clone() operation. So you have to use clone() to create a clone
>> of a
>> space!
>
> Thanks, that sorted out that problem... but left me with another. I
> haven't quite isolated it down to a simple example yet, but can you
> offer any idea what might be causing this:
>
> Program received signal EXC_BAD_ACCESS, Could not access memory.
> Reason: KERN_INVALID_ADDRESS at address: 0x0033d000
> Gecode::Actor::unforce () at core.icc:1591
> 1591          while (this != *f)
>
> The GDB backtrace shows:
>
> #0  Gecode::Actor::unforce () at core.icc:1591
> #1  Gecode::Actor::unforce () at core.icc:1591
> #2  Gecode::Int::Extensional::Base<Gecode::Int::IntView,
> true>::dispose (this=0x1031038, home=0xf23d20) at gecode/int/
> extensional.cc:145
> #3  0x0058ae7d in Gecode::Actor::unforce () at core.icc:1646
> #4  0x0058ae7d in
> Gecode::Int::Extensional::Basic<Gecode::Int::IntView>::propagate
> (this=0x1031038, home=0xf23d20) at gecode/int/extensional.cc:145
> #5  0x0026a043 in Gecode::Space::status (this=0xf23d20, pn=@0x27c1b8)
> at gecode/int/extensional.cc:145
>
> It occurs at a point in the code where I have just cloned a space and
> committed a Branching. Calling status() before the commit is fine.
> Calling it again after the commit causes this crash. If I run the same
> code on the original space (not the clone) it works fine.
>
> I know that this is not really enough detail, but if you could give me
> any idea of what kind of problem I might be facing, it could help me
> track down the bug. What is the unforce() function doing at this  
> point?
>
> Malcolm
> _______________________________________________
> Gecode users mailing list
> users at gecode.org
> https://www.gecode.org/mailman/listinfo/gecode-users




From malcolmr at cse.unsw.edu.au  Thu Feb  5 07:30:30 2009
From: malcolmr at cse.unsw.edu.au (Malcolm Ryan)
Date: Thu, 5 Feb 2009 17:30:30 +1100
Subject: [gecode-users] Copying spaces
In-Reply-To: <8C446E3F-7B7E-4859-9D16-D6DF2A4B384F@cse.unsw.edu.au>
References: <D2DE2986-E6EA-4355-A08A-2922DFB6A354@cse.unsw.edu.au>	<000c01c986a0$9a467d50$ced377f0$@se>
	<4A2F2695-B150-4C0F-A4C5-45783C9B554B@cse.unsw.edu.au>
	<003c01c986db$60d8a3a0$2289eae0$@se>
	<8C446E3F-7B7E-4859-9D16-D6DF2A4B384F@cse.unsw.edu.au>
Message-ID: <C300966E-4759-44C3-AAAE-CBB371238964@cse.unsw.edu.au>

Aha! I see now what I was doing wrong. I was calling description() and  
commit() on the Branching when I should have been calling them on the  
Space. All fixed. Thanks for your help.

Malcolm

On 05/02/2009, at 5:25 PM, Malcolm Ryan wrote:

> Ah, I was using a custom Branching which I created in the original
> space but then applied to the copy. Is there a way to clone the
> Branching alongside the space?
>
> Malcolm
>
> On 05/02/2009, at 2:15 AM, Christian Schulte wrote:
>
>> That is absolutely bizarre! unforce de-registers a propagator that
>> requires
>> deletion (many propagators do not have to be deleted if their space
>> are
>> deleted. some need explicit deletion as they keep external memory for
>> example).
>>
>> So, I have no idea, I thought for a while. Do you use anything self-
>> built
>> (propagator, branching)? Or maybe is your copy function and/or the
>> constructor called by the copy function wrong (forgot something to
>> update
>> and just assigned it)? That is most likely.
>>
>> Christian
>>
>> --
>> Christian Schulte, www.ict.kth.se/~cschulte/
>>
>>
>> -----Original Message-----
>> From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On
>> Behalf
>> Of Malcolm Ryan
>> Sent: Wednesday, February 04, 2009 10:03 AM
>> To: gecode list
>> Subject: Re: [gecode-users] Copying spaces
>>
>> On 04/02/2009, at 7:14 PM, Christian Schulte wrote:
>>> Copy() is an internal function (maybe we should make it protected)
>>> use by
>>> the clone() operation. So you have to use clone() to create a clone
>>> of a
>>> space!
>>
>> Thanks, that sorted out that problem... but left me with another. I
>> haven't quite isolated it down to a simple example yet, but can you
>> offer any idea what might be causing this:
>>
>> Program received signal EXC_BAD_ACCESS, Could not access memory.
>> Reason: KERN_INVALID_ADDRESS at address: 0x0033d000
>> Gecode::Actor::unforce () at core.icc:1591
>> 1591          while (this != *f)
>>
>> The GDB backtrace shows:
>>
>> #0  Gecode::Actor::unforce () at core.icc:1591
>> #1  Gecode::Actor::unforce () at core.icc:1591
>> #2  Gecode::Int::Extensional::Base<Gecode::Int::IntView,
>> true>::dispose (this=0x1031038, home=0xf23d20) at gecode/int/
>> extensional.cc:145
>> #3  0x0058ae7d in Gecode::Actor::unforce () at core.icc:1646
>> #4  0x0058ae7d in
>> Gecode::Int::Extensional::Basic<Gecode::Int::IntView>::propagate
>> (this=0x1031038, home=0xf23d20) at gecode/int/extensional.cc:145
>> #5  0x0026a043 in Gecode::Space::status (this=0xf23d20, pn=@0x27c1b8)
>> at gecode/int/extensional.cc:145
>>
>> It occurs at a point in the code where I have just cloned a space and
>> committed a Branching. Calling status() before the commit is fine.
>> Calling it again after the commit causes this crash. If I run the  
>> same
>> code on the original space (not the clone) it works fine.
>>
>> I know that this is not really enough detail, but if you could give  
>> me
>> any idea of what kind of problem I might be facing, it could help me
>> track down the bug. What is the unforce() function doing at this
>> point?
>>
>> Malcolm
>> _______________________________________________
>> Gecode users mailing list
>> users at gecode.org
>> https://www.gecode.org/mailman/listinfo/gecode-users
>
>
> _______________________________________________
> Gecode users mailing list
> users at gecode.org
> https://www.gecode.org/mailman/listinfo/gecode-users




From filip.konvicka at logis.cz  Thu Feb  5 10:19:21 2009
From: filip.konvicka at logis.cz (=?UTF-8?B?RmlsaXAgS29udmnEjWth?=)
Date: Thu, 05 Feb 2009 10:19:21 +0100
Subject: [gecode-users] Reporting memory usage
In-Reply-To: <4909D5AB.7070101@logis.cz>
References: <e7b0e5a40810280946v6bc84068i85fcee537d02d126@mail.gmail.com>	<004801c93921$653e8570$2fbb9050$@se>	<e7b0e5a40810290119h5566c2e5rd812de02e1054d6a@mail.gmail.com>	<000f01c93a7e$e1c898c0$a559ca40$@se>	<gec60p$1tr$1@ger.gmane.org>	<e7b0e5a40810300639m1d6df9a9w9bf355bc4a94d78c@mail.gmail.com>	<006901c93a9f$ccbd5120$6637f360$@se>
	<4909D5AB.7070101@logis.cz>
Message-ID: <498AAF19.3030300@logis.cz>

Hi all!

So I'm trying to resurrect this old thread. Shame on me for being so 
late with this.

I've put ideas from several allocators together (including St?phane's, 
Boost's and other :-)) and the result is in the attachment. There are 
two allocators: Gecode::space_allocator and Gecode::region_allocator. 
These are in fact identical, so we could perhaps make just one template, 
but that would require template templates and I'm not sure how would 
that affect portability. See space_allocator.hpp and region_allocator.hpp.

The allocators can be used with all STL classes, which is demonstrated 
in the example (GecodeAllocTest.cpp). Taking std::set as an example, 
there are two possibilities of how to use the allocators. One is to use 
the allocator just for the nodes, knowing that the destructors of the 
items in the set will be called properly. The other possibility is to 
use the allocator for both the set object and its nodes. This does not 
call the destructor of the set nor the destructors of the items, and 
therefore can improve performance greatly.

To enable the latter, I've added some helper functions as extensions of 
Gecode::Space and Gecode::Region (see extensions.hpp). These could make 
use of variadic templates (or at least Boost Preprocessor), but again, 
that would sacrifice some portability.

My feeling is that this might help with using the STL and Boost data 
structures within the user scripts. It seems a bit clumsy, but just 
during construction/copying. And everyone can make their macros and 
stuff to save some typing if they wish. The only thing that scares me is 
bad usage (e.g. copying a structure along with the foreign allocator 
during cloning), so I think if this is released with Gecode it must 
include some tutorial on how to use it. (One thing that is still missing 
in the code is doxygen documentation.)

BTW, I hereby release all the code under the Gecode license.

All the best,
Filip
-------------- next part --------------
A non-text attachment was scrubbed...
Name: GecodeAllocTest.7z
Type: application/octet-stream
Size: 15006 bytes
Desc: not available
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20090205/e0bc9bf0/attachment.obj>

From mauriciotorob at gmail.com  Fri Feb  6 17:36:03 2009
From: mauriciotorob at gmail.com (Mauricio Toro)
Date: Fri, 6 Feb 2009 11:36:03 -0500
Subject: [gecode-users] Problem using Gecode on Mac OS X PCC
Message-ID: <a6b4b44a0902060836j4ba11506nc203299ad89a9012@mail.gmail.com>

Hello all,
I installed Gecode 2.2.0 universal binary framework
on a Mac PPC with Mac Os 10.4.11 and gcc 4.0.
When I try to compile my software, I get the following error:

/usr/bin/ld: /Library/Frameworks/gecode.framework/gecode load command 4
unknown cmd field

I executed this command:

g++    -fvisibility=hidden -fPIC -Wextra -Wall -pipe  -fno-strict-aliasing
-finline-limit=3000  -o examples/facto examples/facto.cpp -I. -framework
gecode  -ffast-math -O3

Any clues,

Thanks

Mauricio

-- 
Mauricio Toro Bermudez
Estudiante de Ingenier?a de Sistemas
Pontificia Universidad Javeriana, Colombia
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20090206/205b74c6/attachment.htm>

From tack at ps.uni-sb.de  Sat Feb  7 06:49:43 2009
From: tack at ps.uni-sb.de (Guido Tack)
Date: Sat, 7 Feb 2009 16:49:43 +1100
Subject: [gecode-users] Problem using Gecode on Mac OS X PCC
In-Reply-To: <a6b4b44a0902060836j4ba11506nc203299ad89a9012@mail.gmail.com>
References: <a6b4b44a0902060836j4ba11506nc203299ad89a9012@mail.gmail.com>
Message-ID: <E75282E2-BC5A-4463-A163-23D2CE373384@ps.uni-sb.de>

Mauricio Toro wrote:
> I installed Gecode 2.2.0 universal binary framework
> on a Mac PPC with Mac Os 10.4.11 and gcc 4.0.
> When I try to compile my software, I get the following error:
>
> /usr/bin/ld: /Library/Frameworks/gecode.framework/gecode load  
> command 4 unknown cmd field

A quick search on google returned
http://code.google.com/p/macfuse/issues/detail?id=382

If you're also using an old version of XCode, please upgrade to the  
latest version that's available for 10.4.  If that doesn't solve the  
problem, I have no idea, sorry.

Cheers,
	Guido




From Vincent.Barichard at univ-angers.fr  Mon Feb  9 14:10:57 2009
From: Vincent.Barichard at univ-angers.fr (Vincent Barichard)
Date: Mon, 9 Feb 2009 14:10:57 +0100
Subject: [gecode-users] Question about branching
Message-ID: <200902091410.57732.Vincent.Barichard@univ-angers.fr>

Hi,

I try to make a new search engine. In the member function "explore(void)" of 
my engine I need to access to the "ViewArray x" of the current branching of 
the space.
I have two problems :
- First, how to get the current branching of a space? With reflexion I can only 
get a SpecActor on a branching, but not the branching object itself.
The only way I found was to make some fields of the "Space" class being public.
Furthermore I have no clue about the base class of the actor, so I must assume 
that all branchings are instances of the "ViewValBranching" class.
- How to get the "ViewArray x" of a ViewValBranching ? As for previous point, 
I have to make the field being public.

I have another question. I looked at the SVN trunk and I saw that reflexion has 
been removed and won't be present in Gecode 3.0. Is there a way to get (print) 
actors of a space? It is very usefull for debugging code and seing what 
happened.

Thank you very much for your help.

Cheers,
Vincent



From gualandi at elet.polimi.it  Tue Feb 10 12:35:31 2009
From: gualandi at elet.polimi.it (Stefano Gualandi)
Date: Tue, 10 Feb 2009 11:35:31 +0000
Subject: [gecode-users] Minor bug in the independent-set example
Message-ID: <B48A1204-C730-4A40-9A62-1F8BEF04DD7E@elet.polimi.it>

Hi,
there is a small bug in "examples/ind-set.cpp".

You can find attached a possible bug-fix,
cheers,
Stefano

-------------- next part --------------
A non-text attachment was scrubbed...
Name: ind-set.patch
Type: application/octet-stream
Size: 699 bytes
Desc: not available
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20090210/13fa1669/attachment.obj>
-------------- next part --------------






From cschulte at kth.se  Tue Feb 10 14:01:46 2009
From: cschulte at kth.se (Christian Schulte)
Date: Tue, 10 Feb 2009 14:01:46 +0100
Subject: [gecode-users] Minor bug in the independent-set example
In-Reply-To: <B48A1204-C730-4A40-9A62-1F8BEF04DD7E@elet.polimi.it>
References: <B48A1204-C730-4A40-9A62-1F8BEF04DD7E@elet.polimi.it>
Message-ID: <000c01c98b7f$bb084a80$3118df80$@se>

Stefano,

thanks a lot. Fixed for 3.0. Christian

--
Christian Schulte, www.ict.kth.se/~cschulte/


-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Stefano Gualandi
Sent: Tuesday, February 10, 2009 12:36 PM
To: users at gecode.org
Subject: [gecode-users] Minor bug in the independent-set example

Hi,
there is a small bug in "examples/ind-set.cpp".

You can find attached a possible bug-fix, cheers, Stefano





From cschulte at kth.se  Tue Feb 10 14:52:37 2009
From: cschulte at kth.se (Christian Schulte)
Date: Tue, 10 Feb 2009 14:52:37 +0100
Subject: [gecode-users] Question about branching
In-Reply-To: <200902091410.57732.Vincent.Barichard@univ-angers.fr>
References: <200902091410.57732.Vincent.Barichard@univ-angers.fr>
Message-ID: <001201c98b86$d81e9050$885bb0f0$@se>

Hi,

no there is no way to find the x, in particular as some branchings might not
have an array of variables.

There is not even the notion of a current branching (there are two current
branchings: one that is used for status() and the other that is used for
commit() during recomputation).

Branchings are designed to just implement a particular interface that's it.

Maybe you tell us what you want to do?

Then, reflection will be gone (see my next mail as to why) and there is
currently no way to get the actors (unless you iterate over the list of
actors, check how the function propagators() counting the number of
propagators is implemented).

Christian

--
Christian Schulte, www.ict.kth.se/~cschulte/


-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Vincent Barichard
Sent: Monday, February 09, 2009 2:11 PM
To: users at gecode.org
Subject: [gecode-users] Question about branching

Hi,

I try to make a new search engine. In the member function "explore(void)" of

my engine I need to access to the "ViewArray x" of the current branching of 
the space.
I have two problems :
- First, how to get the current branching of a space? With reflexion I can
only 
get a SpecActor on a branching, but not the branching object itself.
The only way I found was to make some fields of the "Space" class being
public.
Furthermore I have no clue about the base class of the actor, so I must
assume 
that all branchings are instances of the "ViewValBranching" class.
- How to get the "ViewArray x" of a ViewValBranching ? As for previous
point, 
I have to make the field being public.

I have another question. I looked at the SVN trunk and I saw that reflexion
has 
been removed and won't be present in Gecode 3.0. Is there a way to get
(print) 
actors of a space? It is very usefull for debugging code and seing what 
happened.

Thank you very much for your help.

Cheers,
Vincent

_______________________________________________
Gecode users mailing list
users at gecode.org
https://www.gecode.org/mailman/listinfo/gecode-users




From cschulte at kth.se  Tue Feb 10 16:06:37 2009
From: cschulte at kth.se (Christian Schulte)
Date: Tue, 10 Feb 2009 16:06:37 +0100
Subject: [gecode-users] Gecode 3.0.0 again
Message-ID: <001f01c98b91$335bc1e0$9a1345a0$@se>

Dear all,

what has become obvious is that our initial plans for 3.0 had been
ludicrously optimistic. Now, we see much clearer (two of the three main
Gecode people actually got a degree within the last three months).

We have to settle for much less in 3.0 than has been planned. What will be
in:
 - a 50+ page document on modeling with Gecode
 - a complete rework of branching, including randomization and support for
tie-breaking
 - abstractions for cost-based optimization (just define a cost function)
 - the first stable version of Gist as an interactive search tool
 - lots of cleanups (even major) to make Gecode easier to explain
 - crucial abstractions optimized for 64 bit rather than for 32 bit instead
 - new and more efficient memory management
 - reflection API removed (*)
 - non monotonic propagators supported
 - and fixes as always

What will come later (we plan to release more often again in the future as
releasing has become much easier since Gecode/J is not any longer supported
and we do not have to do Java magic any longer) is:
 - integration of parallel search
 - integration of float vars
 - integration of a MDD-based extensional propagator
 - scheduling (edge-finder for disjunctive problems first)

We hope to get it out until beginning of March and will have it out at
latest March 15th.

Cheers
Christian

(*) We decided to remove reflection support as it did not do what we needed,
was to complicated, and had no real killer application. That's not good
enough for something that comprises 10% of the entire code base. Some parts
that are useful for interfacing, etc will be resurrected in simplified form
later. 

--
Christian Schulte, www.ict.kth.se/~cschulte/






From Vincent.Barichard at univ-angers.fr  Tue Feb 10 22:02:51 2009
From: Vincent.Barichard at univ-angers.fr (Vincent Barichard)
Date: Tue, 10 Feb 2009 22:02:51 +0100
Subject: [gecode-users] Question about branching
In-Reply-To: <001201c98b86$d81e9050$885bb0f0$@se>
References: <200902091410.57732.Vincent.Barichard@univ-angers.fr>
	<001201c98b86$d81e9050$885bb0f0$@se>
Message-ID: <200902102202.51782.Vincent.Barichard@univ-angers.fr>

Hi,

Le mardi 10 f?vrier 2009 14:52:37 Christian Schulte, vous avez ?crit :
> Hi,
>
> no there is no way to find the x, in particular as some branchings might
> not have an array of variables.

I wasn't sure but I suspected it.

>
> There is not even the notion of a current branching (there are two current
> branchings: one that is used for status() and the other that is used for
> commit() during recomputation).
>
> Branchings are designed to just implement a particular interface that's it.
>

It is not completely clear for me. I will look more further in the code.

> Maybe you tell us what you want to do?

I have created a new variable type and I want to do backjumping on the search 
tree. So I need to access to the variable of the BranchingDesc to know if I 
must to skip the BranchingDesc or not. After reading your mail, I decided to 
create sub-class of ViewValBranching and PosValDesc to get the information I 
need. Here comes a piece of the code I wrote in my search engine:

              const BranchingDesc * bd;
              int noAlt;
              int noClosedDesc;
              QBool::QBoolQuant quant;
              do
              {
                bd = rcs.nextDesc< QBool::QBoolPosValDesc<2> 
>(*this,noAlt,noClosedDesc);
                if (bd == NULL) return NULL;
                quant = static_cast<const QBool::QBoolPosValDesc<2>*>(bd)-
>quantifier();
              } while (quant != QBool::QBoolVarImp::EXISTS);

              delete cur;
              cur = rcs.recompute<false>(d,*this);
              EngineCtrl::current(cur);

Sometimes, the line:
"              } while (quant != QBool::QBoolVarImp::EXISTS);"
changes, so I have to dynamically ask the variable of the BranchingDesc what 
is its quantifier.

The problem here is that I have to assume that it is a 
QBool::QBoolPosValDesc<2> BranchingDesc and to cast it.
I would like to test if it is a QBool::QBoolPosValDesc<2> and if it is the 
case, to test its quantifier.

> Then, reflection will be gone (see my next mail as to why) and there is
> currently no way to get the actors (unless you iterate over the list of
> actors, check how the function propagators() counting the number of
> propagators is implemented).

I looked at propagators(), but It needs "pc" being public or protected in 
order to use it in our subclass of Space.

Another thing, I am not sure it's a small bug or not, but I found that the 
"co" field of SpeedLinBoolInt is not initialized during cloning. As a result, 
the update function of Council<A> may not ends. I attached a patch in the 
mail.

Thank you for your help.
Cheers,
Vincent
-------------- next part --------------
A non-text attachment was scrubbed...
Name: gecode.patch
Type: text/x-patch
Size: 874 bytes
Desc: not available
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20090210/dbcda669/attachment.bin>

From malcolmr at cse.unsw.edu.au  Wed Feb 11 03:15:35 2009
From: malcolmr at cse.unsw.edu.au (Malcolm Ryan)
Date: Wed, 11 Feb 2009 13:15:35 +1100
Subject: [gecode-users] Decomposition during search
Message-ID: <633A5B87-F16E-4D7C-9124-8A439BAFB61D@cse.unsw.edu.au>

Did the experimental Decomposition during search code make it into the  
2.2.0 release of Gecode? I would like to take advantage of it on my  
current constraint problem. If it is there, is there any description  
of how it works?

Would it work with a custom Branching? I'd like to still be able to  
control the order variables in each sub-problem are assigned and the  
values they are given.

Is there any simple way to measure the 'decomposability' of my  
problem? I have an intuition that my problem will split into many  
small independent sub-problems as search proceeds, but it is too large  
and complex to check this by hand.

Malcolm





From tack at ps.uni-sb.de  Wed Feb 11 03:56:41 2009
From: tack at ps.uni-sb.de (Guido Tack)
Date: Wed, 11 Feb 2009 13:56:41 +1100
Subject: [gecode-users] Decomposition during search
In-Reply-To: <633A5B87-F16E-4D7C-9124-8A439BAFB61D@cse.unsw.edu.au>
References: <633A5B87-F16E-4D7C-9124-8A439BAFB61D@cse.unsw.edu.au>
Message-ID: <C3B5648D-BB7B-4747-922A-5AF2FA180EE7@ps.uni-sb.de>

Malcolm Ryan wrote:

> Did the experimental Decomposition during search code make it into the
> 2.2.0 release of Gecode? I would like to take advantage of it on my
> current constraint problem. If it is there, is there any description
> of how it works?

Sorry, DDS was planned to be included in 3.0, but it won't make it, as  
the implementation relied on reflection, which won't be in 3.0.  The  
problem is that the decomposition analysis has to look at the  
constraint graph, and so far reflection was the only way to implement  
that (and not a very efficient way after all).

We have several other analyses that we hope to integrate in a future  
version of Gecode, but we first have to come up with a simple and  
efficient interface to the constraint graph.

> Would it work with a custom Branching? I'd like to still be able to
> control the order variables in each sub-problem are assigned and the
> values they are given.

Yes, in principle it will work with a custom branching, as long as it  
is a ViewValBranching.  DDS was actually implemented as a wrapper  
branching around a ViewValBranching.

> Is there any simple way to measure the 'decomposability' of my
> problem? I have an intuition that my problem will split into many
> small independent sub-problems as search proceeds, but it is too large
> and complex to check this by hand.

You could check out revision 8076 of the trunk.  That revision should  
have a working version of DDS (though it's not fully tested).  You can  
take the function connectedComponents from gecode/dds/decomposing- 
branching.hpp to analyse your problem, e.g. every time your copy  
function is called.

Cheers,
	Guido




From filip.konvicka at logis.cz  Thu Feb 12 14:20:37 2009
From: filip.konvicka at logis.cz (=?UTF-8?B?RmlsaXAgS29udmnEjWth?=)
Date: Thu, 12 Feb 2009 14:20:37 +0100
Subject: [gecode-users] Cloning problems
Message-ID: <49942225.9060404@logis.cz>

Hi,

[Sorry, this is a looong message...]

we're hunting a serious bug that occurs during space cloning in 2.2.0. 
The bug occurs very rarely, but we have a testcase that triggers this 
behavior.

We have many constraints in the problem instance and the solver should 
post as many propagators as possible. We have a custom branching for 
this, which posts one propagator at a time in commit(), while the 
alternative is not to post the propagator (i.e. a no-op). Because we're 
only looking for the first solution, in the case of a failure we no 
longer need the path back to the root in the recomputation tree, so we 
decided to use our own simple search engine for this. The standard DFS 
search engine exhibits exactly the same behavior (both with 
recomputation on and off), and we don't see any problems with our search 
engine.

Everything seems to work for the vast majority of the test cases, but 
there are a few instances that cause problems (probably) during cloning 
(can be probably also be caused by some earlier bad subscibe or 
unsubscribe). From our point of view, there is nothing wrong or special 
about the instances. The crashes occur at the same location both on 
Linux and Windows, in both release and debug builds. Changing memory 
management (e.g. never deleting Spaces in the search engine) can cause 
the crash to occur at slightly different places (e.g. some propagation 
during status() after clone() finishes).

One particular case we're looking at now crashes at core.icc:2270, where 
f[0] is a bad pointer (0xfeeefeee at Windows). We're not sure how this 
can happen - we know that in this case n==2 at core.icc:2255, so idx[0] 
is bad pointer at core.icc:2252. This is also what Valgrind says on 
Linux (bad read of size 4).

When we were trying to debug the other cases, we found out that the 
subscription list in a variable in the cloned space contained an actor 
link that was probably copied incorrectly as it seemed as a pure 
ActorLink like Space::a_actors, having a totally different address than 
the rest of the actors (probably belonging to the original space 
object). When we tried to find out when this actor link entered the 
list, we ended up in VarImp<VIC>::update again.

We're (of course:-)) using FloatVars in the model, and we eliminated all 
other kinds of variables and propagators. In our case, pc_max==1 and 
free_bits==0.

We find it difficult to understand what is happening during cloning. We 
would appreciate if someone explaned the basic idea. We only have 
floatvars, propagators and one branching (no advisors or other types of 
actors/branchings/advisors).

We know how VarImp<VIC>::resize works, that's easy. In 
VarImp<VIC>::enter, we can't see why you do "--idx[0];" as the first 
iteration of the for cycle overwrites it (as long as pc>0, of course). 
May be just optimization of course. As for VarImp<VIC>::update, we only 
guess...we suspect that a) the original x->idx[0] is destroyed somewhere 
so it needs to get restored from a memcpy backup at idx[0], b) 
ActorLink::_prev is probably used to map old actors to new ones (thus 
the "->prev()". We did not dig deep enough to be sure though, so we'd 
welcome some guidance here.

Cheers,
Filip




From cschulte at kth.se  Thu Feb 12 14:33:46 2009
From: cschulte at kth.se (Christian Schulte)
Date: Thu, 12 Feb 2009 14:33:46 +0100
Subject: [gecode-users] Cloning problems
In-Reply-To: <49942225.9060404@logis.cz>
References: <49942225.9060404@logis.cz>
Message-ID: <000001c98d16$884e2770$98ea7650$@se>

One quick question: 32 or 64 bits? Looks as it 32, right?

Christian

--
Christian Schulte, www.it.kth.se/~cschulte/

-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Filip Konvicka
Sent: Thursday, February 12, 2009 2:21 PM
To: users at gecode.org
Cc: Lubo? Moric
Subject: [gecode-users] Cloning problems

Hi,

[Sorry, this is a looong message...]

we're hunting a serious bug that occurs during space cloning in 2.2.0. 
The bug occurs very rarely, but we have a testcase that triggers this 
behavior.

We have many constraints in the problem instance and the solver should 
post as many propagators as possible. We have a custom branching for 
this, which posts one propagator at a time in commit(), while the 
alternative is not to post the propagator (i.e. a no-op). Because we're 
only looking for the first solution, in the case of a failure we no 
longer need the path back to the root in the recomputation tree, so we 
decided to use our own simple search engine for this. The standard DFS 
search engine exhibits exactly the same behavior (both with 
recomputation on and off), and we don't see any problems with our search 
engine.

Everything seems to work for the vast majority of the test cases, but 
there are a few instances that cause problems (probably) during cloning 
(can be probably also be caused by some earlier bad subscibe or 
unsubscribe). From our point of view, there is nothing wrong or special 
about the instances. The crashes occur at the same location both on 
Linux and Windows, in both release and debug builds. Changing memory 
management (e.g. never deleting Spaces in the search engine) can cause 
the crash to occur at slightly different places (e.g. some propagation 
during status() after clone() finishes).

One particular case we're looking at now crashes at core.icc:2270, where 
f[0] is a bad pointer (0xfeeefeee at Windows). We're not sure how this 
can happen - we know that in this case n==2 at core.icc:2255, so idx[0] 
is bad pointer at core.icc:2252. This is also what Valgrind says on 
Linux (bad read of size 4).

When we were trying to debug the other cases, we found out that the 
subscription list in a variable in the cloned space contained an actor 
link that was probably copied incorrectly as it seemed as a pure 
ActorLink like Space::a_actors, having a totally different address than 
the rest of the actors (probably belonging to the original space 
object). When we tried to find out when this actor link entered the 
list, we ended up in VarImp<VIC>::update again.

We're (of course:-)) using FloatVars in the model, and we eliminated all 
other kinds of variables and propagators. In our case, pc_max==1 and 
free_bits==0.

We find it difficult to understand what is happening during cloning. We 
would appreciate if someone explaned the basic idea. We only have 
floatvars, propagators and one branching (no advisors or other types of 
actors/branchings/advisors).

We know how VarImp<VIC>::resize works, that's easy. In 
VarImp<VIC>::enter, we can't see why you do "--idx[0];" as the first 
iteration of the for cycle overwrites it (as long as pc>0, of course). 
May be just optimization of course. As for VarImp<VIC>::update, we only 
guess...we suspect that a) the original x->idx[0] is destroyed somewhere 
so it needs to get restored from a memcpy backup at idx[0], b) 
ActorLink::_prev is probably used to map old actors to new ones (thus 
the "->prev()". We did not dig deep enough to be sure though, so we'd 
welcome some guidance here.

Cheers,
Filip


_______________________________________________
Gecode users mailing list
users at gecode.org
https://www.gecode.org/mailman/listinfo/gecode-users




From filip.konvicka at logis.cz  Thu Feb 12 14:36:03 2009
From: filip.konvicka at logis.cz (=?UTF-8?B?RmlsaXAgS29udmnEjWth?=)
Date: Thu, 12 Feb 2009 14:36:03 +0100
Subject: [gecode-users] Cloning problems
In-Reply-To: <000001c98d16$884e2770$98ea7650$@se>
References: <49942225.9060404@logis.cz> <000001c98d16$884e2770$98ea7650$@se>
Message-ID: <499425C3.4050108@logis.cz>

Yes, 32 bits.

Filip

> One quick question: 32 or 64 bits? Looks as it 32, right?
> 
> Christian
> 
> --
> Christian Schulte, www.it.kth.se/~cschulte/
> 
> -----Original Message-----
> From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
> Of Filip Konvicka
> Sent: Thursday, February 12, 2009 2:21 PM
> To: users at gecode.org
> Cc: Lubo? Moric
> Subject: [gecode-users] Cloning problems
> 
> Hi,
> 
> [Sorry, this is a looong message...]
> 
> we're hunting a serious bug that occurs during space cloning in 2.2.0. 
> The bug occurs very rarely, but we have a testcase that triggers this 
> behavior.
> 
> We have many constraints in the problem instance and the solver should 
> post as many propagators as possible. We have a custom branching for 
> this, which posts one propagator at a time in commit(), while the 
> alternative is not to post the propagator (i.e. a no-op). Because we're 
> only looking for the first solution, in the case of a failure we no 
> longer need the path back to the root in the recomputation tree, so we 
> decided to use our own simple search engine for this. The standard DFS 
> search engine exhibits exactly the same behavior (both with 
> recomputation on and off), and we don't see any problems with our search 
> engine.
> 
> Everything seems to work for the vast majority of the test cases, but 
> there are a few instances that cause problems (probably) during cloning 
> (can be probably also be caused by some earlier bad subscibe or 
> unsubscribe). From our point of view, there is nothing wrong or special 
> about the instances. The crashes occur at the same location both on 
> Linux and Windows, in both release and debug builds. Changing memory 
> management (e.g. never deleting Spaces in the search engine) can cause 
> the crash to occur at slightly different places (e.g. some propagation 
> during status() after clone() finishes).
> 
> One particular case we're looking at now crashes at core.icc:2270, where 
> f[0] is a bad pointer (0xfeeefeee at Windows). We're not sure how this 
> can happen - we know that in this case n==2 at core.icc:2255, so idx[0] 
> is bad pointer at core.icc:2252. This is also what Valgrind says on 
> Linux (bad read of size 4).
> 
> When we were trying to debug the other cases, we found out that the 
> subscription list in a variable in the cloned space contained an actor 
> link that was probably copied incorrectly as it seemed as a pure 
> ActorLink like Space::a_actors, having a totally different address than 
> the rest of the actors (probably belonging to the original space 
> object). When we tried to find out when this actor link entered the 
> list, we ended up in VarImp<VIC>::update again.
> 
> We're (of course:-)) using FloatVars in the model, and we eliminated all 
> other kinds of variables and propagators. In our case, pc_max==1 and 
> free_bits==0.
> 
> We find it difficult to understand what is happening during cloning. We 
> would appreciate if someone explaned the basic idea. We only have 
> floatvars, propagators and one branching (no advisors or other types of 
> actors/branchings/advisors).
> 
> We know how VarImp<VIC>::resize works, that's easy. In 
> VarImp<VIC>::enter, we can't see why you do "--idx[0];" as the first 
> iteration of the for cycle overwrites it (as long as pc>0, of course). 
> May be just optimization of course. As for VarImp<VIC>::update, we only 
> guess...we suspect that a) the original x->idx[0] is destroyed somewhere 
> so it needs to get restored from a memcpy backup at idx[0], b) 
> ActorLink::_prev is probably used to map old actors to new ones (thus 
> the "->prev()". We did not dig deep enough to be sure though, so we'd 
> welcome some guidance here.
> 
> Cheers,
> Filip
> 
> 
> _______________________________________________
> Gecode users mailing list
> users at gecode.org
> https://www.gecode.org/mailman/listinfo/gecode-users




From cschulte at kth.se  Fri Feb 13 10:32:36 2009
From: cschulte at kth.se (Christian Schulte)
Date: Fri, 13 Feb 2009 10:32:36 +0100
Subject: [gecode-users] Question about branching
In-Reply-To: <200902102202.51782.Vincent.Barichard@univ-angers.fr>
References: <200902091410.57732.Vincent.Barichard@univ-angers.fr>	<001201c98b86$d81e9050$885bb0f0$@se>
	<200902102202.51782.Vincent.Barichard@univ-angers.fr>
Message-ID: <009c01c98dbe$02f20d50$08d627f0$@se>

Hi Vincent,

would the following help: There will be two iterators Space::Propagators and
Space::Branchings that iterate over all propagators or branchings of a
space? Would be enough if they would just give const access?

Your patch is wrong. The update function does everything thats needed. Or
did you have a problem there?

Cheers
Christian

--
Christian Schulte, www.ict.kth.se/~cschulte/


-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Vincent Barichard
Sent: Tuesday, February 10, 2009 10:03 PM
To: Christian Schulte
Cc: users at gecode.org
Subject: Re: [gecode-users] Question about branching

Hi,

Le mardi 10 f?vrier 2009 14:52:37 Christian Schulte, vous avez ?crit :
> Hi,
>
> no there is no way to find the x, in particular as some branchings 
> might not have an array of variables.

I wasn't sure but I suspected it.

>
> There is not even the notion of a current branching (there are two 
> current
> branchings: one that is used for status() and the other that is used 
> for
> commit() during recomputation).
>
> Branchings are designed to just implement a particular interface that's
it.
>

It is not completely clear for me. I will look more further in the code.

> Maybe you tell us what you want to do?

I have created a new variable type and I want to do backjumping on the
search tree. So I need to access to the variable of the BranchingDesc to
know if I must to skip the BranchingDesc or not. After reading your mail, I
decided to create sub-class of ViewValBranching and PosValDesc to get the
information I need. Here comes a piece of the code I wrote in my search
engine:

              const BranchingDesc * bd;
              int noAlt;
              int noClosedDesc;
              QBool::QBoolQuant quant;
              do
              {
                bd = rcs.nextDesc< QBool::QBoolPosValDesc<2> 
>(*this,noAlt,noClosedDesc);
                if (bd == NULL) return NULL;
                quant = static_cast<const QBool::QBoolPosValDesc<2>*>(bd)-
>quantifier();
              } while (quant != QBool::QBoolVarImp::EXISTS);

              delete cur;
              cur = rcs.recompute<false>(d,*this);
              EngineCtrl::current(cur);

Sometimes, the line:
"              } while (quant != QBool::QBoolVarImp::EXISTS);"
changes, so I have to dynamically ask the variable of the BranchingDesc what
is its quantifier.

The problem here is that I have to assume that it is a
QBool::QBoolPosValDesc<2> BranchingDesc and to cast it.
I would like to test if it is a QBool::QBoolPosValDesc<2> and if it is the
case, to test its quantifier.

> Then, reflection will be gone (see my next mail as to why) and there 
> is currently no way to get the actors (unless you iterate over the 
> list of actors, check how the function propagators() counting the 
> number of propagators is implemented).

I looked at propagators(), but It needs "pc" being public or protected in
order to use it in our subclass of Space.

Another thing, I am not sure it's a small bug or not, but I found that the
"co" field of SpeedLinBoolInt is not initialized during cloning. As a
result, the update function of Council<A> may not ends. I attached a patch
in the mail.

Thank you for your help.
Cheers,
Vincent




From cschulte at kth.se  Fri Feb 13 11:11:30 2009
From: cschulte at kth.se (Christian Schulte)
Date: Fri, 13 Feb 2009 11:11:30 +0100
Subject: [gecode-users] Cloning problems
In-Reply-To: <49942225.9060404@logis.cz>
References: <49942225.9060404@logis.cz>
Message-ID: <009f01c98dc3$773215c0$65964140$@se>

Hi,

that sounds ugly ;-) Before I start with rambling about cloning, a tip:
Gecode supports unary branchings (with a single alternatiuve only). So you
could have a unary branching and don't have to have a mock-up empty branch.
The search engines even optimize that case. If you are looking for an
example, check the assign function in gecode/int.hh for assigning variables.

Okay, cloning it is. So, there are two stages: copying and updating. During
copying you first create a new space and copy all actors. While copying all
actors you copy each variable and its domain used by an actor and collect a
list of all these variables (actually a list for each variable type). The
only thing that you do not do is copying the dependency array of a variable
(the array of pointers that point to propagators that depend on a variable).
Then in updating, you update the dependency arrays (and also deal with
advisors).

Updating a dependency array just copies for each old entry the new entry
(stored via a forwarding pointer in each actor) and restore some information
for variables that has been stored in the copy of the dependency array.
After that you cleanup the space, the actors, and you are done.

In VarImp<VIC>::enter, the --idx[0] makes room for an additional entry. Then
you keep moving actors to a free entry and by this create a new free entry
for the propagation condition i. When the loop is done, you know that there
is a free entry for propagation condition pc and that's where the propagator
is entered.

Your guess about x->idx[0] in VarImp<VIC>::update is correct: this actually
stores the forwarding pointer for a variable implementation. Also your
suspicion about ActorLink::prev is correct: there the forwarding pointer for
actors is stored.

Let me come up with some idea where the trouble could be:
 - you forget to update a variable or view at some place. Either in your
branching, propagator, or model. 
   Then you can see an invalid pointer in the dependency array.
   You might want to change the default constructor of VarBase in
gecode/kernel/var.icc and the default constructor
   of VarViewBase in gecode/kernel/view.icc so that they set varimp to NULL
(actually, I just did that yesterday in the trunk as well). Then you will be
sure that when you forget to update, you'll see a NULL pointer.
 - you commit a heinous crime in that you change the dependencies of a
variable with cancel/subscribe during 
   cloning. That is illegal and will for sure break everything. Note that
creating a propagator during
   cloning will commit that crime, too.

It is very very unlikely (but not impossible, of course) that the cloning in
Gecode has a snatch but, as said, very unlikely given that its used by
anything else.

Hope that helps. Please do not hesitate to ask some more
Christian

--
Christian Schulte, www.ict.kth.se/~cschulte/


-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Filip Konvicka
Sent: Thursday, February 12, 2009 2:21 PM
To: users at gecode.org
Cc: Lubo? Moric
Subject: [gecode-users] Cloning problems

Hi,

[Sorry, this is a looong message...]

we're hunting a serious bug that occurs during space cloning in 2.2.0. 
The bug occurs very rarely, but we have a testcase that triggers this 
behavior.

We have many constraints in the problem instance and the solver should 
post as many propagators as possible. We have a custom branching for 
this, which posts one propagator at a time in commit(), while the 
alternative is not to post the propagator (i.e. a no-op). Because we're 
only looking for the first solution, in the case of a failure we no 
longer need the path back to the root in the recomputation tree, so we 
decided to use our own simple search engine for this. The standard DFS 
search engine exhibits exactly the same behavior (both with 
recomputation on and off), and we don't see any problems with our search 
engine.

Everything seems to work for the vast majority of the test cases, but 
there are a few instances that cause problems (probably) during cloning 
(can be probably also be caused by some earlier bad subscibe or 
unsubscribe). From our point of view, there is nothing wrong or special 
about the instances. The crashes occur at the same location both on 
Linux and Windows, in both release and debug builds. Changing memory 
management (e.g. never deleting Spaces in the search engine) can cause 
the crash to occur at slightly different places (e.g. some propagation 
during status() after clone() finishes).

One particular case we're looking at now crashes at core.icc:2270, where 
f[0] is a bad pointer (0xfeeefeee at Windows). We're not sure how this 
can happen - we know that in this case n==2 at core.icc:2255, so idx[0] 
is bad pointer at core.icc:2252. This is also what Valgrind says on 
Linux (bad read of size 4).

When we were trying to debug the other cases, we found out that the 
subscription list in a variable in the cloned space contained an actor 
link that was probably copied incorrectly as it seemed as a pure 
ActorLink like Space::a_actors, having a totally different address than 
the rest of the actors (probably belonging to the original space 
object). When we tried to find out when this actor link entered the 
list, we ended up in VarImp<VIC>::update again.

We're (of course:-)) using FloatVars in the model, and we eliminated all 
other kinds of variables and propagators. In our case, pc_max==1 and 
free_bits==0.

We find it difficult to understand what is happening during cloning. We 
would appreciate if someone explaned the basic idea. We only have 
floatvars, propagators and one branching (no advisors or other types of 
actors/branchings/advisors).

We know how VarImp<VIC>::resize works, that's easy. In 
VarImp<VIC>::enter, we can't see why you do "--idx[0];" as the first 
iteration of the for cycle overwrites it (as long as pc>0, of course). 
May be just optimization of course. As for VarImp<VIC>::update, we only 
guess...we suspect that a) the original x->idx[0] is destroyed somewhere 
so it needs to get restored from a memcpy backup at idx[0], b) 
ActorLink::_prev is probably used to map old actors to new ones (thus 
the "->prev()". We did not dig deep enough to be sure though, so we'd 
welcome some guidance here.

Cheers,
Filip


_______________________________________________
Gecode users mailing list
users at gecode.org
https://www.gecode.org/mailman/listinfo/gecode-users




From filip.konvicka at logis.cz  Fri Feb 13 13:01:37 2009
From: filip.konvicka at logis.cz (=?UTF-8?B?RmlsaXAgS29udmnEjWth?=)
Date: Fri, 13 Feb 2009 13:01:37 +0100
Subject: [gecode-users] Cloning problems
In-Reply-To: <009f01c98dc3$773215c0$65964140$@se>
References: <49942225.9060404@logis.cz> <009f01c98dc3$773215c0$65964140$@se>
Message-ID: <49956121.8050607@logis.cz>

Hi,

first, thanks for the thorough explanation!

> Before I start with rambling about cloning, a tip:
> Gecode supports unary branchings (with a single alternatiuve only). So you
> could have a unary branching and don't have to have a mock-up empty branch.
> The search engines even optimize that case. If you are looking for an
> example, check the assign function in gecode/int.hh for assigning variables.
>   

We know about this (and use it for our own "assignment" branchings), but 
I don't see how this applies to our case? Clearly if the first 
alternative fails and we need to go on without that commit, we need 
another branch...? I'm sure we could do it all just manually without any 
branching or search engine, but this allowed us to test it with the DFS 
engine and compare to ours.

> In VarImp<VIC>::enter, the --idx[0] makes room for an additional entry. Then
> you keep moving actors to a free entry and by this create a new free entry
> for the propagation condition i. When the loop is done, you know that there
> is a free entry for propagation condition pc and that's where the propagator
> is entered.
>   

I see - seems like I misinterpreted the loop statement... too many *s 
and &s for one day, I guess :-)

> Let me come up with some idea where the trouble could be:
>  - you forget to update a variable or view at some place. Either in your
> branching, propagator, or model.
>    Then you can see an invalid pointer in the dependency array.
>    You might want to change the default constructor of VarBase in
> gecode/kernel/var.icc and the default constructor
>    of VarViewBase in gecode/kernel/view.icc so that they set varimp to NULL
> (actually, I just did that yesterday in the trunk as well). Then you will be
> sure that when you forget to update, you'll see a NULL pointer.
>   

Well, I checked that once again now (we've done that at least ten times 
in the last week :-)). I re-checked how the propagators 
subscribe/update/cancel, it is consistent with the IntVar propagators 
(BTW, in ReLinBin<Val,A,B,pc,Ctrl> in int-bin.hpp, you subscribe with 
PC_INT_VAL and cancel with PC_BOOL_VAL). The branching does not need any 
views or anything (it talks to the space directly via a static_cast).

>  - you commit a heinous crime in that you change the dependencies of a
> variable with cancel/subscribe during 
>    cloning. That is illegal and will for sure break everything. Note that
> creating a propagator during
>    cloning will commit that crime, too.
>   

We're not trying to do anything illegal :-) Even if we did that, I'm 
sure that the other testcases would fail too. But it's just those few :-)

> Hope that helps. Please do not hesitate to ask some more
>   

Yes it does, big thanks for the overview! We'll let you know (soon, I 
hope...)

Have a nice weekend,
Filip




From cschulte at kth.se  Fri Feb 13 15:33:33 2009
From: cschulte at kth.se (Christian Schulte)
Date: Fri, 13 Feb 2009 15:33:33 +0100
Subject: [gecode-users] Cloning problems
References: <49942225.9060404@logis.cz> 
Message-ID: <00f601c98de8$0cc891d0$2659b570$@se>

Hi Mikael and I just had one more thing you could check: the behaviour could
also be due to a propagator that says subsumption but does not delete all of
its dependencies via cancel.

Christian

--
Christian Schulte, www.ict.kth.se/~cschulte/


-----Original Message-----
From: Christian Schulte [mailto:cschulte at kth.se] 
Sent: Friday, February 13, 2009 11:12 AM
To: 'Filip Konvi?ka'; 'users at gecode.org'
Cc: 'Lubo? Moric'
Subject: RE: [gecode-users] Cloning problems

Hi,

that sounds ugly ;-) Before I start with rambling about cloning, a tip:
Gecode supports unary branchings (with a single alternatiuve only). So you
could have a unary branching and don't have to have a mock-up empty branch.
The search engines even optimize that case. If you are looking for an
example, check the assign function in gecode/int.hh for assigning variables.

Okay, cloning it is. So, there are two stages: copying and updating. During
copying you first create a new space and copy all actors. While copying all
actors you copy each variable and its domain used by an actor and collect a
list of all these variables (actually a list for each variable type). The
only thing that you do not do is copying the dependency array of a variable
(the array of pointers that point to propagators that depend on a variable).
Then in updating, you update the dependency arrays (and also deal with
advisors).

Updating a dependency array just copies for each old entry the new entry
(stored via a forwarding pointer in each actor) and restore some information
for variables that has been stored in the copy of the dependency array.
After that you cleanup the space, the actors, and you are done.

In VarImp<VIC>::enter, the --idx[0] makes room for an additional entry. Then
you keep moving actors to a free entry and by this create a new free entry
for the propagation condition i. When the loop is done, you know that there
is a free entry for propagation condition pc and that's where the propagator
is entered.

Your guess about x->idx[0] in VarImp<VIC>::update is correct: this actually
stores the forwarding pointer for a variable implementation. Also your
suspicion about ActorLink::prev is correct: there the forwarding pointer for
actors is stored.

Let me come up with some idea where the trouble could be:
 - you forget to update a variable or view at some place. Either in your
branching, propagator, or model. 
   Then you can see an invalid pointer in the dependency array.
   You might want to change the default constructor of VarBase in
gecode/kernel/var.icc and the default constructor
   of VarViewBase in gecode/kernel/view.icc so that they set varimp to NULL
(actually, I just did that yesterday in the trunk as well). Then you will be
sure that when you forget to update, you'll see a NULL pointer.
 - you commit a heinous crime in that you change the dependencies of a
variable with cancel/subscribe during 
   cloning. That is illegal and will for sure break everything. Note that
creating a propagator during
   cloning will commit that crime, too.

It is very very unlikely (but not impossible, of course) that the cloning in
Gecode has a snatch but, as said, very unlikely given that its used by
anything else.

Hope that helps. Please do not hesitate to ask some more
Christian

--
Christian Schulte, www.ict.kth.se/~cschulte/


-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Filip Konvicka
Sent: Thursday, February 12, 2009 2:21 PM
To: users at gecode.org
Cc: Lubo? Moric
Subject: [gecode-users] Cloning problems

Hi,

[Sorry, this is a looong message...]

we're hunting a serious bug that occurs during space cloning in 2.2.0. 
The bug occurs very rarely, but we have a testcase that triggers this 
behavior.

We have many constraints in the problem instance and the solver should 
post as many propagators as possible. We have a custom branching for 
this, which posts one propagator at a time in commit(), while the 
alternative is not to post the propagator (i.e. a no-op). Because we're 
only looking for the first solution, in the case of a failure we no 
longer need the path back to the root in the recomputation tree, so we 
decided to use our own simple search engine for this. The standard DFS 
search engine exhibits exactly the same behavior (both with 
recomputation on and off), and we don't see any problems with our search 
engine.

Everything seems to work for the vast majority of the test cases, but 
there are a few instances that cause problems (probably) during cloning 
(can be probably also be caused by some earlier bad subscibe or 
unsubscribe). From our point of view, there is nothing wrong or special 
about the instances. The crashes occur at the same location both on 
Linux and Windows, in both release and debug builds. Changing memory 
management (e.g. never deleting Spaces in the search engine) can cause 
the crash to occur at slightly different places (e.g. some propagation 
during status() after clone() finishes).

One particular case we're looking at now crashes at core.icc:2270, where 
f[0] is a bad pointer (0xfeeefeee at Windows). We're not sure how this 
can happen - we know that in this case n==2 at core.icc:2255, so idx[0] 
is bad pointer at core.icc:2252. This is also what Valgrind says on 
Linux (bad read of size 4).

When we were trying to debug the other cases, we found out that the 
subscription list in a variable in the cloned space contained an actor 
link that was probably copied incorrectly as it seemed as a pure 
ActorLink like Space::a_actors, having a totally different address than 
the rest of the actors (probably belonging to the original space 
object). When we tried to find out when this actor link entered the 
list, we ended up in VarImp<VIC>::update again.

We're (of course:-)) using FloatVars in the model, and we eliminated all 
other kinds of variables and propagators. In our case, pc_max==1 and 
free_bits==0.

We find it difficult to understand what is happening during cloning. We 
would appreciate if someone explaned the basic idea. We only have 
floatvars, propagators and one branching (no advisors or other types of 
actors/branchings/advisors).

We know how VarImp<VIC>::resize works, that's easy. In 
VarImp<VIC>::enter, we can't see why you do "--idx[0];" as the first 
iteration of the for cycle overwrites it (as long as pc>0, of course). 
May be just optimization of course. As for VarImp<VIC>::update, we only 
guess...we suspect that a) the original x->idx[0] is destroyed somewhere 
so it needs to get restored from a memcpy backup at idx[0], b) 
ActorLink::_prev is probably used to map old actors to new ones (thus 
the "->prev()". We did not dig deep enough to be sure though, so we'd 
welcome some guidance here.

Cheers,
Filip


_______________________________________________
Gecode users mailing list
users at gecode.org
https://www.gecode.org/mailman/listinfo/gecode-users




From filip.konvicka at logis.cz  Fri Feb 13 15:49:46 2009
From: filip.konvicka at logis.cz (=?UTF-8?B?RmlsaXAgS29udmnEjWth?=)
Date: Fri, 13 Feb 2009 15:49:46 +0100
Subject: [gecode-users] Cloning problems
In-Reply-To: <00f601c98de8$0cc891d0$2659b570$@se>
References: <49942225.9060404@logis.cz> <00f601c98de8$0cc891d0$2659b570$@se>
Message-ID: <4995888A.8070505@logis.cz>

Hi,

we just discussed the very same idea. It seems that during cloning, an 
actor is present in the variable subscription list, but not in the 
Space::a_actors list, so we thought that maybe an actor disappeared 
without unsubscribing. We're using ES_SUBSUMED(this, home) everywhere in 
floatvar propagators to indicate entailment, I'll check whether that is 
done everywhere.

Thanks,
Filip

> Hi Mikael and I just had one more thing you could check: the behaviour could
> also be due to a propagator that says subsumption but does not delete all of
> its dependencies via cancel.
>
> Christian
>
> --
> Christian Schulte, www.ict.kth.se/~cschulte/
>
>
> -----Original Message-----
> From: Christian Schulte [mailto:cschulte at kth.se] 
> Sent: Friday, February 13, 2009 11:12 AM
> To: 'Filip Konvi?ka'; 'users at gecode.org'
> Cc: 'Lubo? Moric'
> Subject: RE: [gecode-users] Cloning problems
>
> Hi,
>
> that sounds ugly ;-) Before I start with rambling about cloning, a tip:
> Gecode supports unary branchings (with a single alternatiuve only). So you
> could have a unary branching and don't have to have a mock-up empty branch.
> The search engines even optimize that case. If you are looking for an
> example, check the assign function in gecode/int.hh for assigning variables.
>
> Okay, cloning it is. So, there are two stages: copying and updating. During
> copying you first create a new space and copy all actors. While copying all
> actors you copy each variable and its domain used by an actor and collect a
> list of all these variables (actually a list for each variable type). The
> only thing that you do not do is copying the dependency array of a variable
> (the array of pointers that point to propagators that depend on a variable).
> Then in updating, you update the dependency arrays (and also deal with
> advisors).
>
> Updating a dependency array just copies for each old entry the new entry
> (stored via a forwarding pointer in each actor) and restore some information
> for variables that has been stored in the copy of the dependency array.
> After that you cleanup the space, the actors, and you are done.
>
> In VarImp<VIC>::enter, the --idx[0] makes room for an additional entry. Then
> you keep moving actors to a free entry and by this create a new free entry
> for the propagation condition i. When the loop is done, you know that there
> is a free entry for propagation condition pc and that's where the propagator
> is entered.
>
> Your guess about x->idx[0] in VarImp<VIC>::update is correct: this actually
> stores the forwarding pointer for a variable implementation. Also your
> suspicion about ActorLink::prev is correct: there the forwarding pointer for
> actors is stored.
>
> Let me come up with some idea where the trouble could be:
>  - you forget to update a variable or view at some place. Either in your
> branching, propagator, or model. 
>    Then you can see an invalid pointer in the dependency array.
>    You might want to change the default constructor of VarBase in
> gecode/kernel/var.icc and the default constructor
>    of VarViewBase in gecode/kernel/view.icc so that they set varimp to NULL
> (actually, I just did that yesterday in the trunk as well). Then you will be
> sure that when you forget to update, you'll see a NULL pointer.
>  - you commit a heinous crime in that you change the dependencies of a
> variable with cancel/subscribe during 
>    cloning. That is illegal and will for sure break everything. Note that
> creating a propagator during
>    cloning will commit that crime, too.
>
> It is very very unlikely (but not impossible, of course) that the cloning in
> Gecode has a snatch but, as said, very unlikely given that its used by
> anything else.
>
> Hope that helps. Please do not hesitate to ask some more
> Christian
>
> --
> Christian Schulte, www.ict.kth.se/~cschulte/
>
>
> -----Original Message-----
> From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
> Of Filip Konvicka
> Sent: Thursday, February 12, 2009 2:21 PM
> To: users at gecode.org
> Cc: Lubo? Moric
> Subject: [gecode-users] Cloning problems
>
> Hi,
>
> [Sorry, this is a looong message...]
>
> we're hunting a serious bug that occurs during space cloning in 2.2.0. 
> The bug occurs very rarely, but we have a testcase that triggers this 
> behavior.
>
> We have many constraints in the problem instance and the solver should 
> post as many propagators as possible. We have a custom branching for 
> this, which posts one propagator at a time in commit(), while the 
> alternative is not to post the propagator (i.e. a no-op). Because we're 
> only looking for the first solution, in the case of a failure we no 
> longer need the path back to the root in the recomputation tree, so we 
> decided to use our own simple search engine for this. The standard DFS 
> search engine exhibits exactly the same behavior (both with 
> recomputation on and off), and we don't see any problems with our search 
> engine.
>
> Everything seems to work for the vast majority of the test cases, but 
> there are a few instances that cause problems (probably) during cloning 
> (can be probably also be caused by some earlier bad subscibe or 
> unsubscribe). From our point of view, there is nothing wrong or special 
> about the instances. The crashes occur at the same location both on 
> Linux and Windows, in both release and debug builds. Changing memory 
> management (e.g. never deleting Spaces in the search engine) can cause 
> the crash to occur at slightly different places (e.g. some propagation 
> during status() after clone() finishes).
>
> One particular case we're looking at now crashes at core.icc:2270, where 
> f[0] is a bad pointer (0xfeeefeee at Windows). We're not sure how this 
> can happen - we know that in this case n==2 at core.icc:2255, so idx[0] 
> is bad pointer at core.icc:2252. This is also what Valgrind says on 
> Linux (bad read of size 4).
>
> When we were trying to debug the other cases, we found out that the 
> subscription list in a variable in the cloned space contained an actor 
> link that was probably copied incorrectly as it seemed as a pure 
> ActorLink like Space::a_actors, having a totally different address than 
> the rest of the actors (probably belonging to the original space 
> object). When we tried to find out when this actor link entered the 
> list, we ended up in VarImp<VIC>::update again.
>
> We're (of course:-)) using FloatVars in the model, and we eliminated all 
> other kinds of variables and propagators. In our case, pc_max==1 and 
> free_bits==0.
>
> We find it difficult to understand what is happening during cloning. We 
> would appreciate if someone explaned the basic idea. We only have 
> floatvars, propagators and one branching (no advisors or other types of 
> actors/branchings/advisors).
>
> We know how VarImp<VIC>::resize works, that's easy. In 
> VarImp<VIC>::enter, we can't see why you do "--idx[0];" as the first 
> iteration of the for cycle overwrites it (as long as pc>0, of course). 
> May be just optimization of course. As for VarImp<VIC>::update, we only 
> guess...we suspect that a) the original x->idx[0] is destroyed somewhere 
> so it needs to get restored from a memcpy backup at idx[0], b) 
> ActorLink::_prev is probably used to map old actors to new ones (thus 
> the "->prev()". We did not dig deep enough to be sure though, so we'd 
> welcome some guidance here.
>
> Cheers,
> Filip
>
>
> _______________________________________________
> Gecode users mailing list
> users at gecode.org
> https://www.gecode.org/mailman/listinfo/gecode-users
>
>   


-- 
Filip Konvi?ka

LOGIS, s.r.o.
tel. +420 556 841 100
mob. +420 736 758 714




From filip.konvicka at logis.cz  Fri Feb 13 16:18:59 2009
From: filip.konvicka at logis.cz (=?UTF-8?B?RmlsaXAgS29udmnEjWth?=)
Date: Fri, 13 Feb 2009 16:18:59 +0100
Subject: [gecode-users] Cloning problems
In-Reply-To: <4995888A.8070505@logis.cz>
References: <49942225.9060404@logis.cz> <00f601c98de8$0cc891d0$2659b570$@se>
	<4995888A.8070505@logis.cz>
Message-ID: <49958F63.2040002@logis.cz>

Ha! One of our custom propagators (not a "standard" floatvar propagator) 
returned __ES_SUBSUMED directly instead of calling the macro. So it is 
exactly like you said.

Thanks very much for support!

As a side effect, we now have a nice description of what happens during 
cloning that might be useful in the future.

Frankly, we're also glad that it was our fault in the end. We've been 
tracing the cloning process in the debugger in both C++ and assembler 
for quite some time, so we feel even more comfortable about Gecode now 
that we've seen the internals.

Thanks again,
Filip

> Hi,
> 
> we just discussed the very same idea. It seems that during cloning, an 
> actor is present in the variable subscription list, but not in the 
> Space::a_actors list, so we thought that maybe an actor disappeared 
> without unsubscribing. We're using ES_SUBSUMED(this, home) everywhere in 
> floatvar propagators to indicate entailment, I'll check whether that is 
> done everywhere.
> 
> Thanks,
> Filip
> 
>> Hi Mikael and I just had one more thing you could check: the behaviour could
>> also be due to a propagator that says subsumption but does not delete all of
>> its dependencies via cancel.
>>
>> Christian
>>
>> --
>> Christian Schulte, www.ict.kth.se/~cschulte/
>>
>>
>> -----Original Message-----
>> From: Christian Schulte [mailto:cschulte at kth.se] 
>> Sent: Friday, February 13, 2009 11:12 AM
>> To: 'Filip Konvi?ka'; 'users at gecode.org'
>> Cc: 'Lubo? Moric'
>> Subject: RE: [gecode-users] Cloning problems
>>
>> Hi,
>>
>> that sounds ugly ;-) Before I start with rambling about cloning, a tip:
>> Gecode supports unary branchings (with a single alternatiuve only). So you
>> could have a unary branching and don't have to have a mock-up empty branch.
>> The search engines even optimize that case. If you are looking for an
>> example, check the assign function in gecode/int.hh for assigning variables.
>>
>> Okay, cloning it is. So, there are two stages: copying and updating. During
>> copying you first create a new space and copy all actors. While copying all
>> actors you copy each variable and its domain used by an actor and collect a
>> list of all these variables (actually a list for each variable type). The
>> only thing that you do not do is copying the dependency array of a variable
>> (the array of pointers that point to propagators that depend on a variable).
>> Then in updating, you update the dependency arrays (and also deal with
>> advisors).
>>
>> Updating a dependency array just copies for each old entry the new entry
>> (stored via a forwarding pointer in each actor) and restore some information
>> for variables that has been stored in the copy of the dependency array.
>> After that you cleanup the space, the actors, and you are done.
>>
>> In VarImp<VIC>::enter, the --idx[0] makes room for an additional entry. Then
>> you keep moving actors to a free entry and by this create a new free entry
>> for the propagation condition i. When the loop is done, you know that there
>> is a free entry for propagation condition pc and that's where the propagator
>> is entered.
>>
>> Your guess about x->idx[0] in VarImp<VIC>::update is correct: this actually
>> stores the forwarding pointer for a variable implementation. Also your
>> suspicion about ActorLink::prev is correct: there the forwarding pointer for
>> actors is stored.
>>
>> Let me come up with some idea where the trouble could be:
>>  - you forget to update a variable or view at some place. Either in your
>> branching, propagator, or model. 
>>    Then you can see an invalid pointer in the dependency array.
>>    You might want to change the default constructor of VarBase in
>> gecode/kernel/var.icc and the default constructor
>>    of VarViewBase in gecode/kernel/view.icc so that they set varimp to NULL
>> (actually, I just did that yesterday in the trunk as well). Then you will be
>> sure that when you forget to update, you'll see a NULL pointer.
>>  - you commit a heinous crime in that you change the dependencies of a
>> variable with cancel/subscribe during 
>>    cloning. That is illegal and will for sure break everything. Note that
>> creating a propagator during
>>    cloning will commit that crime, too.
>>
>> It is very very unlikely (but not impossible, of course) that the cloning in
>> Gecode has a snatch but, as said, very unlikely given that its used by
>> anything else.
>>
>> Hope that helps. Please do not hesitate to ask some more
>> Christian
>>
>> --
>> Christian Schulte, www.ict.kth.se/~cschulte/
>>
>>
>> -----Original Message-----
>> From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
>> Of Filip Konvicka
>> Sent: Thursday, February 12, 2009 2:21 PM
>> To: users at gecode.org
>> Cc: Lubo? Moric
>> Subject: [gecode-users] Cloning problems
>>
>> Hi,
>>
>> [Sorry, this is a looong message...]
>>
>> we're hunting a serious bug that occurs during space cloning in 2.2.0. 
>> The bug occurs very rarely, but we have a testcase that triggers this 
>> behavior.
>>
>> We have many constraints in the problem instance and the solver should 
>> post as many propagators as possible. We have a custom branching for 
>> this, which posts one propagator at a time in commit(), while the 
>> alternative is not to post the propagator (i.e. a no-op). Because we're 
>> only looking for the first solution, in the case of a failure we no 
>> longer need the path back to the root in the recomputation tree, so we 
>> decided to use our own simple search engine for this. The standard DFS 
>> search engine exhibits exactly the same behavior (both with 
>> recomputation on and off), and we don't see any problems with our search 
>> engine.
>>
>> Everything seems to work for the vast majority of the test cases, but 
>> there are a few instances that cause problems (probably) during cloning 
>> (can be probably also be caused by some earlier bad subscibe or 
>> unsubscribe). From our point of view, there is nothing wrong or special 
>> about the instances. The crashes occur at the same location both on 
>> Linux and Windows, in both release and debug builds. Changing memory 
>> management (e.g. never deleting Spaces in the search engine) can cause 
>> the crash to occur at slightly different places (e.g. some propagation 
>> during status() after clone() finishes).
>>
>> One particular case we're looking at now crashes at core.icc:2270, where 
>> f[0] is a bad pointer (0xfeeefeee at Windows). We're not sure how this 
>> can happen - we know that in this case n==2 at core.icc:2255, so idx[0] 
>> is bad pointer at core.icc:2252. This is also what Valgrind says on 
>> Linux (bad read of size 4).
>>
>> When we were trying to debug the other cases, we found out that the 
>> subscription list in a variable in the cloned space contained an actor 
>> link that was probably copied incorrectly as it seemed as a pure 
>> ActorLink like Space::a_actors, having a totally different address than 
>> the rest of the actors (probably belonging to the original space 
>> object). When we tried to find out when this actor link entered the 
>> list, we ended up in VarImp<VIC>::update again.
>>
>> We're (of course:-)) using FloatVars in the model, and we eliminated all 
>> other kinds of variables and propagators. In our case, pc_max==1 and 
>> free_bits==0.
>>
>> We find it difficult to understand what is happening during cloning. We 
>> would appreciate if someone explaned the basic idea. We only have 
>> floatvars, propagators and one branching (no advisors or other types of 
>> actors/branchings/advisors).
>>
>> We know how VarImp<VIC>::resize works, that's easy. In 
>> VarImp<VIC>::enter, we can't see why you do "--idx[0];" as the first 
>> iteration of the for cycle overwrites it (as long as pc>0, of course). 
>> May be just optimization of course. As for VarImp<VIC>::update, we only 
>> guess...we suspect that a) the original x->idx[0] is destroyed somewhere 
>> so it needs to get restored from a memcpy backup at idx[0], b) 
>> ActorLink::_prev is probably used to map old actors to new ones (thus 
>> the "->prev()". We did not dig deep enough to be sure though, so we'd 
>> welcome some guidance here.
>>
>> Cheers,
>> Filip
>>
>>
>> _______________________________________________
>> Gecode users mailing list
>> users at gecode.org
>> https://www.gecode.org/mailman/listinfo/gecode-users
>>
>>   
> 
> 




From cschulte at kth.se  Fri Feb 13 16:38:21 2009
From: cschulte at kth.se (Christian Schulte)
Date: Fri, 13 Feb 2009 16:38:21 +0100
Subject: [gecode-users] Cloning problems
In-Reply-To: <49958F63.2040002@logis.cz>
References: <49942225.9060404@logis.cz> <00f601c98de8$0cc891d0$2659b570$@se>
	<4995888A.8070505@logis.cz> <49958F63.2040002@logis.cz>
Message-ID: <000301c98df1$1a072380$4e156a80$@se>

Great! I always get nervous no matter how often we say that it can't be our fault ;-)

Christian

--
Christian Schulte, www.it.kth.se/~cschulte/

-----Original Message-----
From: Filip Konvi?ka [mailto:filip.konvicka at logis.cz] 
Sent: Friday, February 13, 2009 4:19 PM
Cc: public-cschulte-UNjuZkX4dYU at hugh.gmane.org; 'Lubo? Moric'
Subject: Re: Cloning problems



Ha! One of our custom propagators (not a "standard" floatvar propagator) 
returned __ES_SUBSUMED directly instead of calling the macro. So it is 
exactly like you said.

Thanks very much for support!

As a side effect, we now have a nice description of what happens during 
cloning that might be useful in the future.

Frankly, we're also glad that it was our fault in the end. We've been 
tracing the cloning process in the debugger in both C++ and assembler 
for quite some time, so we feel even more comfortable about Gecode now 
that we've seen the internals.

Thanks again,
Filip

> Hi,
> 
> we just discussed the very same idea. It seems that during cloning, an 
> actor is present in the variable subscription list, but not in the 
> Space::a_actors list, so we thought that maybe an actor disappeared 
> without unsubscribing. We're using ES_SUBSUMED(this, home) everywhere in 
> floatvar propagators to indicate entailment, I'll check whether that is 
> done everywhere.
> 
> Thanks,
> Filip
> 
>> Hi Mikael and I just had one more thing you could check: the behaviour could
>> also be due to a propagator that says subsumption but does not delete all of
>> its dependencies via cancel.
>>
>> Christian
>>
>> --
>> Christian Schulte, www.ict.kth.se/~cschulte/
>>
>>
>> -----Original Message-----
>> From: Christian Schulte [mailto:cschulte at kth.se] 
>> Sent: Friday, February 13, 2009 11:12 AM
>> To: 'Filip Konvi?ka'; 'users at gecode.org'
>> Cc: 'Lubo? Moric'
>> Subject: RE: [gecode-users] Cloning problems
>>
>> Hi,
>>
>> that sounds ugly ;-) Before I start with rambling about cloning, a tip:
>> Gecode supports unary branchings (with a single alternatiuve only). So you
>> could have a unary branching and don't have to have a mock-up empty branch.
>> The search engines even optimize that case. If you are looking for an
>> example, check the assign function in gecode/int.hh for assigning variables.
>>
>> Okay, cloning it is. So, there are two stages: copying and updating. During
>> copying you first create a new space and copy all actors. While copying all
>> actors you copy each variable and its domain used by an actor and collect a
>> list of all these variables (actually a list for each variable type). The
>> only thing that you do not do is copying the dependency array of a variable
>> (the array of pointers that point to propagators that depend on a variable).
>> Then in updating, you update the dependency arrays (and also deal with
>> advisors).
>>
>> Updating a dependency array just copies for each old entry the new entry
>> (stored via a forwarding pointer in each actor) and restore some information
>> for variables that has been stored in the copy of the dependency array.
>> After that you cleanup the space, the actors, and you are done.
>>
>> In VarImp<VIC>::enter, the --idx[0] makes room for an additional entry. Then
>> you keep moving actors to a free entry and by this create a new free entry
>> for the propagation condition i. When the loop is done, you know that there
>> is a free entry for propagation condition pc and that's where the propagator
>> is entered.
>>
>> Your guess about x->idx[0] in VarImp<VIC>::update is correct: this actually
>> stores the forwarding pointer for a variable implementation. Also your
>> suspicion about ActorLink::prev is correct: there the forwarding pointer for
>> actors is stored.
>>
>> Let me come up with some idea where the trouble could be:
>>  - you forget to update a variable or view at some place. Either in your
>> branching, propagator, or model. 
>>    Then you can see an invalid pointer in the dependency array.
>>    You might want to change the default constructor of VarBase in
>> gecode/kernel/var.icc and the default constructor
>>    of VarViewBase in gecode/kernel/view.icc so that they set varimp to NULL
>> (actually, I just did that yesterday in the trunk as well). Then you will be
>> sure that when you forget to update, you'll see a NULL pointer.
>>  - you commit a heinous crime in that you change the dependencies of a
>> variable with cancel/subscribe during 
>>    cloning. That is illegal and will for sure break everything. Note that
>> creating a propagator during
>>    cloning will commit that crime, too.
>>
>> It is very very unlikely (but not impossible, of course) that the cloning in
>> Gecode has a snatch but, as said, very unlikely given that its used by
>> anything else.
>>
>> Hope that helps. Please do not hesitate to ask some more
>> Christian
>>
>> --
>> Christian Schulte, www.ict.kth.se/~cschulte/
>>
>>
>> -----Original Message-----
>> From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
>> Of Filip Konvicka
>> Sent: Thursday, February 12, 2009 2:21 PM
>> To: users at gecode.org
>> Cc: Lubo? Moric
>> Subject: [gecode-users] Cloning problems
>>
>> Hi,
>>
>> [Sorry, this is a looong message...]
>>
>> we're hunting a serious bug that occurs during space cloning in 2.2.0. 
>> The bug occurs very rarely, but we have a testcase that triggers this 
>> behavior.
>>
>> We have many constraints in the problem instance and the solver should 
>> post as many propagators as possible. We have a custom branching for 
>> this, which posts one propagator at a time in commit(), while the 
>> alternative is not to post the propagator (i.e. a no-op). Because we're 
>> only looking for the first solution, in the case of a failure we no 
>> longer need the path back to the root in the recomputation tree, so we 
>> decided to use our own simple search engine for this. The standard DFS 
>> search engine exhibits exactly the same behavior (both with 
>> recomputation on and off), and we don't see any problems with our search 
>> engine.
>>
>> Everything seems to work for the vast majority of the test cases, but 
>> there are a few instances that cause problems (probably) during cloning 
>> (can be probably also be caused by some earlier bad subscibe or 
>> unsubscribe). From our point of view, there is nothing wrong or special 
>> about the instances. The crashes occur at the same location both on 
>> Linux and Windows, in both release and debug builds. Changing memory 
>> management (e.g. never deleting Spaces in the search engine) can cause 
>> the crash to occur at slightly different places (e.g. some propagation 
>> during status() after clone() finishes).
>>
>> One particular case we're looking at now crashes at core.icc:2270, where 
>> f[0] is a bad pointer (0xfeeefeee at Windows). We're not sure how this 
>> can happen - we know that in this case n==2 at core.icc:2255, so idx[0] 
>> is bad pointer at core.icc:2252. This is also what Valgrind says on 
>> Linux (bad read of size 4).
>>
>> When we were trying to debug the other cases, we found out that the 
>> subscription list in a variable in the cloned space contained an actor 
>> link that was probably copied incorrectly as it seemed as a pure 
>> ActorLink like Space::a_actors, having a totally different address than 
>> the rest of the actors (probably belonging to the original space 
>> object). When we tried to find out when this actor link entered the 
>> list, we ended up in VarImp<VIC>::update again.
>>
>> We're (of course:-)) using FloatVars in the model, and we eliminated all 
>> other kinds of variables and propagators. In our case, pc_max==1 and 
>> free_bits==0.
>>
>> We find it difficult to understand what is happening during cloning. We 
>> would appreciate if someone explaned the basic idea. We only have 
>> floatvars, propagators and one branching (no advisors or other types of 
>> actors/branchings/advisors).
>>
>> We know how VarImp<VIC>::resize works, that's easy. In 
>> VarImp<VIC>::enter, we can't see why you do "--idx[0];" as the first 
>> iteration of the for cycle overwrites it (as long as pc>0, of course). 
>> May be just optimization of course. As for VarImp<VIC>::update, we only 
>> guess...we suspect that a) the original x->idx[0] is destroyed somewhere 
>> so it needs to get restored from a memcpy backup at idx[0], b) 
>> ActorLink::_prev is probably used to map old actors to new ones (thus 
>> the "->prev()". We did not dig deep enough to be sure though, so we'd 
>> welcome some guidance here.
>>
>> Cheers,
>> Filip
>>
>>
>> _______________________________________________
>> Gecode users mailing list
>> users at gecode.org
>> https://www.gecode.org/mailman/listinfo/gecode-users
>>
>>   
> 
> 






From filip.konvicka at logis.cz  Fri Feb 13 16:58:22 2009
From: filip.konvicka at logis.cz (=?UTF-8?B?RmlsaXAgS29udmnEjWth?=)
Date: Fri, 13 Feb 2009 16:58:22 +0100
Subject: [gecode-users] Cloning problems
In-Reply-To: <000301c98df1$1a072380$4e156a80$@se>
References: <49942225.9060404@logis.cz>
	<00f601c98de8$0cc891d0$2659b570$@se>	<4995888A.8070505@logis.cz>
	<49958F63.2040002@logis.cz> <000301c98df1$1a072380$4e156a80$@se>
Message-ID: <4995989E.2060907@logis.cz>

> Great! I always get nervous no matter how often we say that it can't be our fault ;-)

Well this time it was close! :-)))

I feared that it would be something as stupid as this... but still, what 
an adventure!

Filip

> Christian
> 
> --
> Christian Schulte, www.it.kth.se/~cschulte/
> 




From Vincent.Barichard at univ-angers.fr  Fri Feb 13 17:54:40 2009
From: Vincent.Barichard at univ-angers.fr (Vincent Barichard)
Date: Fri, 13 Feb 2009 17:54:40 +0100
Subject: [gecode-users] Question about branching
In-Reply-To: <009c01c98dbe$02f20d50$08d627f0$@se>
References: <200902091410.57732.Vincent.Barichard@univ-angers.fr>
	<200902102202.51782.Vincent.Barichard@univ-angers.fr>
	<009c01c98dbe$02f20d50$08d627f0$@se>
Message-ID: <200902131754.41177.Vincent.Barichard@univ-angers.fr>

Hi Christian,

Le vendredi 13 f?vrier 2009 10:32:36 Christian Schulte, vous avez ?crit :
> Hi Vincent,
>
> would the following help: There will be two iterators Space::Propagators
> and Space::Branchings that iterate over all propagators or branchings of a
> space? Would be enough if they would just give const access?
>

A const access should be sufficient. It will be very convenient to be able to 
parse propagators and branchings :-)

> Your patch is wrong. The update function does everything thats needed. Or
> did you have a problem there?
>

Indeed, I encountered a problem. I designed a propagator which uses advisors. 
Sometimes afer cloning, Gecode crashed. The debugger tells me that the crash 
occured in the Council<A>::update function of my propagator and Valgrind said 
that there is some uninitialized variables. 
After reading the code, I saw that the field named "advisors" in the Council<A> 
class is set to NULL in only one constructor. Furthermore, there is no recopy 
constructor, so when cloning, a bad value may be copied in the "advisors" field 
of the clone, and the variable "c.advisors" in the Council<A>::update function 
may  not been correctly initialized.
After putting "co(home)" in the recopy constructor of my propagator, 
everything go well, so I thought it was the same problem for the 
SpeedLinBoolInt propagator. I probably thought wrong, sorry.

Cheers,
Vincent


> Cheers
> Christian
>
> --
> Christian Schulte, www.ict.kth.se/~cschulte/
>
>
> -----Original Message-----
> From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
> Of Vincent Barichard
> Sent: Tuesday, February 10, 2009 10:03 PM
> To: Christian Schulte
> Cc: users at gecode.org
> Subject: Re: [gecode-users] Question about branching
>
> Hi,
>
> Le mardi 10 f?vrier 2009 14:52:37 Christian Schulte, vous avez ?crit :
> > Hi,
> >
> > no there is no way to find the x, in particular as some branchings
> > might not have an array of variables.
>
> I wasn't sure but I suspected it.
>
> > There is not even the notion of a current branching (there are two
> > current
> > branchings: one that is used for status() and the other that is used
> > for
> > commit() during recomputation).
> >
> > Branchings are designed to just implement a particular interface that's
>
> it.
>
>
> It is not completely clear for me. I will look more further in the code.
>
> > Maybe you tell us what you want to do?
>
> I have created a new variable type and I want to do backjumping on the
> search tree. So I need to access to the variable of the BranchingDesc to
> know if I must to skip the BranchingDesc or not. After reading your mail, I
> decided to create sub-class of ViewValBranching and PosValDesc to get the
> information I need. Here comes a piece of the code I wrote in my search
> engine:
>
>               const BranchingDesc * bd;
>               int noAlt;
>               int noClosedDesc;
>               QBool::QBoolQuant quant;
>               do
>               {
>                 bd = rcs.nextDesc< QBool::QBoolPosValDesc<2>
>
> >(*this,noAlt,noClosedDesc);
>
>                 if (bd == NULL) return NULL;
>                 quant = static_cast<const QBool::QBoolPosValDesc<2>*>(bd)-
>
> >quantifier();
>
>               } while (quant != QBool::QBoolVarImp::EXISTS);
>
>               delete cur;
>               cur = rcs.recompute<false>(d,*this);
>               EngineCtrl::current(cur);
>
> Sometimes, the line:
> "              } while (quant != QBool::QBoolVarImp::EXISTS);"
> changes, so I have to dynamically ask the variable of the BranchingDesc
> what is its quantifier.
>
> The problem here is that I have to assume that it is a
> QBool::QBoolPosValDesc<2> BranchingDesc and to cast it.
> I would like to test if it is a QBool::QBoolPosValDesc<2> and if it is the
> case, to test its quantifier.
>
> > Then, reflection will be gone (see my next mail as to why) and there
> > is currently no way to get the actors (unless you iterate over the
> > list of actors, check how the function propagators() counting the
> > number of propagators is implemented).
>
> I looked at propagators(), but It needs "pc" being public or protected in
> order to use it in our subclass of Space.
>
> Another thing, I am not sure it's a small bug or not, but I found that the
> "co" field of SpeedLinBoolInt is not initialized during cloning. As a
> result, the update function of Council<A> may not ends. I attached a patch
> in the mail.
>
> Thank you for your help.
> Cheers,
> Vincent

-- 
Vincent Barichard        Universit? d'Angers (LERIA)
Tel: 02 41 73 52 06      D?partement Informatique
Fax: 02 41 73 50 73      H203



From malcolmr at cse.unsw.edu.au  Sun Feb 15 05:45:39 2009
From: malcolmr at cse.unsw.edu.au (Malcolm Ryan)
Date: Sun, 15 Feb 2009 15:45:39 +1100
Subject: [gecode-users] Examples
Message-ID: <DC118126-0A9B-4786-9B8B-B222A91F02FC@cse.unsw.edu.au>

If I may offer a well-intentioned criticism of the Gecode  
distribution, I'd like to suggest that the examples that come with the  
distribution do not serve their purpose well. They do a good job of  
demonstrating the the strengths of the library, but are less useful as  
examples of how to use it. They are simply too complicated, with too  
many options spread over too many files. Trying to single out a  
particular concept, such as 'how to use Gist' or 'how to write a  
custom branching' is tricky. The answer is there, but it is woven in  
among several other advanced concepts, with an option system for  
turning different parts on and off.

It would be nicer to have simple self-contained examples that  
illustrate just one concept at a time and highlight the particular  
code elements that are necessary to make that feature work, keeping  
the number of options down to a minimum.

If you do this, it would make like easier for all of us. Users such as  
myself would find your library much easier to learn, and you wouldn't  
have to spend as much of your time answering our stupid questions on  
the mailing list. While I am very grateful for all your help, I am  
sure we would all like to get on with our work.

Malcolm



From tack at ps.uni-sb.de  Mon Feb 16 11:29:17 2009
From: tack at ps.uni-sb.de (Guido Tack)
Date: Mon, 16 Feb 2009 21:29:17 +1100
Subject: [gecode-users] Examples
In-Reply-To: <DC118126-0A9B-4786-9B8B-B222A91F02FC@cse.unsw.edu.au>
References: <DC118126-0A9B-4786-9B8B-B222A91F02FC@cse.unsw.edu.au>
Message-ID: <FFE81950-1E91-4888-ADD0-AB2D1CB5F972@ps.uni-sb.de>

Dear Malcolm,

you're right, the examples are not very helpful as a starting point.   
However, the tutorial documentation we're currently writing (and which  
is going to be available soon) will provide exactly the kind of  
information you're asking for.  The new tutorial examples will be self- 
contained and explained step by step, and the document will cover  
everything that is essential for modeling with Gecode (creating  
variables, posting constraints, search, and compiling/linking).

Cheers,
	Guido

Malcolm Ryan wrote:

> If I may offer a well-intentioned criticism of the Gecode
> distribution, I'd like to suggest that the examples that come with the
> distribution do not serve their purpose well. They do a good job of
> demonstrating the the strengths of the library, but are less useful as
> examples of how to use it. They are simply too complicated, with too
> many options spread over too many files. Trying to single out a
> particular concept, such as 'how to use Gist' or 'how to write a
> custom branching' is tricky. The answer is there, but it is woven in
> among several other advanced concepts, with an option system for
> turning different parts on and off.
>
> It would be nicer to have simple self-contained examples that
> illustrate just one concept at a time and highlight the particular
> code elements that are necessary to make that feature work, keeping
> the number of options down to a minimum.
>
> If you do this, it would make like easier for all of us. Users such as
> myself would find your library much easier to learn, and you wouldn't
> have to spend as much of your time answering our stupid questions on
> the mailing list. While I am very grateful for all your help, I am
> sure we would all like to get on with our work.
>
> Malcolm




From cschulte at kth.se  Mon Feb 16 11:45:31 2009
From: cschulte at kth.se (Christian Schulte)
Date: Mon, 16 Feb 2009 11:45:31 +0100
Subject: [gecode-users] Examples
In-Reply-To: <FFE81950-1E91-4888-ADD0-AB2D1CB5F972@ps.uni-sb.de>
References: <DC118126-0A9B-4786-9B8B-B222A91F02FC@cse.unsw.edu.au>
	<FFE81950-1E91-4888-ADD0-AB2D1CB5F972@ps.uni-sb.de>
Message-ID: <000001c99023$b0aef180$120cd480$@se>

...and after that we will continue writing documentation for programming
with Gecode: how to program propagators, branchings, search engines, and
variables. Again with step by step examples.

Christian

--
Christian Schulte, www.it.kth.se/~cschulte/

-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Guido Tack
Sent: Monday, February 16, 2009 11:29 AM
To: gecode list
Subject: Re: [gecode-users] Examples

Dear Malcolm,

you're right, the examples are not very helpful as a starting point.   
However, the tutorial documentation we're currently writing (and which  
is going to be available soon) will provide exactly the kind of  
information you're asking for.  The new tutorial examples will be self- 
contained and explained step by step, and the document will cover  
everything that is essential for modeling with Gecode (creating  
variables, posting constraints, search, and compiling/linking).

Cheers,
	Guido

Malcolm Ryan wrote:

> If I may offer a well-intentioned criticism of the Gecode
> distribution, I'd like to suggest that the examples that come with the
> distribution do not serve their purpose well. They do a good job of
> demonstrating the the strengths of the library, but are less useful as
> examples of how to use it. They are simply too complicated, with too
> many options spread over too many files. Trying to single out a
> particular concept, such as 'how to use Gist' or 'how to write a
> custom branching' is tricky. The answer is there, but it is woven in
> among several other advanced concepts, with an option system for
> turning different parts on and off.
>
> It would be nicer to have simple self-contained examples that
> illustrate just one concept at a time and highlight the particular
> code elements that are necessary to make that feature work, keeping
> the number of options down to a minimum.
>
> If you do this, it would make like easier for all of us. Users such as
> myself would find your library much easier to learn, and you wouldn't
> have to spend as much of your time answering our stupid questions on
> the mailing list. While I am very grateful for all your help, I am
> sure we would all like to get on with our work.
>
> Malcolm


_______________________________________________
Gecode users mailing list
users at gecode.org
https://www.gecode.org/mailman/listinfo/gecode-users




From ChaosAngel at gmx.de  Mon Feb 16 14:21:24 2009
From: ChaosAngel at gmx.de (Max Ostrowski)
Date: Mon, 16 Feb 2009 14:21:24 +0100
Subject: [gecode-users] Reified Distinct Constraint
Message-ID: <20090216132124.289780@gmx.net>

I just found the distinct constraint, that hopefully makes all variables distinct. This could greatly reduce the number of constraints, as i am translating from a logic program.
But i would need a reified version of the distinct constraint.
I there any or can i at least emulate thie behaviour?

Thank you in advance,
Max
-- 
Jetzt 1 Monat kostenlos! GMX FreeDSL - Telefonanschluss + DSL 
f?r nur 17,95 Euro/mtl.!* http://dsl.gmx.de/?ac=OM.AD.PD003K11308T4569a



From O.Kullmann at swansea.ac.uk  Mon Feb 16 21:10:33 2009
From: O.Kullmann at swansea.ac.uk (Oliver Kullmann)
Date: Mon, 16 Feb 2009 20:10:33 +0000
Subject: [gecode-users] new C++ library database
Message-ID: <20090216201033.GD31670@cs-wsok.swansea.ac.uk>

Hello,

hopefully the link

http://c-plusplus.org/

is useful: This aims at providing
the much needed links to all those C++
libraries out there.

I propose Gecode also puts a link there
(yet there are topics "Algorithms, Bioinformatics, Cryptography, Mathematics";
one could have links for Gecode in Algorithms and Mathematics, but
likely a new category like "Constraint Processing" would be good).

Oliver

-- 
Dr. Oliver Kullmann
Computer Science Department
Swansea University
Faraday Building, Singleton Park
Swansea SA2 8PP, UK
http://cs.swan.ac.uk/~csoliver/



From paranoic.pum at gmail.com  Tue Feb 17 01:34:04 2009
From: paranoic.pum at gmail.com (David Przybilla)
Date: Tue, 17 Feb 2009 01:34:04 +0100
Subject: [gecode-users] Peak Memory
Message-ID: <fb1020c60902161634h5c631e8au90e1d9c057876ce@mail.gmail.com>

Hello,
Im not sure about the meaning of "Peak Memory" in the statistics showed.
does it mean the memory used by the whole program or  just the memory used
by spaces and propagators?

Thank you
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20090217/e9e09c38/attachment.htm>

From cschulte at kth.se  Tue Feb 17 09:14:20 2009
From: cschulte at kth.se (Christian Schulte)
Date: Tue, 17 Feb 2009 09:14:20 +0100
Subject: [gecode-users] Reified Distinct Constraint
In-Reply-To: <20090216132124.289780@gmx.net>
References: <20090216132124.289780@gmx.net>
Message-ID: <000301c990d7$bf784b30$3e68e190$@se>

No, there is no reified version. The best you can do at emulating is use
excessive reification: Create O(n^2) reified disequality constraints for all
variable-variable pairs, and then the reified control variable is the
conjunction of all the control variables from the disequalities. As said,
not very good.

Christian

--
Christian Schulte, www.it.kth.se/~cschulte/

-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Max Ostrowski
Sent: Monday, February 16, 2009 2:21 PM
To: gecode list
Subject: [gecode-users] Reified Distinct Constraint

I just found the distinct constraint, that hopefully makes all variables
distinct. This could greatly reduce the number of constraints, as i am
translating from a logic program.
But i would need a reified version of the distinct constraint.
I there any or can i at least emulate thie behaviour?

Thank you in advance,
Max
-- 
Jetzt 1 Monat kostenlos! GMX FreeDSL - Telefonanschluss + DSL 
f?r nur 17,95 Euro/mtl.!* http://dsl.gmx.de/?ac=OM.AD.PD003K11308T4569a

_______________________________________________
Gecode users mailing list
users at gecode.org
https://www.gecode.org/mailman/listinfo/gecode-users




From cschulte at kth.se  Tue Feb 17 09:15:32 2009
From: cschulte at kth.se (Christian Schulte)
Date: Tue, 17 Feb 2009 09:15:32 +0100
Subject: [gecode-users] Peak Memory
In-Reply-To: <fb1020c60902161634h5c631e8au90e1d9c057876ce@mail.gmail.com>
References: <fb1020c60902161634h5c631e8au90e1d9c057876ce@mail.gmail.com>
Message-ID: <000601c990d7$e77fca90$b67f5fb0$@se>

Just the memory used by the Gecode search engine: the stack for search
together with all spaces (with their propagators, branching, etc) stored on
that stack.

 

Christian

 

--

Christian Schulte, www.it.kth.se/~cschulte/

 

From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of David Przybilla
Sent: Tuesday, February 17, 2009 1:34 AM
To: users at gecode.org
Subject: [gecode-users] Peak Memory

 

Hello,
Im not sure about the meaning of "Peak Memory" in the statistics showed.
does it mean the memory used by the whole program or  just the memory used
by spaces and propagators?

Thank you

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20090217/38f2caca/attachment.htm>

From chaosangel at gmx.de  Tue Feb 17 10:32:24 2009
From: chaosangel at gmx.de (Max)
Date: Tue, 17 Feb 2009 10:32:24 +0100
Subject: [gecode-users] Reified Distinct Constraint
In-Reply-To: <000301c990d7$bf784b30$3e68e190$@se>
References: <20090216132124.289780@gmx.net>
	<000301c990d7$bf784b30$3e68e190$@se>
Message-ID: <499A8428.30904@gmx.de>

Thank you for the quick answer.
Is this feature planned for the release of GeCode3.0?
I just found a mail in the archive of somebody requesting the same feature.
Currently i do use O(n^2) constraints for this, but i wanted to show 
that i can transform it into a constant number of rules.
Thats why i would need the reified version.

Max

Christian Schulte wrote:
> No, there is no reified version. The best you can do at emulating is use
> excessive reification: Create O(n^2) reified disequality constraints for all
> variable-variable pairs, and then the reified control variable is the
> conjunction of all the control variables from the disequalities. As said,
> not very good.
>
> Christian
>
> --
> Christian Schulte, www.it.kth.se/~cschulte/
>
> -----Original Message-----
> From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
> Of Max Ostrowski
> Sent: Monday, February 16, 2009 2:21 PM
> To: gecode list
> Subject: [gecode-users] Reified Distinct Constraint
>
> I just found the distinct constraint, that hopefully makes all variables
> distinct. This could greatly reduce the number of constraints, as i am
> translating from a logic program.
> But i would need a reified version of the distinct constraint.
> I there any or can i at least emulate thie behaviour?
>
> Thank you in advance,
> Max
>   




From cschulte at kth.se  Tue Feb 17 10:36:45 2009
From: cschulte at kth.se (Christian Schulte)
Date: Tue, 17 Feb 2009 10:36:45 +0100
Subject: [gecode-users] Reified Distinct Constraint
In-Reply-To: <499A8428.30904@gmx.de>
References: <20090216132124.289780@gmx.net>
	<000301c990d7$bf784b30$3e68e190$@se> <499A8428.30904@gmx.de>
Message-ID: <001a01c990e3$3feccfb0$bfc66f10$@se>

No, not really. I do not know what this distinct would be good for. A more
useful one would be a soft distinct where the number of violations is
counted (there, one actually also could get some propagation). Check for
example:
	http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.3.7071

What do you need a reified distinct for?

Christian

--
Christian Schulte, www.it.kth.se/~cschulte/


-----Original Message-----
From: Max [mailto:chaosangel at gmx.de] 
Sent: Tuesday, February 17, 2009 10:32 AM
To: Christian Schulte
Cc: 'gecode list'
Subject: Re: [gecode-users] Reified Distinct Constraint

Thank you for the quick answer.
Is this feature planned for the release of GeCode3.0?
I just found a mail in the archive of somebody requesting the same feature.
Currently i do use O(n^2) constraints for this, but i wanted to show 
that i can transform it into a constant number of rules.
Thats why i would need the reified version.

Max

Christian Schulte wrote:
> No, there is no reified version. The best you can do at emulating is use
> excessive reification: Create O(n^2) reified disequality constraints for
all
> variable-variable pairs, and then the reified control variable is the
> conjunction of all the control variables from the disequalities. As said,
> not very good.
>
> Christian
>
> --
> Christian Schulte, www.it.kth.se/~cschulte/
>
> -----Original Message-----
> From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
> Of Max Ostrowski
> Sent: Monday, February 16, 2009 2:21 PM
> To: gecode list
> Subject: [gecode-users] Reified Distinct Constraint
>
> I just found the distinct constraint, that hopefully makes all variables
> distinct. This could greatly reduce the number of constraints, as i am
> translating from a logic program.
> But i would need a reified version of the distinct constraint.
> I there any or can i at least emulate thie behaviour?
>
> Thank you in advance,
> Max
>   





From chaosangel at gmx.de  Tue Feb 17 10:48:35 2009
From: chaosangel at gmx.de (Max)
Date: Tue, 17 Feb 2009 10:48:35 +0100
Subject: [gecode-users] Reified Distinct Constraint
In-Reply-To: <001a01c990e3$3feccfb0$bfc66f10$@se>
References: <20090216132124.289780@gmx.net>	<000301c990d7$bf784b30$3e68e190$@se>
	<499A8428.30904@gmx.de> <001a01c990e3$3feccfb0$bfc66f10$@se>
Message-ID: <499A87F3.8070902@gmx.de>

I'm building a SMT like appraoch for integrating CSP into ASP.
Each constraint is represented by a boolean atom that can be true or 
false, so ...
i would be great to support a non n^2 allDistinct for the variables.
With a reified version i could use the distinct constraint in the body 
of a rule as condition.
So for SMT like systems reified versions of all constraints are welcome.

Max

Christian Schulte wrote:
> No, not really. I do not know what this distinct would be good for. A more
> useful one would be a soft distinct where the number of violations is
> counted (there, one actually also could get some propagation). Check for
> example:
> 	http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.3.7071
>
> What do you need a reified distinct for?
>
> Christian
>
> --
> Christian Schulte, www.it.kth.se/~cschulte/
>
>
> -----Original Message-----
> From: Max [mailto:chaosangel at gmx.de] 
> Sent: Tuesday, February 17, 2009 10:32 AM
> To: Christian Schulte
> Cc: 'gecode list'
> Subject: Re: [gecode-users] Reified Distinct Constraint
>
> Thank you for the quick answer.
> Is this feature planned for the release of GeCode3.0?
> I just found a mail in the archive of somebody requesting the same feature.
> Currently i do use O(n^2) constraints for this, but i wanted to show 
> that i can transform it into a constant number of rules.
> Thats why i would need the reified version.
>
> Max
>
> Christian Schulte wrote:
>   
>> No, there is no reified version. The best you can do at emulating is use
>> excessive reification: Create O(n^2) reified disequality constraints for
>>     
> all
>   
>> variable-variable pairs, and then the reified control variable is the
>> conjunction of all the control variables from the disequalities. As said,
>> not very good.
>>
>> Christian
>>
>> --
>> Christian Schulte, www.it.kth.se/~cschulte/
>>
>> -----Original Message-----
>> From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
>> Of Max Ostrowski
>> Sent: Monday, February 16, 2009 2:21 PM
>> To: gecode list
>> Subject: [gecode-users] Reified Distinct Constraint
>>
>> I just found the distinct constraint, that hopefully makes all variables
>> distinct. This could greatly reduce the number of constraints, as i am
>> translating from a logic program.
>> But i would need a reified version of the distinct constraint.
>> I there any or can i at least emulate thie behaviour?
>>
>> Thank you in advance,
>> Max
>>   
>>     
>
>
>
> _______________________________________________
> Gecode users mailing list
> users at gecode.org
> https://www.gecode.org/mailman/listinfo/gecode-users
>
>   




From cschulte at kth.se  Tue Feb 17 18:07:45 2009
From: cschulte at kth.se (Christian Schulte)
Date: Tue, 17 Feb 2009 18:07:45 +0100
Subject: [gecode-users] Reified Distinct Constraint
In-Reply-To: <499A87F3.8070902@gmx.de>
References: <20090216132124.289780@gmx.net>	<000301c990d7$bf784b30$3e68e190$@se>
	<499A8428.30904@gmx.de> <001a01c990e3$3feccfb0$bfc66f10$@se>
	<499A87F3.8070902@gmx.de>
Message-ID: <000001c99122$4733ea30$d59bbe90$@se>

Hmmm. Implementing (a na?ve one) is easy enough but I fear for us it would
be not enough of general interest.

We are currently working on techniques where reification of everything is
possible. Maybe that could be a solution.

Christian

--
Christian Schulte, www.it.kth.se/~cschulte/

-----Original Message-----
From: Max [mailto:chaosangel at gmx.de] 
Sent: Tuesday, February 17, 2009 10:49 AM
To: Christian Schulte
Cc: 'gecode list'
Subject: Re: [gecode-users] Reified Distinct Constraint

I'm building a SMT like appraoch for integrating CSP into ASP.
Each constraint is represented by a boolean atom that can be true or 
false, so ...
i would be great to support a non n^2 allDistinct for the variables.
With a reified version i could use the distinct constraint in the body 
of a rule as condition.
So for SMT like systems reified versions of all constraints are welcome.

Max

Christian Schulte wrote:
> No, not really. I do not know what this distinct would be good for. A more
> useful one would be a soft distinct where the number of violations is
> counted (there, one actually also could get some propagation). Check for
> example:
> 	http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.3.7071
>
> What do you need a reified distinct for?
>
> Christian
>
> --
> Christian Schulte, www.it.kth.se/~cschulte/
>
>
> -----Original Message-----
> From: Max [mailto:chaosangel at gmx.de] 
> Sent: Tuesday, February 17, 2009 10:32 AM
> To: Christian Schulte
> Cc: 'gecode list'
> Subject: Re: [gecode-users] Reified Distinct Constraint
>
> Thank you for the quick answer.
> Is this feature planned for the release of GeCode3.0?
> I just found a mail in the archive of somebody requesting the same
feature.
> Currently i do use O(n^2) constraints for this, but i wanted to show 
> that i can transform it into a constant number of rules.
> Thats why i would need the reified version.
>
> Max
>
> Christian Schulte wrote:
>   
>> No, there is no reified version. The best you can do at emulating is use
>> excessive reification: Create O(n^2) reified disequality constraints for
>>     
> all
>   
>> variable-variable pairs, and then the reified control variable is the
>> conjunction of all the control variables from the disequalities. As said,
>> not very good.
>>
>> Christian
>>
>> --
>> Christian Schulte, www.it.kth.se/~cschulte/
>>
>> -----Original Message-----
>> From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On
Behalf
>> Of Max Ostrowski
>> Sent: Monday, February 16, 2009 2:21 PM
>> To: gecode list
>> Subject: [gecode-users] Reified Distinct Constraint
>>
>> I just found the distinct constraint, that hopefully makes all variables
>> distinct. This could greatly reduce the number of constraints, as i am
>> translating from a logic program.
>> But i would need a reified version of the distinct constraint.
>> I there any or can i at least emulate thie behaviour?
>>
>> Thank you in advance,
>> Max
>>   
>>     
>
>
>
> _______________________________________________
> Gecode users mailing list
> users at gecode.org
> https://www.gecode.org/mailman/listinfo/gecode-users
>
>   





From crispesdeep at gmail.com  Wed Feb 18 17:56:42 2009
From: crispesdeep at gmail.com (cristian)
Date: Wed, 18 Feb 2009 11:56:42 -0500
Subject: [gecode-users] Compiling error
Message-ID: <8ec0ebc20902180856l7e301352wd51df29abe21a28d@mail.gmail.com>

 Hi To everyBody

I am a Beginner in Gecode, and the follow error appear when I
compiling at Eclipse
The  version of gecode is 2.1.1. and the IDE no marked errors in the code.
Thanks for your attention

**** Build of configuration Debug for project prueba ****

make all
Building file: ../Probando.cc
Invoking: GCC C++ Compiler
g++ -I/usr/local/include/gecode -O0 -g3 -Wall -c -fmessage-length=0
-MMD -MP -MF"Probando.d" -MT"Probando.d" -o"Probando.o"
"../Probando.cc"
Finished building: ../Probando.cc

Building target: prueba
Invoking: GCC C++ Linker
g++ -O0 -g3 -lgecodesearch -lgecodeminimodel -lgecodeserialization
-lgecodecpltset -lgecodeset -lgecodeint -lgecodekernel -lgecodesupport
-Xlinker /usr/local/include/gecode/examples/support/example.o -Xlinker
/usr/local/include/gecode/examples/support/options.o -o"prueba"
./Probando.o
./Probando.o: In function
`Gecode::Gist::PrintingInspector<Test>::PrintingInspector(std::basic_string<char,
std::char_traits<char>, std::allocator<char> > const&)':
Probando.cc:(.text._ZN6Gecode4Gist17PrintingInspectorI4TestEC1ERKSs[Gecode::Gist::PrintingInspector<Test>::PrintingInspector(std::basic_string<char,
std::char_traits<char>, std::allocator<char> > const&)]+0x14):
undefined reference to
`Gecode::Gist::TextInspector::TextInspector(std::basic_string<char,
std::char_traits<char>, std::allocator<char> > const&)'
./Probando.o: In function
`Gecode::Gist::PrintingInspector<Test>::~PrintingInspector()':
Probando.cc:(.text._ZN6Gecode4Gist17PrintingInspectorI4TestED0Ev[Gecode::Gist::PrintingInspector<Test>::~PrintingInspector()]+0x16):
undefined reference to `Gecode::Gist::TextInspector::~TextInspector()'
./Probando.o: In function
`Gecode::Gist::PrintingInspector<Test>::~PrintingInspector()':
Probando.cc:(.text._ZN6Gecode4Gist17PrintingInspectorI4TestED1Ev[Gecode::Gist::PrintingInspector<Test>::~PrintingInspector()]+0x16):
undefined reference to `Gecode::Gist::TextInspector::~TextInspector()'
./Probando.o: In function
`Gecode::Gist::PrintingInspector<Test>::inspect(Gecode::Space*)':
Probando.cc:(.text._ZN6Gecode4Gist17PrintingInspectorI4TestE7inspectEPNS_5SpaceE[Gecode::Gist::PrintingInspector<Test>::inspect(Gecode::Space*)]+0xf):
undefined reference to `Gecode::Gist::TextInspector::init()'
Probando.cc:(.text._ZN6Gecode4Gist17PrintingInspectorI4TestE7inspectEPNS_5SpaceE[Gecode::Gist::PrintingInspector<Test>::inspect(Gecode::Space*)]+0x5f):
undefined reference to `Gecode::Gist::TextInspector::getStream()'
./Probando.o: In function `GistEngine<Gecode::DFS<Test>
>::explore(Test*, Gecode::Gist::Inspector*)':
Probando.cc:(.text._ZN10GistEngineIN6Gecode3DFSI4TestEEE7exploreEPS2_PNS0_4Gist9InspectorE[GistEngine<Gecode::DFS<Test>
>::explore(Test*, Gecode::Gist::Inspector*)]+0x14): undefined
reference to `Gecode::explore(Gecode::Space*,
Gecode::Gist::Inspector*)'
./Probando.o:(.rodata._ZTIN6Gecode4Gist17PrintingInspectorI4TestEE[typeinfo
for Gecode::Gist::PrintingInspector<Test>]+0x8): undefined reference
to `typeinfo for Gecode::Gist::TextInspector'
collect2: ld devolvi? el estado de salida 1
make: *** [prueba] Error 1



From tack at ps.uni-sb.de  Wed Feb 18 22:21:11 2009
From: tack at ps.uni-sb.de (Guido Tack)
Date: Thu, 19 Feb 2009 08:21:11 +1100
Subject: [gecode-users] Compiling error
In-Reply-To: <8ec0ebc20902180856l7e301352wd51df29abe21a28d@mail.gmail.com>
References: <8ec0ebc20902180856l7e301352wd51df29abe21a28d@mail.gmail.com>
Message-ID: <41FB4C36-2D74-42F8-87E7-63186D374E36@ps.uni-sb.de>

cristian wrote:

> I am a Beginner in Gecode, and the follow error appear when I
> compiling at Eclipse
> The  version of gecode is 2.1.1. and the IDE no marked errors in the  
> code.
> Thanks for your attention
[...]
> Building target: prueba
> Invoking: GCC C++ Linker
> g++ -O0 -g3 -lgecodesearch -lgecodeminimodel -lgecodeserialization
> -lgecodecpltset -lgecodeset -lgecodeint -lgecodekernel -lgecodesupport
> -Xlinker /usr/local/include/gecode/examples/support/example.o -Xlinker
> /usr/local/include/gecode/examples/support/options.o -o"prueba"

It's a linking error.  You forgot to add -lgecodegist to the list of  
linker options.

Cheers,
	Guido




From cipriano at dimi.uniud.it  Thu Feb 19 03:04:42 2009
From: cipriano at dimi.uniud.it (Raffaele Cipriano)
Date: Thu, 19 Feb 2009 03:04:42 +0100
Subject: [gecode-users] Static libraries of Gecode 2.2.0
Message-ID: <499CBE3A.5060304@dimi.uniud.it>

Dear gecode developers and users,
I am trying to install Gecode 2.2.0 under Cygwin.
In the documentation it is said that on Cygwin only static libraries are 
supported, so I typed
./configure --enable-static

But ./configure gives me this message:

configure: error: Static linking not supported for Windows/cl

What can I do?

I tried configuring and making with shared libraries and it seems ok, 
but I get into troubles we trying to compile and link my programs.

Thank you for any suggestion!

Cheers

Raffaele Cipriano



From cschulte at kth.se  Thu Feb 19 09:54:42 2009
From: cschulte at kth.se (Christian Schulte)
Date: Thu, 19 Feb 2009 09:54:42 +0100
Subject: [gecode-users] Static libraries of Gecode 2.2.0
In-Reply-To: <499CBE3A.5060304@dimi.uniud.it>
References: <499CBE3A.5060304@dimi.uniud.it>
Message-ID: <000001c9926f$b90c5c70$2b251550$@se>

You have to specify the compilers. For cygwin, please install gcc-4 and its
additional packages and then

./configure --enable-static CC=gcc-4 CXX=g++-4

Then, a tip: don't use gcc. Use cl instead, check the mailing list archives
how to do that.

Christian

--
Christian Schulte, www.it.kth.se/~cschulte/

-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Raffaele Cipriano
Sent: Thursday, February 19, 2009 3:05 AM
To: gecode user list
Subject: [gecode-users] Static libraries of Gecode 2.2.0

Dear gecode developers and users,
I am trying to install Gecode 2.2.0 under Cygwin.
In the documentation it is said that on Cygwin only static libraries are 
supported, so I typed
./configure --enable-static

But ./configure gives me this message:

configure: error: Static linking not supported for Windows/cl

What can I do?

I tried configuring and making with shared libraries and it seems ok, 
but I get into troubles we trying to compile and link my programs.

Thank you for any suggestion!

Cheers

Raffaele Cipriano

_______________________________________________
Gecode users mailing list
users at gecode.org
https://www.gecode.org/mailman/listinfo/gecode-users




From cipriano at dimi.uniud.it  Thu Feb 19 13:46:36 2009
From: cipriano at dimi.uniud.it (Raffaele Cipriano)
Date: Thu, 19 Feb 2009 13:46:36 +0100
Subject: [gecode-users] Static libraries of Gecode 2.2.0
In-Reply-To: <000001c9926f$b90c5c70$2b251550$@se>
References: <499CBE3A.5060304@dimi.uniud.it>
	<000001c9926f$b90c5c70$2b251550$@se>
Message-ID: <499D54AC.7090708@dimi.uniud.it>

Christian Schulte ha scritto:
> You have to specify the compilers. For cygwin, please install gcc-4 and its
> additional packages and then
>
> ./configure --enable-static CC=gcc-4 CXX=g++-4
>
>   
Thank you, I've done in this way and I've installed gecode correctly 
with static libraries.. but I have still problems in linking phase: I 
report an extracts of the error messages: What I'm doing wrong?

Thank you very much.

> Then, a tip: don't use gcc. Use cl instead, check the mailing list archives
> how to do that.
>
>   
Yes, I will try in the near future.. unfortunately now I need to work 
with Cygwin...

Cheers
Raffaele


**** Build of configuration Debug for project QueensGecode3 ****

make -k all
Building target: Queens.exe
Invoking: GCC C++ Linker
g++ -L/cygdrive/c/Programmi/gecode-2.2.0 -o"Queens.exe"  ./main.o  
./support/example.o ./support/options.o   -lgecodesupport -lgecodekernel 
-lgecodesearch -lgecodeint -lgecodeset -lgecodecpltset -lgecodeminimodel 
-lgecodeserialization

/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(exception.o):exception.cc:(.eh_frame+0x11): 
undefined reference to `___gxx_personality_v0'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o): In 
function `_Alloc_hider':
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/basic_string.h:253: 
undefined reference to `__Unwind_Resume'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o):/cygdrive/c/Programmi/gecode-2.2.0/gecode/support/symbol.cc:183: 
undefined reference to `__Unwind_Resume'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o): In 
function `free':
/cygdrive/c/Programmi/gecode-2.2.0/./gecode/support/memory.icc:98: 
undefined reference to `__Unwind_Resume'
/cygdrive/c/Programmi/gecode-2.2.0/./gecode/support/memory.icc:98: 
undefined reference to `__Unwind_Resume'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o): In 
function `__ostream_insert<char, std::char_traits<char> >':
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream_insert.h:115: 
undefined reference to `__Unwind_Resume'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o):/cygdrive/c/Programmi/gecode-2.2.0/gecode/support/symbol.cc:145: 
more undefined references to `__Unwind_Resume' follow
/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o): In 
function `_ZNSolsEi':
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:119: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >& std::basic_ostream<char, std::char_traits<char> 
 >::_M_insert<long>(long)'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o): In 
function `Symbol':
/cygdrive/c/Programmi/gecode-2.2.0/gecode/support/symbol.cc:138: 
undefined reference to `__Unwind_Resume'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o): In 
function `basic_stringstream':
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/sstream:511: undefined 
reference to `__Unwind_Resume'
[...]
/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o):symbol.cc:(.gcc_except_table+0x4e4): 
undefined reference to `typeinfo for __cxxabiv1::__forced_unwind'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o):symbol.cc:(.gcc_except_table+0x660): 
undefined reference to `typeinfo for __cxxabiv1::__forced_unwind'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o):symbol.cc:(.eh_frame+0x12): 
undefined reference to `___gxx_personality_v0'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodekernel.a(var-type.o):var-type.cc:(.eh_frame+0x11): 
undefined reference to `___gxx_personality_v0'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodekernel.a(core.o): In 
function `~Space':
/cygdrive/c/Programmi/gecode-2.2.0/gecode/kernel/core.cc:211: undefined 
reference to `__Unwind_Resume'
[...]
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/ostream:517: undefined 
reference to `std::basic_ostream<char, std::char_traits<char> >& 
std::__ostream_insert<char, std::char_traits<char> 
 >(std::basic_ostream<char, std::char_traits<char> >&, char const*, int)'
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/ostream:517: undefined 
reference to `std::basic_ostream<char, std::char_traits<char> >& 
std::__ostream_insert<char, std::char_traits<char> 
 >(std::basic_ostream<char, std::char_traits<char> >&, char const*, int)'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(dfa.o): In function 
`_ZNSolsEi':
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:119: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >& std::basic_ostream<char, std::char_traits<char> 
 >::_M_insert<long>(long)'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(dfa.o): In function 
`operator<< <std::char_traits<char> 
 >':/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/ostream:517: undefined 
reference to `std::basic_ostream<char, std::char_traits<char> >& 
std::__ostream_insert<char, std::char_traits<char> 
 >(std::basic_ostream<char, std::char_traits<char> >&, char const*, int)'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(dfa.o): In function 
`operator<< <std::char_traits<char> >':
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:119: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >& std::__ostream_insert<char, std::char_traits<char> 
 >(std::basic_ostream<char, std::char_traits<char> >&, char const*, int)'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(dfa.o): In function 
`_ZNSolsEi':
[..]
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(branch.o):/cygdrive/c/Programmi/gecode-2.2.0/./gecode/kernel/branching.icc:306: 
undefined reference to `__Unwind_Resume'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(branch.o):/cygdrive/c/Programmi/gecode-2.2.0/./gecode/kernel/branching.icc:306: 
undefined reference to `__Unwind_Resume'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(branch.o):/cygdrive/c/Programmi/gecode-2.2.0/./gecode/kernel/branching.icc:306: 
more undefined references to `__Unwind_Resume' follow
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(branch.o): In function 
`_ZNSolsEi':
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:119: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >& std::basic_ostream<char, std::char_traits<char> 
 >::_M_insert<long>(long)'
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:117: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >& std::basic_ostream<char, std::char_traits<char> 
 >::_M_insert<long>(long)'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(branch.o):/cygdrive/c/Programmi/gecode-2.2.0/./gecode/int/branch/select-val.icc:73: 
undefined reference to `__Unwind_Resume'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(branch.o): In function 
`basic_stringstream':
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/sstream:511: undefined 
reference to `__Unwind_Resume'
[...]
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:119: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >& std::basic_ostream<char, std::char_traits<char> 
 >::_M_insert<long>(long)'
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:117: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >& std::basic_ostream<char, std::char_traits<char> 
 >::_M_insert<long>(long)'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(int-set.o): In 
function `__ostream_insert<char, std::char_traits<char> >':
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream_insert.h:115: 
undefined reference to `__Unwind_Resume'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(int-set.o): In 
function `sentry':
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:232: 
undefined reference to `__Unwind_Resume'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(int-set.o):int-set.cc:(.gcc_except_table+0x1a0): 
undefined reference to `typeinfo for __cxxabiv1::__forced_unwind'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(int-set.o):int-set.cc:(.eh_frame+0x12): 
undefined reference to `___gxx_personality_v0'
collect2: ld returned 1 exit status
make: *** [Queens.exe] Error 1
make: Target `all' not remade because of errors.
Build complete for project QueensGecode3





From mmann at informatik.uni-freiburg.de  Thu Feb 19 15:05:35 2009
From: mmann at informatik.uni-freiburg.de (Martin Mann)
Date: Thu, 19 Feb 2009 15:05:35 +0100
Subject: [gecode-users] Static libraries of Gecode 2.2.0
In-Reply-To: <499D54AC.7090708@dimi.uniud.it>
References: <499CBE3A.5060304@dimi.uniud.it>	<000001c9926f$b90c5c70$2b251550$@se>
	<499D54AC.7090708@dimi.uniud.it>
Message-ID: <499D672F.10508@informatik.uni-freiburg.de>


Hi Raffaele,

the linker error you get might be about the order of the libraries. At 
least I had similar problems some time ago using cygwin and found some 
documentation on g++ that confirmed this.

Hope it helps,

Martin

Raffaele Cipriano schrieb:
> Christian Schulte ha scritto:
>> You have to specify the compilers. For cygwin, please install gcc-4 and its
>> additional packages and then
>>
>> ./configure --enable-static CC=gcc-4 CXX=g++-4
>>
>>   
> Thank you, I've done in this way and I've installed gecode correctly 
> with static libraries.. but I have still problems in linking phase: I 
> report an extracts of the error messages: What I'm doing wrong?
> 
> Thank you very much.
> 
>> Then, a tip: don't use gcc. Use cl instead, check the mailing list archives
>> how to do that.
>>
>>   
> Yes, I will try in the near future.. unfortunately now I need to work 
> with Cygwin...
> 
> Cheers
> Raffaele
> 
> 
> **** Build of configuration Debug for project QueensGecode3 ****
> 
> make -k all
> Building target: Queens.exe
> Invoking: GCC C++ Linker
> g++ -L/cygdrive/c/Programmi/gecode-2.2.0 -o"Queens.exe"  ./main.o  
> ./support/example.o ./support/options.o   -lgecodesupport -lgecodekernel 
> -lgecodesearch -lgecodeint -lgecodeset -lgecodecpltset -lgecodeminimodel 
> -lgecodeserialization
> 
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(exception.o):exception.cc:(.eh_frame+0x11): 
> undefined reference to `___gxx_personality_v0'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o): In 
> function `_Alloc_hider':
> /usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/basic_string.h:253: 
> undefined reference to `__Unwind_Resume'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o):/cygdrive/c/Programmi/gecode-2.2.0/gecode/support/symbol.cc:183: 
> undefined reference to `__Unwind_Resume'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o): In 
> function `free':
> /cygdrive/c/Programmi/gecode-2.2.0/./gecode/support/memory.icc:98: 
> undefined reference to `__Unwind_Resume'
> /cygdrive/c/Programmi/gecode-2.2.0/./gecode/support/memory.icc:98: 
> undefined reference to `__Unwind_Resume'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o): In 
> function `__ostream_insert<char, std::char_traits<char> >':
> /usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream_insert.h:115: 
> undefined reference to `__Unwind_Resume'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o):/cygdrive/c/Programmi/gecode-2.2.0/gecode/support/symbol.cc:145: 
> more undefined references to `__Unwind_Resume' follow
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o): In 
> function `_ZNSolsEi':
> /usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:119: 
> undefined reference to `std::basic_ostream<char, std::char_traits<char> 
>  >& std::basic_ostream<char, std::char_traits<char> 
>  >::_M_insert<long>(long)'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o): In 
> function `Symbol':
> /cygdrive/c/Programmi/gecode-2.2.0/gecode/support/symbol.cc:138: 
> undefined reference to `__Unwind_Resume'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o): In 
> function `basic_stringstream':
> /usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/sstream:511: undefined 
> reference to `__Unwind_Resume'
> [...]
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o):symbol.cc:(.gcc_except_table+0x4e4): 
> undefined reference to `typeinfo for __cxxabiv1::__forced_unwind'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o):symbol.cc:(.gcc_except_table+0x660): 
> undefined reference to `typeinfo for __cxxabiv1::__forced_unwind'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o):symbol.cc:(.eh_frame+0x12): 
> undefined reference to `___gxx_personality_v0'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodekernel.a(var-type.o):var-type.cc:(.eh_frame+0x11): 
> undefined reference to `___gxx_personality_v0'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodekernel.a(core.o): In 
> function `~Space':
> /cygdrive/c/Programmi/gecode-2.2.0/gecode/kernel/core.cc:211: undefined 
> reference to `__Unwind_Resume'
> [...]
> /usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/ostream:517: undefined 
> reference to `std::basic_ostream<char, std::char_traits<char> >& 
> std::__ostream_insert<char, std::char_traits<char> 
>  >(std::basic_ostream<char, std::char_traits<char> >&, char const*, int)'
> /usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/ostream:517: undefined 
> reference to `std::basic_ostream<char, std::char_traits<char> >& 
> std::__ostream_insert<char, std::char_traits<char> 
>  >(std::basic_ostream<char, std::char_traits<char> >&, char const*, int)'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(dfa.o): In function 
> `_ZNSolsEi':
> /usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:119: 
> undefined reference to `std::basic_ostream<char, std::char_traits<char> 
>  >& std::basic_ostream<char, std::char_traits<char> 
>  >::_M_insert<long>(long)'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(dfa.o): In function 
> `operator<< <std::char_traits<char> 
>  >':/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/ostream:517: undefined 
> reference to `std::basic_ostream<char, std::char_traits<char> >& 
> std::__ostream_insert<char, std::char_traits<char> 
>  >(std::basic_ostream<char, std::char_traits<char> >&, char const*, int)'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(dfa.o): In function 
> `operator<< <std::char_traits<char> >':
> /usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:119: 
> undefined reference to `std::basic_ostream<char, std::char_traits<char> 
>  >& std::__ostream_insert<char, std::char_traits<char> 
>  >(std::basic_ostream<char, std::char_traits<char> >&, char const*, int)'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(dfa.o): In function 
> `_ZNSolsEi':
> [..]
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(branch.o):/cygdrive/c/Programmi/gecode-2.2.0/./gecode/kernel/branching.icc:306: 
> undefined reference to `__Unwind_Resume'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(branch.o):/cygdrive/c/Programmi/gecode-2.2.0/./gecode/kernel/branching.icc:306: 
> undefined reference to `__Unwind_Resume'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(branch.o):/cygdrive/c/Programmi/gecode-2.2.0/./gecode/kernel/branching.icc:306: 
> more undefined references to `__Unwind_Resume' follow
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(branch.o): In function 
> `_ZNSolsEi':
> /usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:119: 
> undefined reference to `std::basic_ostream<char, std::char_traits<char> 
>  >& std::basic_ostream<char, std::char_traits<char> 
>  >::_M_insert<long>(long)'
> /usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:117: 
> undefined reference to `std::basic_ostream<char, std::char_traits<char> 
>  >& std::basic_ostream<char, std::char_traits<char> 
>  >::_M_insert<long>(long)'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(branch.o):/cygdrive/c/Programmi/gecode-2.2.0/./gecode/int/branch/select-val.icc:73: 
> undefined reference to `__Unwind_Resume'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(branch.o): In function 
> `basic_stringstream':
> /usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/sstream:511: undefined 
> reference to `__Unwind_Resume'
> [...]
> /usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:119: 
> undefined reference to `std::basic_ostream<char, std::char_traits<char> 
>  >& std::basic_ostream<char, std::char_traits<char> 
>  >::_M_insert<long>(long)'
> /usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:117: 
> undefined reference to `std::basic_ostream<char, std::char_traits<char> 
>  >& std::basic_ostream<char, std::char_traits<char> 
>  >::_M_insert<long>(long)'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(int-set.o): In 
> function `__ostream_insert<char, std::char_traits<char> >':
> /usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream_insert.h:115: 
> undefined reference to `__Unwind_Resume'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(int-set.o): In 
> function `sentry':
> /usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:232: 
> undefined reference to `__Unwind_Resume'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(int-set.o):int-set.cc:(.gcc_except_table+0x1a0): 
> undefined reference to `typeinfo for __cxxabiv1::__forced_unwind'
> /cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(int-set.o):int-set.cc:(.eh_frame+0x12): 
> undefined reference to `___gxx_personality_v0'
> collect2: ld returned 1 exit status
> make: *** [Queens.exe] Error 1
> make: Target `all' not remade because of errors.
> Build complete for project QueensGecode3
> 
> 
> 
> _______________________________________________
> Gecode users mailing list
> users at gecode.org
> https://www.gecode.org/mailman/listinfo/gecode-users

-- 
Martin Mann, Dipl. Bioinf.
Bioinformatics - Inst. of Computer Science
Albert-Ludwigs-University Freiburg
Tel: ++49-761-203-8259
Fax: ++49-761-203-7462
http://www.bioinf.uni-freiburg.de/~mmann/



From cschulte at kth.se  Thu Feb 19 18:39:14 2009
From: cschulte at kth.se (Christian Schulte)
Date: Thu, 19 Feb 2009 18:39:14 +0100
Subject: [gecode-users] new C++ library database
In-Reply-To: <20090216201033.GD31670@cs-wsok.swansea.ac.uk>
References: <20090216201033.GD31670@cs-wsok.swansea.ac.uk>
Message-ID: <003301c992b8$fc466780$f4d33680$@se>

Thanks for the link but I think I rather decline. There are too many
directories on the web already ;-)

Rather miss out on one than having outdated information everywhere.

Sorry and thanks again
Christian

--
Christian Schulte, www.it.kth.se/~cschulte/


-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Oliver Kullmann
Sent: Monday, February 16, 2009 9:11 PM
To: users at gecode.org
Subject: [gecode-users] new C++ library database

Hello,

hopefully the link

http://c-plusplus.org/

is useful: This aims at providing
the much needed links to all those C++
libraries out there.

I propose Gecode also puts a link there
(yet there are topics "Algorithms, Bioinformatics, Cryptography,
Mathematics";
one could have links for Gecode in Algorithms and Mathematics, but
likely a new category like "Constraint Processing" would be good).

Oliver

-- 
Dr. Oliver Kullmann
Computer Science Department
Swansea University
Faraday Building, Singleton Park
Swansea SA2 8PP, UK
http://cs.swan.ac.uk/~csoliver/

_______________________________________________
Gecode users mailing list
users at gecode.org
https://www.gecode.org/mailman/listinfo/gecode-users




From cschulte at kth.se  Thu Feb 19 19:05:58 2009
From: cschulte at kth.se (Christian Schulte)
Date: Thu, 19 Feb 2009 19:05:58 +0100
Subject: [gecode-users] Static libraries of Gecode 2.2.0
In-Reply-To: <499D54AC.7090708@dimi.uniud.it>
References: <499CBE3A.5060304@dimi.uniud.it>	<000001c9926f$b90c5c70$2b251550$@se>
	<499D54AC.7090708@dimi.uniud.it>
Message-ID: <004a01c992bc$b7e47740$27ad65c0$@se>

Sorry, I just tested, but Gecode builds fine, including the examples!

Please use the libraries in the order as they are used when the Gecode
examples are built!

Christian

--
Christian Schulte, www.it.kth.se/~cschulte/


-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Raffaele Cipriano
Sent: Thursday, February 19, 2009 1:47 PM
To: Christian Schulte
Cc: 'gecode user list'
Subject: Re: [gecode-users] Static libraries of Gecode 2.2.0

Christian Schulte ha scritto:
> You have to specify the compilers. For cygwin, please install gcc-4 and
its
> additional packages and then
>
> ./configure --enable-static CC=gcc-4 CXX=g++-4
>
>   
Thank you, I've done in this way and I've installed gecode correctly 
with static libraries.. but I have still problems in linking phase: I 
report an extracts of the error messages: What I'm doing wrong?

Thank you very much.

> Then, a tip: don't use gcc. Use cl instead, check the mailing list
archives
> how to do that.
>
>   
Yes, I will try in the near future.. unfortunately now I need to work 
with Cygwin...

Cheers
Raffaele


**** Build of configuration Debug for project QueensGecode3 ****

make -k all
Building target: Queens.exe
Invoking: GCC C++ Linker
g++ -L/cygdrive/c/Programmi/gecode-2.2.0 -o"Queens.exe"  ./main.o  
./support/example.o ./support/options.o   -lgecodesupport -lgecodekernel 
-lgecodesearch -lgecodeint -lgecodeset -lgecodecpltset -lgecodeminimodel 
-lgecodeserialization

/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(exception.o):exception
.cc:(.eh_frame+0x11): 
undefined reference to `___gxx_personality_v0'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o): In 
function `_Alloc_hider':
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/basic_string.h:253: 
undefined reference to `__Unwind_Resume'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o):/cygdrive/c/
Programmi/gecode-2.2.0/gecode/support/symbol.cc:183: 
undefined reference to `__Unwind_Resume'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o): In 
function `free':
/cygdrive/c/Programmi/gecode-2.2.0/./gecode/support/memory.icc:98: 
undefined reference to `__Unwind_Resume'
/cygdrive/c/Programmi/gecode-2.2.0/./gecode/support/memory.icc:98: 
undefined reference to `__Unwind_Resume'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o): In 
function `__ostream_insert<char, std::char_traits<char> >':
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream_insert.h:115: 
undefined reference to `__Unwind_Resume'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o):/cygdrive/c/
Programmi/gecode-2.2.0/gecode/support/symbol.cc:145: 
more undefined references to `__Unwind_Resume' follow
/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o): In 
function `_ZNSolsEi':
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:119: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >& std::basic_ostream<char, std::char_traits<char> 
 >::_M_insert<long>(long)'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o): In 
function `Symbol':
/cygdrive/c/Programmi/gecode-2.2.0/gecode/support/symbol.cc:138: 
undefined reference to `__Unwind_Resume'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o): In 
function `basic_stringstream':
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/sstream:511: undefined 
reference to `__Unwind_Resume'
[...]
/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o):symbol.cc:(.
gcc_except_table+0x4e4): 
undefined reference to `typeinfo for __cxxabiv1::__forced_unwind'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o):symbol.cc:(.
gcc_except_table+0x660): 
undefined reference to `typeinfo for __cxxabiv1::__forced_unwind'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodesupport.a(symbol.o):symbol.cc:(.
eh_frame+0x12): 
undefined reference to `___gxx_personality_v0'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodekernel.a(var-type.o):var-type.cc
:(.eh_frame+0x11): 
undefined reference to `___gxx_personality_v0'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodekernel.a(core.o): In 
function `~Space':
/cygdrive/c/Programmi/gecode-2.2.0/gecode/kernel/core.cc:211: undefined 
reference to `__Unwind_Resume'
[...]
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/ostream:517: undefined 
reference to `std::basic_ostream<char, std::char_traits<char> >& 
std::__ostream_insert<char, std::char_traits<char> 
 >(std::basic_ostream<char, std::char_traits<char> >&, char const*, int)'
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/ostream:517: undefined 
reference to `std::basic_ostream<char, std::char_traits<char> >& 
std::__ostream_insert<char, std::char_traits<char> 
 >(std::basic_ostream<char, std::char_traits<char> >&, char const*, int)'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(dfa.o): In function 
`_ZNSolsEi':
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:119: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >& std::basic_ostream<char, std::char_traits<char> 
 >::_M_insert<long>(long)'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(dfa.o): In function 
`operator<< <std::char_traits<char> 
 >':/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/ostream:517: undefined 
reference to `std::basic_ostream<char, std::char_traits<char> >& 
std::__ostream_insert<char, std::char_traits<char> 
 >(std::basic_ostream<char, std::char_traits<char> >&, char const*, int)'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(dfa.o): In function 
`operator<< <std::char_traits<char> >':
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:119: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >& std::__ostream_insert<char, std::char_traits<char> 
 >(std::basic_ostream<char, std::char_traits<char> >&, char const*, int)'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(dfa.o): In function 
`_ZNSolsEi':
[..]
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(branch.o):/cygdrive/c/Prog
rammi/gecode-2.2.0/./gecode/kernel/branching.icc:306: 
undefined reference to `__Unwind_Resume'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(branch.o):/cygdrive/c/Prog
rammi/gecode-2.2.0/./gecode/kernel/branching.icc:306: 
undefined reference to `__Unwind_Resume'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(branch.o):/cygdrive/c/Prog
rammi/gecode-2.2.0/./gecode/kernel/branching.icc:306: 
more undefined references to `__Unwind_Resume' follow
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(branch.o): In function 
`_ZNSolsEi':
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:119: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >& std::basic_ostream<char, std::char_traits<char> 
 >::_M_insert<long>(long)'
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:117: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >& std::basic_ostream<char, std::char_traits<char> 
 >::_M_insert<long>(long)'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(branch.o):/cygdrive/c/Prog
rammi/gecode-2.2.0/./gecode/int/branch/select-val.icc:73: 
undefined reference to `__Unwind_Resume'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(branch.o): In function 
`basic_stringstream':
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/sstream:511: undefined 
reference to `__Unwind_Resume'
[...]
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:119: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >& std::basic_ostream<char, std::char_traits<char> 
 >::_M_insert<long>(long)'
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:117: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >& std::basic_ostream<char, std::char_traits<char> 
 >::_M_insert<long>(long)'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(int-set.o): In 
function `__ostream_insert<char, std::char_traits<char> >':
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream_insert.h:115: 
undefined reference to `__Unwind_Resume'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(int-set.o): In 
function `sentry':
/usr/lib/gcc/i686-pc-cygwin/4.3.2/include/c++/bits/ostream.tcc:232: 
undefined reference to `__Unwind_Resume'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(int-set.o):int-set.cc:(.gc
c_except_table+0x1a0): 
undefined reference to `typeinfo for __cxxabiv1::__forced_unwind'
/cygdrive/c/Programmi/gecode-2.2.0/libgecodeint.a(int-set.o):int-set.cc:(.eh
_frame+0x12): 
undefined reference to `___gxx_personality_v0'
collect2: ld returned 1 exit status
make: *** [Queens.exe] Error 1
make: Target `all' not remade because of errors.
Build complete for project QueensGecode3



_______________________________________________
Gecode users mailing list
users at gecode.org
https://www.gecode.org/mailman/listinfo/gecode-users




From cschulte at kth.se  Mon Feb 23 16:11:54 2009
From: cschulte at kth.se (Christian Schulte)
Date: Mon, 23 Feb 2009 16:11:54 +0100
Subject: [gecode-users] Question about branching
In-Reply-To: <200902131754.41177.Vincent.Barichard@univ-angers.fr>
References: <200902091410.57732.Vincent.Barichard@univ-angers.fr>
	<200902102202.51782.Vincent.Barichard@univ-angers.fr>
	<009c01c98dbe$02f20d50$08d627f0$@se>
	<200902131754.41177.Vincent.Barichard@univ-angers.fr>
Message-ID: <00be01c995c9$10df6210$329e2630$@se>

Hi, I just added two iterators Space::Propagators and Space::Branchings with
the obvious semantic to the trunk. 

Cheers
Christian

--
Christian Schulte, www.it.kth.se/~cschulte/


-----Original Message-----
From: Vincent Barichard [mailto:Vincent.Barichard at univ-angers.fr] 
Sent: Friday, February 13, 2009 5:55 PM
To: Christian Schulte
Cc: users at gecode.org
Subject: Re: [gecode-users] Question about branching

Hi Christian,

Le vendredi 13 f?vrier 2009 10:32:36 Christian Schulte, vous avez ?crit :
> Hi Vincent,
>
> would the following help: There will be two iterators Space::Propagators
> and Space::Branchings that iterate over all propagators or branchings of a
> space? Would be enough if they would just give const access?
>

A const access should be sufficient. It will be very convenient to be able
to 
parse propagators and branchings :-)

> Your patch is wrong. The update function does everything thats needed. Or
> did you have a problem there?
>

Indeed, I encountered a problem. I designed a propagator which uses
advisors. 
Sometimes afer cloning, Gecode crashed. The debugger tells me that the crash

occured in the Council<A>::update function of my propagator and Valgrind
said 
that there is some uninitialized variables. 
After reading the code, I saw that the field named "advisors" in the
Council<A> 
class is set to NULL in only one constructor. Furthermore, there is no
recopy 
constructor, so when cloning, a bad value may be copied in the "advisors"
field 
of the clone, and the variable "c.advisors" in the Council<A>::update
function 
may  not been correctly initialized.
After putting "co(home)" in the recopy constructor of my propagator, 
everything go well, so I thought it was the same problem for the 
SpeedLinBoolInt propagator. I probably thought wrong, sorry.

Cheers,
Vincent


> Cheers
> Christian
>
> --
> Christian Schulte, www.ict.kth.se/~cschulte/
>
>
> -----Original Message-----
> From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
> Of Vincent Barichard
> Sent: Tuesday, February 10, 2009 10:03 PM
> To: Christian Schulte
> Cc: users at gecode.org
> Subject: Re: [gecode-users] Question about branching
>
> Hi,
>
> Le mardi 10 f?vrier 2009 14:52:37 Christian Schulte, vous avez ?crit :
> > Hi,
> >
> > no there is no way to find the x, in particular as some branchings
> > might not have an array of variables.
>
> I wasn't sure but I suspected it.
>
> > There is not even the notion of a current branching (there are two
> > current
> > branchings: one that is used for status() and the other that is used
> > for
> > commit() during recomputation).
> >
> > Branchings are designed to just implement a particular interface that's
>
> it.
>
>
> It is not completely clear for me. I will look more further in the code.
>
> > Maybe you tell us what you want to do?
>
> I have created a new variable type and I want to do backjumping on the
> search tree. So I need to access to the variable of the BranchingDesc to
> know if I must to skip the BranchingDesc or not. After reading your mail,
I
> decided to create sub-class of ViewValBranching and PosValDesc to get the
> information I need. Here comes a piece of the code I wrote in my search
> engine:
>
>               const BranchingDesc * bd;
>               int noAlt;
>               int noClosedDesc;
>               QBool::QBoolQuant quant;
>               do
>               {
>                 bd = rcs.nextDesc< QBool::QBoolPosValDesc<2>
>
> >(*this,noAlt,noClosedDesc);
>
>                 if (bd == NULL) return NULL;
>                 quant = static_cast<const QBool::QBoolPosValDesc<2>*>(bd)-
>
> >quantifier();
>
>               } while (quant != QBool::QBoolVarImp::EXISTS);
>
>               delete cur;
>               cur = rcs.recompute<false>(d,*this);
>               EngineCtrl::current(cur);
>
> Sometimes, the line:
> "              } while (quant != QBool::QBoolVarImp::EXISTS);"
> changes, so I have to dynamically ask the variable of the BranchingDesc
> what is its quantifier.
>
> The problem here is that I have to assume that it is a
> QBool::QBoolPosValDesc<2> BranchingDesc and to cast it.
> I would like to test if it is a QBool::QBoolPosValDesc<2> and if it is the
> case, to test its quantifier.
>
> > Then, reflection will be gone (see my next mail as to why) and there
> > is currently no way to get the actors (unless you iterate over the
> > list of actors, check how the function propagators() counting the
> > number of propagators is implemented).
>
> I looked at propagators(), but It needs "pc" being public or protected in
> order to use it in our subclass of Space.
>
> Another thing, I am not sure it's a small bug or not, but I found that the
> "co" field of SpeedLinBoolInt is not initialized during cloning. As a
> result, the update function of Council<A> may not ends. I attached a patch
> in the mail.
>
> Thank you for your help.
> Cheers,
> Vincent

-- 
Vincent Barichard        Universit? d'Angers (LERIA)
Tel: 02 41 73 52 06      D?partement Informatique
Fax: 02 41 73 50 73      H203




From paranoic.pum at gmail.com  Tue Feb 24 17:23:44 2009
From: paranoic.pum at gmail.com (David Przybilla)
Date: Tue, 24 Feb 2009 17:23:44 +0100
Subject: [gecode-users] another question about stats
Message-ID: <fb1020c60902240823w544601e6j8ae1199e907736a4@mail.gmail.com>

I made a small testing sample, I made a simple propagator and some variables
subscribing to it.
Inside the propagate method there is a usleep line, which is supposed to
delay the execution for some seconds.
When I run the example, the delay is there, however when  stats are shown,
they say the example`s runtime was 0ms.
what does "runtime" measure? am I doing  anything wrong?
Also, Im making performance comparisons between some programs on Gecode old
versions and between the same ones on Gecode 2.1.1,
I wonder whether I should  measure the time on my own or just use the
runtime thrown by gecode`s stats

Thank you in advance!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20090224/0da89249/attachment.htm>

From cschulte at kth.se  Tue Feb 24 17:33:41 2009
From: cschulte at kth.se (Christian Schulte)
Date: Tue, 24 Feb 2009 17:33:41 +0100
Subject: [gecode-users] another question about stats
In-Reply-To: <fb1020c60902240823w544601e6j8ae1199e907736a4@mail.gmail.com>
References: <fb1020c60902240823w544601e6j8ae1199e907736a4@mail.gmail.com>
Message-ID: <004b01c9969d$a7e6c340$f7b449c0$@se>

Actually, that is weird as in the examples also setup time is measured. But
I fear you have to chip in some more detail what you do.

 

The runtime between 1* and 2* should be roughly the same (why do you compare
one old version against another old version, 2.1.1 is not the latest). But
the statistics can be trusted, we use it all the time and we know that it
does not deviate from the OS measures.

 

Christian

 

--

Christian Schulte, www.it.kth.se/~cschulte/

 

From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of David Przybilla
Sent: Tuesday, February 24, 2009 5:24 PM
To: users at gecode.org
Subject: [gecode-users] another question about stats

 

I made a small testing sample, I made a simple propagator and some variables
subscribing to it.
Inside the propagate method there is a usleep line, which is supposed to
delay the execution for some seconds.
When I run the example, the delay is there, however when  stats are shown,
they say the example`s runtime was 0ms.
what does "runtime" measure? am I doing  anything wrong?
Also, Im making performance comparisons between some programs on Gecode old
versions and between the same ones on Gecode 2.1.1,
I wonder whether I should  measure the time on my own or just use the
runtime thrown by gecode`s stats

Thank you in advance!

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20090224/98e5027c/attachment.htm>

From paranoic.pum at gmail.com  Wed Feb 25 15:05:47 2009
From: paranoic.pum at gmail.com (David Przybilla)
Date: Wed, 25 Feb 2009 15:05:47 +0100
Subject: [gecode-users] another question about stats
In-Reply-To: <004b01c9969d$a7e6c340$f7b449c0$@se>
References: <fb1020c60902240823w544601e6j8ae1199e907736a4@mail.gmail.com>
	<004b01c9969d$a7e6c340$f7b449c0$@se>
Message-ID: <fb1020c60902250605o33e826f1p3b0b40b210ab5bb4@mail.gmail.com>

Sorry I just clicked "Answer" Button and didnt notice the email was sent to
your personal email.
I know it is not the latest,however I need to work on 2.1.1..sorry about the
downgrade :) thank you for the fast answer..
here is the whole code, it is just one file:

#include "gecode/minimodel.hh"
>> #include "gecode/examples/support.hh"
>>
>> using namespace Gecode;
>>
>> class MiPropagador: public
>> Gecode::UnaryPropagator<Gecode::Int::IntView,Gecode::Int::PC_INT_DOM>
>> {
>>
>> public:
>>
>>      Actor*    copy(Space* home,bool share){
>>        return new (home) MiPropagador(home,share,*this);
>>      }
>>
>>       PropCost  cost(void) const {
>>         return PC_UNARY_LO;
>>       }
>>
>>
>>      MiPropagador(Space* home, bool share, MiPropagador&
>> p):Gecode::UnaryPropagator<Gecode::Int::IntView,Gecode::Int::PC_INT_DOM>(home,share,p){}
>>
>>      MiPropagador(Space* home, Gecode::Int::IntView
>> x):Gecode::UnaryPropagator<Gecode::Int::IntView,Gecode::Int::PC_INT_DOM>(home,x){}
>>
>>      Gecode::ExecStatus propagate(Space *home, Gecode::ModEventDelta med){
>>          usleep(1000000); // works on linux, it is supposed to delay
>> execution for a second
>>          std::cout<<"The propagator has been called!"<<std::endl;
>>          GECODE_ME_CHECK(x0.gq(home,0));
>>          return Gecode::ES_NOFIX;
>>      }
>>
>>
>>
>> };
>>
>>
>> Gecode::ExecStatus positiva(Space* home,Gecode::Int::IntView x)
>>   {
>>        (void) new (home) MiPropagador(home,x);
>>        return Gecode::ES_OK;
>>   };
>>
>> class EjemploPropagador: public Example {
>>         private:
>>              IntVarArray a;
>>         public:
>>
>>             EjemploPropagador(const Options& opt): a(this,2,-10,10){
>>
>>                        post(this,a[1]==a[0]+2);
>>                        positiva(this,a[0]);
>>                        positiva(this,a[1]);
>>
>> Gecode::branch(this,a,Gecode::INT_VAR_NONE,Gecode::INT_VAL_MIN );
>>
>>                 }
>>
>>             EjemploPropagador(bool share, EjemploPropagador& s) :
>> Example(share,s){
>>                         a.update(this, share, s.a);
>>                 }
>>
>>                 virtual Space*
>>                         copy(bool share) {
>>                                 return new EjemploPropagador(share,*this);
>>                         }
>>
>>                 virtual void
>>                         print(std::ostream &os) {
>>                                 std::cout << "\a = " << a << std::endl;
>>                         }
>> };
>>
>>
>>
>> int  main(int argc, char** argv) {
>>
>>   SizeOptions opt("EjemploPropagador");
>>   opt.icl( ICL_DOM);
>>   opt.solutions ( 0);
>>   opt.parse(argc,argv);
>>   Example::run<EjemploPropagador,DFS>(opt);
>>
>>   return 0;
>> }
>>
>
The result I get is:

Initial
>>         propagators:   3
>>         branchings:    1
>>
>> Summary
>>         runtime:       0.000 (0.000000 ms)
>>         solutions:     9
>>         propagations:  54
>>         failures:      0
>>         clones:        8
>>         commits:       16
>>         peak memory:   10 KB
>>
>
however it takes more than 0.0ms to complete execution.

Regards, David


2009/2/24 Christian Schulte <cschulte at kth.se>

>  Actually, that is weird as in the examples also setup time is measured.
> But I fear you have to chip in some more detail what you do.
>
>
>
> The runtime between 1* and 2* should be roughly the same (why do you
> compare one old version against another old version, 2.1.1 is not the
> latest). But the statistics can be trusted, we use it all the time and we
> know that it does not deviate from the OS measures.
>
>
>
> Christian
>
>
>
> --
>
> Christian Schulte, www.it.kth.se/~cschulte/<http://www.it.kth.se/%7Ecschulte/>
>
>
>
> *From:* users-bounces at gecode.org [mailto:users-bounces at gecode.org] *On
> Behalf Of *David Przybilla
> *Sent:* Tuesday, February 24, 2009 5:24 PM
> *To:* users at gecode.org
> *Subject:* [gecode-users] another question about stats
>
>
>
> I made a small testing sample, I made a simple propagator and some
> variables subscribing to it.
> Inside the propagate method there is a usleep line, which is supposed to
> delay the execution for some seconds.
> When I run the example, the delay is there, however when  stats are shown,
> they say the example`s runtime was 0ms.
> what does "runtime" measure? am I doing  anything wrong?
> Also, Im making performance comparisons between some programs on Gecode old
> versions and between the same ones on Gecode 2.1.1,
> I wonder whether I should  measure the time on my own or just use the
> runtime thrown by gecode`s stats
>
> Thank you in advance!
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20090225/18e233ea/attachment.htm>

From cschulte at kth.se  Wed Feb 25 16:57:09 2009
From: cschulte at kth.se (Christian Schulte)
Date: Wed, 25 Feb 2009 16:57:09 +0100
Subject: [gecode-users] another question about stats
In-Reply-To: <fb1020c60902250605o33e826f1p3b0b40b210ab5bb4@mail.gmail.com>
References: <fb1020c60902240823w544601e6j8ae1199e907736a4@mail.gmail.com>	<004b01c9969d$a7e6c340$f7b449c0$@se>
	<fb1020c60902250605o33e826f1p3b0b40b210ab5bb4@mail.gmail.com>
Message-ID: <00bb01c99761$b7c1e7d0$2745b770$@se>

Sorry, I currently have no access to linux but tried it under windows (by
using the windows variant of sleep). It works perfectly for me, even for
2.1.1. Then I googled usleep and suggest that you read the usleep manpage as
well. That might be the problem (the number might be too large).

 

Christian

 

--

Christian Schulte, www.it.kth.se/~cschulte/

 

From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of David Przybilla
Sent: Wednesday, February 25, 2009 3:06 PM
To: users at gecode.org
Subject: Re: [gecode-users] another question about stats

 

Sorry I just clicked "Answer" Button and didnt notice the email was sent to
your personal email.
I know it is not the latest,however I need to work on 2.1.1..sorry about the
downgrade :) thank you for the fast answer..
here is the whole code, it is just one file:

#include "gecode/minimodel.hh"
#include "gecode/examples/support.hh"
 
using namespace Gecode;

class MiPropagador: public
Gecode::UnaryPropagator<Gecode::Int::IntView,Gecode::Int::PC_INT_DOM>
{

public:

     Actor*    copy(Space* home,bool share){
       return new (home) MiPropagador(home,share,*this);
     }
    
      PropCost  cost(void) const {
        return PC_UNARY_LO;
      }


     MiPropagador(Space* home, bool share, MiPropagador&
p):Gecode::UnaryPropagator<Gecode::Int::IntView,Gecode::Int::PC_INT_DOM>(hom
e,share,p){}
     
     MiPropagador(Space* home, Gecode::Int::IntView
x):Gecode::UnaryPropagator<Gecode::Int::IntView,Gecode::Int::PC_INT_DOM>(hom
e,x){}
     
     Gecode::ExecStatus propagate(Space *home, Gecode::ModEventDelta med){
         usleep(1000000); // works on linux, it is supposed to delay
execution for a second
         std::cout<<"The propagator has been called!"<<std::endl;
         GECODE_ME_CHECK(x0.gq(home,0));
         return Gecode::ES_NOFIX; 
     }
      
      
      
};


Gecode::ExecStatus positiva(Space* home,Gecode::Int::IntView x)
  {
       (void) new (home) MiPropagador(home,x);
       return Gecode::ES_OK;
  };

class EjemploPropagador: public Example {
        private: 
             IntVarArray a;
        public:
                
            EjemploPropagador(const Options& opt): a(this,2,-10,10){ 
                       
                       post(this,a[1]==a[0]+2);
                       positiva(this,a[0]);
                       positiva(this,a[1]);
 
Gecode::branch(this,a,Gecode::INT_VAR_NONE,Gecode::INT_VAL_MIN );
                                   
                } 
           
            EjemploPropagador(bool share, EjemploPropagador& s) :
Example(share,s){
                        a.update(this, share, s.a);
                }
              
                virtual Space*
                        copy(bool share) {
                                return new EjemploPropagador(share,*this);
                        }
                
                virtual void
                        print(std::ostream &os) {
                                std::cout << "\a = " << a << std::endl;
                        }
};



int  main(int argc, char** argv) {

  SizeOptions opt("EjemploPropagador");
  opt.icl( ICL_DOM);
  opt.solutions ( 0);
  opt.parse(argc,argv);
  Example::run<EjemploPropagador,DFS>(opt);

  return 0;
}


The result I get is:

Initial
        propagators:   3
        branchings:    1

Summary
        runtime:       0.000 (0.000000 ms)
        solutions:     9
        propagations:  54
        failures:      0
        clones:        8
        commits:       16
        peak memory:   10 KB


however it takes more than 0.0ms to complete execution.

Regards, David



2009/2/24 Christian Schulte <cschulte at kth.se>

Actually, that is weird as in the examples also setup time is measured. But
I fear you have to chip in some more detail what you do.

 

The runtime between 1* and 2* should be roughly the same (why do you compare
one old version against another old version, 2.1.1 is not the latest). But
the statistics can be trusted, we use it all the time and we know that it
does not deviate from the OS measures.

 

Christian

 

--

Christian Schulte, www.it.kth.se/~cschulte/
<http://www.it.kth.se/%7Ecschulte/> 

 

From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of David Przybilla
Sent: Tuesday, February 24, 2009 5:24 PM
To: users at gecode.org
Subject: [gecode-users] another question about stats

 

I made a small testing sample, I made a simple propagator and some variables
subscribing to it.
Inside the propagate method there is a usleep line, which is supposed to
delay the execution for some seconds.
When I run the example, the delay is there, however when  stats are shown,
they say the example`s runtime was 0ms.
what does "runtime" measure? am I doing  anything wrong?
Also, Im making performance comparisons between some programs on Gecode old
versions and between the same ones on Gecode 2.1.1,
I wonder whether I should  measure the time on my own or just use the
runtime thrown by gecode`s stats

Thank you in advance!

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20090225/4b8a8050/attachment.htm>

From malcolmr at cse.unsw.edu.au  Thu Feb 26 08:47:29 2009
From: malcolmr at cse.unsw.edu.au (Malcolm Ryan)
Date: Thu, 26 Feb 2009 18:47:29 +1100
Subject: [gecode-users] Gist printing tabs
Message-ID: <65C15DB9-22DB-4877-B264-413C3871F2B9@cse.unsw.edu.au>

I'm using Gist in Gecode 2.2.0 on the Mac (OS X 1.5). I have found  
that tabs don't print in the Gist Console, which means that it is  
difficult to format large tables of variables. Could you please look  
into this?

Thanks,

Malcolm 



From tack at ps.uni-sb.de  Thu Feb 26 12:45:35 2009
From: tack at ps.uni-sb.de (Guido Tack)
Date: Thu, 26 Feb 2009 22:45:35 +1100
Subject: [gecode-users] Gist printing tabs
In-Reply-To: <65C15DB9-22DB-4877-B264-413C3871F2B9@cse.unsw.edu.au>
References: <65C15DB9-22DB-4877-B264-413C3871F2B9@cse.unsw.edu.au>
Message-ID: <AD397884-C94D-4CDE-8BAF-CC4E69D87B00@ps.uni-sb.de>

Thanks for the report, it's now on my agenda and I hope I'll be able  
to fix it for 3.0.

Cheers,
	Guido

Malcolm Ryan wrote:

> I'm using Gist in Gecode 2.2.0 on the Mac (OS X 1.5). I have found
> that tabs don't print in the Gist Console, which means that it is
> difficult to format large tables of variables. Could you please look
> into this?
>
> Thanks,
>
> Malcolm
>
> _______________________________________________
> Gecode users mailing list
> users at gecode.org
> https://www.gecode.org/mailman/listinfo/gecode-users




From tack at ps.uni-sb.de  Thu Feb 26 23:32:01 2009
From: tack at ps.uni-sb.de (Guido Tack)
Date: Fri, 27 Feb 2009 09:32:01 +1100
Subject: [gecode-users] Gist printing tabs
In-Reply-To: <AD397884-C94D-4CDE-8BAF-CC4E69D87B00@ps.uni-sb.de>
References: <65C15DB9-22DB-4877-B264-413C3871F2B9@cse.unsw.edu.au>
	<AD397884-C94D-4CDE-8BAF-CC4E69D87B00@ps.uni-sb.de>
Message-ID: <255A9F5B-D755-49DE-994A-29766198849E@ps.uni-sb.de>

That was a stupid one, I just hadn't understood that the tab stop  
width is measured in pixels, not characters...  It's fixed now.

Cheers,
	Guido

Guido Tack wrote:

> Thanks for the report, it's now on my agenda and I hope I'll be able
> to fix it for 3.0.
>
> Cheers,
> 	Guido
>
> Malcolm Ryan wrote:
>
>> I'm using Gist in Gecode 2.2.0 on the Mac (OS X 1.5). I have found
>> that tabs don't print in the Gist Console, which means that it is
>> difficult to format large tables of variables. Could you please look
>> into this?
>>
>> Thanks,
>>
>> Malcolm
>>
>> _______________________________________________
>> Gecode users mailing list
>> users at gecode.org
>> https://www.gecode.org/mailman/listinfo/gecode-users
>
>
> _______________________________________________
> Gecode users mailing list
> users at gecode.org
> https://www.gecode.org/mailman/listinfo/gecode-users




From zayenz at kth.se  Fri Feb 27 15:15:21 2009
From: zayenz at kth.se (Mikael Zayenz Lagerkvist)
Date: Fri, 27 Feb 2009 15:15:21 +0100
Subject: [gecode-users] another question about stats
In-Reply-To: <fb1020c60902240823w544601e6j8ae1199e907736a4@mail.gmail.com>
References: <fb1020c60902240823w544601e6j8ae1199e907736a4@mail.gmail.com>
Message-ID: <63b5c8b00902270615h283f085fucf4cadb7527e0d1d@mail.gmail.com>

Hi,

The time is measured using the clock() POSIX function, which measures
the elapsed CPU-time of the process that calls it. Calling usleep does
not put the process into a busy-loop (and thus incurring CPU-time), it
just delays the scheduling of that process. Compare the reported
runtime with running your program using the time wrapper command to
see the wall-clock time, user time, and kernel time.

If the program is busy (i.e., not calling functions such as usleep)
and is running on an otherwise unloaded machine, wall-clock time and
CPU-time will be roughly equal.

Cheers,
Mikael

On Tue, Feb 24, 2009 at 5:23 PM, David Przybilla <paranoic.pum at gmail.com> wrote:
> I made a small testing sample, I made a simple propagator and some variables
> subscribing to it.
> Inside the propagate method there is a usleep line, which is supposed to
> delay the execution for some seconds.
> When I run the example, the delay is there, however when? stats are shown,
> they say the example`s runtime was 0ms.
> what does "runtime" measure? am I doing? anything wrong?
> Also, Im making performance comparisons between some programs on Gecode old
> versions and between the same ones on Gecode 2.1.1,
> I wonder whether I should? measure the time on my own or just use the
> runtime thrown by gecode`s stats
>
> Thank you in advance!
>
> _______________________________________________
> Gecode users mailing list
> users at gecode.org
> https://www.gecode.org/mailman/listinfo/gecode-users
>
>



-- 
Mikael Zayenz Lagerkvist, http://www.ict.kth.se/~zayenz/



From cschulte at kth.se  Fri Feb 27 17:38:12 2009
From: cschulte at kth.se (Christian Schulte)
Date: Fri, 27 Feb 2009 16:38:12 +0000 (UTC)
Subject: [gecode-users] Question about branching
References: <200902091410.57732.Vincent.Barichard@univ-angers.fr>
	<200902102202.51782.Vincent.Barichard@univ-angers.fr>
	<009c01c98dbe$02f20d50$08d627f0$@se>
	<200902131754.41177.Vincent.Barichard@univ-angers.fr>
Message-ID: <loom.20090227T163519-430@post.gmane.org>

Hi Vincent,

of course you were right and I was wrong. The bug is as you describe.

It can only be observed if a propagator has no advisors left, and all of our 
propagators using advisors disappear when they have no advisors left.

Fixed in the trunk.

Cheers
Christian






From Vincent.Barichard at univ-angers.fr  Sat Feb 28 10:13:26 2009
From: Vincent.Barichard at univ-angers.fr (Vincent Barichard)
Date: Sat, 28 Feb 2009 10:13:26 +0100
Subject: [gecode-users] Question about branching
In-Reply-To: <loom.20090227T163519-430@post.gmane.org>
References: <200902091410.57732.Vincent.Barichard@univ-angers.fr>
	<200902131754.41177.Vincent.Barichard@univ-angers.fr>
	<loom.20090227T163519-430@post.gmane.org>
Message-ID: <200902281013.26903.Vincent.Barichard@univ-angers.fr>

Hi Christian,

I am pleased to help you, even a little.

Cheers,
Vincent

Le vendredi 27 f?vrier 2009 17:38:12 Christian Schulte, vous avez ?crit :
> Hi Vincent,
>
> of course you were right and I was wrong. The bug is as you describe.
>
> It can only be observed if a propagator has no advisors left, and all of
> our propagators using advisors disappear when they have no advisors left.
>
> Fixed in the trunk.
>
> Cheers
> Christian
>
>
>
>
> _______________________________________________
> Gecode users mailing list
> users at gecode.org
> https://www.gecode.org/mailman/listinfo/gecode-users

-- 
Vincent Barichard        Universit? d'Angers (LERIA)
Tel: 02 41 73 52 06      D?partement Informatique
Fax: 02 41 73 50 73      H203
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.ps.uni-sb.de/pipermail/users/attachments/20090228/54d49595/attachment.htm>

