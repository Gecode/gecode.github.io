From drthi1 at student.monash.edu  Sat Jul  3 05:03:25 2010
From: drthi1 at student.monash.edu (Dhananjay Thiruvady)
Date: Sat, 03 Jul 2010 13:03:25 +1000
Subject: [gecode-users] Compiling statically
Message-ID: <AANLkTikrrPJCROD9hz7DCV4G7SK83a5s7uiHXHChY-Dy@mail.gmail.com>

Hi all,

I have problems when I try to compile my executable statically. After
reading through the archives my configure options look like:

./configure --enable-static --disable-shared --disable-examples

This creates the appropriate *.a files. When I try to compile my program I
get errors of the following type:

/usr/lib/gcc/i486-linux-gnu/4.2.4/../../../../lib/libgecodeint.a(int.o): In
function `Gecode::Support::Mutex::acquire()':
~/Documents/gecode-3.3.1/./gecode/support/thread/pthreads.hpp:54: undefined
reference to `pthread_mutex_lock'

I'm using gcc 4.3.3. Any help with this will be appreciated.

Thanks,
Dhananjay
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.gecode.org/pipermail/users/attachments/20100703/c29a81b4/attachment.htm>

From tack at gecode.org  Sat Jul  3 09:39:17 2010
From: tack at gecode.org (Guido Tack)
Date: Sat, 3 Jul 2010 09:39:17 +0200
Subject: [gecode-users] Compiling statically
In-Reply-To: <AANLkTikrrPJCROD9hz7DCV4G7SK83a5s7uiHXHChY-Dy@mail.gmail.com>
References: <AANLkTikrrPJCROD9hz7DCV4G7SK83a5s7uiHXHChY-Dy@mail.gmail.com>
Message-ID: <A6DFD242-6883-4022-AB93-2F71AD6D8277@gecode.org>

Dhananjay Thiruvady wrote:

> Hi all,
> 
> I have problems when I try to compile my executable statically. After reading through the archives my configure options look like:
> 
> ./configure --enable-static --disable-shared --disable-examples
> 
> This creates the appropriate *.a files. When I try to compile my program I get errors of the following type:
> 
> /usr/lib/gcc/i486-linux-gnu/4.2.4/../../../../lib/libgecodeint.a(int.o): In function `Gecode::Support::Mutex::acquire()':
> ~/Documents/gecode-3.3.1/./gecode/support/thread/pthreads.hpp:54: undefined reference to `pthread_mutex_lock'
> 
> I'm using gcc 4.3.3. Any help with this will be appreciated.

Most probably, you are missing the -pthread or -lpthread option.  If that doesn't work, see what happens when you remove the --disable-examples.  Can the examples be compiled successfully, and do they run?

Cheers,
	Guido

-- 
Guido Tack, http://people.cs.kuleuven.be/~guido.tack/



From Chris.Mears at monash.edu  Tue Jul  6 02:29:27 2010
From: Chris.Mears at monash.edu (Chris Mears)
Date: Tue, 6 Jul 2010 10:29:27 +1000
Subject: [gecode-users] Symmetry breaking for Gecode
Message-ID: <20100706102927.687e1b06@w-cah-639-01.infotech.monash.edu.au>

Hello Gecoders,

I am making my dynamic symmetry breaking library, LDSB, available to
adventurous constraint programmers.  The main strength of LDSB is that
it allows symmetry breaking to be added very simply to a model.  Here
is an example:

// ...
IntVarArray xs;
ExampleModel() : xs(*this, 4, 0, 3)
{
    distinct(*this, xs);

    // Symmetry breaking starts here...
    Symmetries s(1);
    s[0] = values_interchange(*this, xs);
    // ... and ends here.

    branch(*this, xs, INT_VAR_NONE, INT_VAL_MIN, s);
}
// ...

More details, and the library itself, can be found at
http://www.cmears.id.au/symmetry/ .  The interface is not quite set
in stone, but I think it works well enough, and there is some basic
documentation.  All feedback, comments, complaints, praise, etc.
is gratefully received!

Chris Mears


From tack at gecode.org  Tue Jul  6 07:56:13 2010
From: tack at gecode.org (Guido Tack)
Date: Tue, 6 Jul 2010 07:56:13 +0200
Subject: [gecode-users] Gist in bab or restart search,
	abnormal exit in 	red nodes
In-Reply-To: <AANLkTili6bRpCgXPaQWlSG5qijIIfPzzqsNdPwRkePb9@mail.gmail.com>
References: <AANLkTikizJJ8A6pfGLJHyKvo9gsNjBhnbCjMVCFDI9U5@mail.gmail.com>
	<AANLkTikvPhykt5gGY-hEJbTKaDAhZeX9sUOjtneqOjF7@mail.gmail.com>
	<AANLkTili6bRpCgXPaQWlSG5qijIIfPzzqsNdPwRkePb9@mail.gmail.com>
Message-ID: <EC2D27FD-0CBD-47B2-95F2-97CD7500E65F@gecode.org>

Claudio Cesar de S? wrote:

> Hi
> 
> Thanks, really  it was the problem ... I fix it with a try ... catch, once
> that I want a formatted output ... so the code is such like:
> 
> ...................................................
> try
>     {
>  
>   for (int i = 0; i < mat_size; i++) {
>     os << "\n" << i << "|"  ;
>     for (int j = 0; j < mat_size; j++) {
>       os.width(1);
>       //os <<  matrix(i,j) << "  ";
>       if ( matrix(i,j).val() == 1 )
>     os <<  j << " ";
>       else
>     os << "_"  << " ";
>     }
>   }

> So, now in blue and red nodes .... the gist's message is:
>  
> BoolVar::val: Attempt to access value of unassigned variable      PRINT OUTPUT: NON DEFINITION for MATRIX YET
> 
> 
> Is there any alternative or better for this solution? Is there any function to check if all the values of a variable are already instancied/assigned? In this case,   the variable is a matrix.

You have to iterate over the whole matrix to determine if it is assigned. Or you change your output, like this (assuming the matrix is over BoolVars):

if (matrix(i,j).one()) os << j << " "; else if (matrix(i,j).zero()) os << "_ "; else os << "? ";

Cheers,
	Guido

-- 
Guido Tack, http://people.cs.kuleuven.be/~guido.tack/



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.gecode.org/pipermail/users/attachments/20100706/a4e22d79/attachment.htm>

From kisshen at cisco.com  Thu Jul  8 20:21:44 2010
From: kisshen at cisco.com (Kish Shen)
Date: Thu, 08 Jul 2010 19:21:44 +0100
Subject: [gecode-users] question about posting of linear expressions
Message-ID: <4C361738.7030102@cisco.com>

Hi,

I have been modifying my code for the interface from ECLiPSe to gecode,
specifically the way expressions are handled. I have run into an 
apparent problem with reified boolean expressions. Up to this point, I 
have been posting these as a boolean relation, as follows:

tt(Bool <=> Expr)

where Expr is the boolean expression, and Bool is a boolean variable.

I have modified the code to post this as an expression instead, as follows:

Bool = post(home, Expr)

This does not seem to work, as Bool does not seem to be constrained to 
be the reified value of Expr. The documentation says 'post boolean 
expression and return its value' for the relevant post function, does 
'its value' means the truth value at the point of posting the expression 
(which is not known  in my case), rather than constraining it to the 
reified value of Expr as I thought?

[The actual code is a bit more complicated than the simplified versions 
I present here, but I think I have presented the essentials]

Thanks in advance for any information!

Cheers,

Kish
-- 
This e-mail may contain confidential and privileged material for the
sole use of the intended recipient. Any review, use, distribution or
disclosure by others is strictly prohibited. If you are not the intended
recipient (or authorized to receive for the recipient), please contact
the sender by reply e-mail and delete all copies of this message.
Cisco Systems Limited (Company Number: 02558939), is registered in
England and Wales with its registered office at 1 Callaghan Square,
Cardiff, South Glamorgan CF10 5BT.


From tack at gecode.org  Thu Jul  8 20:38:57 2010
From: tack at gecode.org (Guido Tack)
Date: Thu, 8 Jul 2010 20:38:57 +0200
Subject: [gecode-users] question about posting of linear expressions
In-Reply-To: <4C361738.7030102@cisco.com>
References: <4C361738.7030102@cisco.com>
Message-ID: <FA01A3A2-940D-4DBF-909D-10AFE0E1D60A@gecode.org>

Hi Kish,

Kish Shen wrote:
> I have been modifying my code for the interface from ECLiPSe to gecode,
> specifically the way expressions are handled. I have run into an apparent problem with reified boolean expressions. Up to this point, I have been posting these as a boolean relation, as follows:
> 
> tt(Bool <=> Expr)
> 
> where Expr is the boolean expression, and Bool is a boolean variable.
> 
> I have modified the code to post this as an expression instead, as follows:
> 
> Bool = post(home, Expr)
> 
> This does not seem to work, as Bool does not seem to be constrained to be the reified value of Expr. The documentation says 'post boolean expression and return its value' for the relevant post function, does 'its value' means the truth value at the point of posting the expression (which is not known  in my case), rather than constraining it to the reified value of Expr as I thought?

No, it should work as you expected.  Could you give us a little more details of the actual code?

Cheers,
	Guido

-- 
Guido Tack, http://people.cs.kuleuven.be/~guido.tack/





From kisshen at cisco.com  Thu Jul  8 21:43:09 2010
From: kisshen at cisco.com (Kish Shen)
Date: Thu, 08 Jul 2010 20:43:09 +0100
Subject: [gecode-users] question about posting of linear expressions
In-Reply-To: <FA01A3A2-940D-4DBF-909D-10AFE0E1D60A@gecode.org>
References: <4C361738.7030102@cisco.com>
	<FA01A3A2-940D-4DBF-909D-10AFE0E1D60A@gecode.org>
Message-ID: <4C362A4D.8090008@cisco.com>

Guido Tack wrote:
> 
> No, it should work as you expected.  Could you give us a little more details of the actual code?
> 

Thanks Guido!

First I should say I am still using Gecode version 3.0.2, on Linux. I 
have not updated it since I have had no reason to do so.

The actual code is a bit complicated, and I am using it indirectly (my 
tests are done at the ECLiPSe level, and I have not been debugging this 
at the C++ level). I will try and explain what is happening.

First of all, at the ECLiPSe level, I have only one type of finite 
domain variable, and such variables are normally linked to IntVar. If 
the variable is used as a gecode boolean (as in this case), then the 
ECLiPSe variable is linked to both an IntVar and a BoolVar, with a 
channel constraint linking the two.

The actual code for posting the expression is as follows:
int p_g_post_bool_expr()
{
BoolVar reif;
BoolExpr c;
...
reif = solver->vBool[b];
...
reif = post(*solver, c);
...
}

where vBool is my array of boolean variables (and there is a 
corresponding vInt array). The procedure is called when I post the 
boolean expression.

I have mainly been testing this with reified domain constraints, for 
example,

IntVarArgs vars(size);
BoolVar reif;
...
dom(*solver, vars[i], min, max, reif)

where reif is assigned in much the same way.

I have used the reified domain constraint directly, and this work as 
expected.

What is not working is when I use the domain constraint as a boolean 
expression. What happens is that I post the domain constraint

dom(*solver, vars[i], min, max, reif1);

and a boolean expression:

reif2 = post(*solver, c);

where c = vBool[<index for reif1>]

the problem is that reif2 does not seem to behave as expected.
For example, when the domain is constrained such that the domain 
constraint is true, reif1 is correctly constrained to 1, but reif2 still 
has the 0..1 domain.

As for detecting the domain changes -- after each propagation, the 
entire vInt array is checked to see if there are any domain changes
to the variable, so if reif2's domain was changed from 0..1 to 1, this 
should have been detected.

Cheers,

Kish

-- 
This e-mail may contain confidential and privileged material for the
sole use of the intended recipient. Any review, use, distribution or
disclosure by others is strictly prohibited. If you are not the intended
recipient (or authorized to receive for the recipient), please contact
the sender by reply e-mail and delete all copies of this message.
Cisco Systems Limited (Company Number: 02558939), is registered in
England and Wales with its registered office at 1 Callaghan Square,
Cardiff, South Glamorgan CF10 5BT.


From tack at gecode.org  Thu Jul  8 22:08:20 2010
From: tack at gecode.org (Guido Tack)
Date: Thu, 8 Jul 2010 22:08:20 +0200
Subject: [gecode-users] question about posting of linear expressions
In-Reply-To: <4C362A4D.8090008@cisco.com>
References: <4C361738.7030102@cisco.com>
	<FA01A3A2-940D-4DBF-909D-10AFE0E1D60A@gecode.org>
	<4C362A4D.8090008@cisco.com>
Message-ID: <6EB1FC07-D9B6-4D4C-A737-64D09046A8C3@gecode.org>

Kish Shen wrote:
> First of all, at the ECLiPSe level, I have only one type of finite domain variable, and such variables are normally linked to IntVar. If the variable is used as a gecode boolean (as in this case), then the ECLiPSe variable is linked to both an IntVar and a BoolVar, with a channel constraint linking the two.
> 
> The actual code for posting the expression is as follows:
> int p_g_post_bool_expr()
> {
> BoolVar reif;
> BoolExpr c;
> ...
> reif = solver->vBool[b];
> ...
> reif = post(*solver, c);
> ...
> }

Is that a typo, or do you actually assign to reif twice?  If you want to express vBool[b] <-> c, you should use
post(*solver, tt(equiv(solver->vBool[b],c)));

> where vBool is my array of boolean variables (and there is a corresponding vInt array). The procedure is called when I post the boolean expression.
> 
> I have mainly been testing this with reified domain constraints, for example,
> 
> IntVarArgs vars(size);
> BoolVar reif;
> ...
> dom(*solver, vars[i], min, max, reif)
> 
> where reif is assigned in much the same way.
> 
> I have used the reified domain constraint directly, and this work as expected.
> 
> What is not working is when I use the domain constraint as a boolean expression. What happens is that I post the domain constraint
> 
> dom(*solver, vars[i], min, max, reif1);
> 
> and a boolean expression:
> 
> reif2 = post(*solver, c);
> 
> where c = vBool[<index for reif1>]
> 
> the problem is that reif2 does not seem to behave as expected.
> For example, when the domain is constrained such that the domain constraint is true, reif1 is correctly constrained to 1, but reif2 still has the 0..1 domain.

That is slightly strange.  I tried to reproduce this with a simple example, but there it seems to work.

Cheers,
	Guido

-- 
Guido Tack, http://people.cs.kuleuven.be/~guido.tack/






From kisshen at cisco.com  Thu Jul  8 23:23:29 2010
From: kisshen at cisco.com (Kish Shen)
Date: Thu, 08 Jul 2010 22:23:29 +0100
Subject: [gecode-users] question about posting of linear expressions
In-Reply-To: <6EB1FC07-D9B6-4D4C-A737-64D09046A8C3@gecode.org>
References: <4C361738.7030102@cisco.com>
	<FA01A3A2-940D-4DBF-909D-10AFE0E1D60A@gecode.org>
	<4C362A4D.8090008@cisco.com>
	<6EB1FC07-D9B6-4D4C-A737-64D09046A8C3@gecode.org>
Message-ID: <4C3641D1.2060306@cisco.com>

Guido Tack wrote:
> 
> Is that a typo, or do you actually assign to reif twice?  If you want to express vBool[b] <-> c, you should use
> post(*solver, tt(equiv(solver->vBool[b],c)));
> 

I am testing other code, and they also seem to be going wrong -- is my 
assumption that I can use reif instead of solver->vBool[b] directly 
incorrect?

Being to use some alias for vBool[b] is quite important, because in 
general many of the arguments can be either an integer value or a 
variable (boolean or integer), and I don't want to write a post for 
every single possibility.

Cheers,

Kish

-- 
This e-mail may contain confidential and privileged material for the
sole use of the intended recipient. Any review, use, distribution or
disclosure by others is strictly prohibited. If you are not the intended
recipient (or authorized to receive for the recipient), please contact
the sender by reply e-mail and delete all copies of this message.
Cisco Systems Limited (Company Number: 02558939), is registered in
England and Wales with its registered office at 1 Callaghan Square,
Cardiff, South Glamorgan CF10 5BT.


From kisshen at cisco.com  Fri Jul  9 02:31:31 2010
From: kisshen at cisco.com (Kish Shen)
Date: Fri, 09 Jul 2010 01:31:31 +0100
Subject: [gecode-users] question about posting of linear expressions
In-Reply-To: <6EB1FC07-D9B6-4D4C-A737-64D09046A8C3@gecode.org>
References: <4C361738.7030102@cisco.com>
	<FA01A3A2-940D-4DBF-909D-10AFE0E1D60A@gecode.org>
	<4C362A4D.8090008@cisco.com>
	<6EB1FC07-D9B6-4D4C-A737-64D09046A8C3@gecode.org>
Message-ID: <4C366DE3.6040706@cisco.com>

Guido Tack wrote:

>> reif = solver->vBool[b];
>> ...
>> reif = post(*solver, c);
>> ...

Hi Guido,

Thanks for pointing this out. After some trial and error, I think I have 
now know how to work around the problem. The issue appears to be reif is
on the left hand side of =, and should be a new (uninitialised) BoolVar 
- not an existing initialised BoolVar like what I was doing.

After the assignment, reif can then be linked to an existing BoolVar 
like solver->vBool[b], or an integer value (0 or 1).

Cheers,

Kish

-- 
This e-mail may contain confidential and privileged material for the
sole use of the intended recipient. Any review, use, distribution or
disclosure by others is strictly prohibited. If you are not the intended
recipient (or authorized to receive for the recipient), please contact
the sender by reply e-mail and delete all copies of this message.
Cisco Systems Limited (Company Number: 02558939), is registered in
England and Wales with its registered office at 1 Callaghan Square,
Cardiff, South Glamorgan CF10 5BT.


From tack at gecode.org  Fri Jul  9 09:56:46 2010
From: tack at gecode.org (Guido Tack)
Date: Fri, 9 Jul 2010 09:56:46 +0200
Subject: [gecode-users] question about posting of linear expressions
In-Reply-To: <4C366DE3.6040706@cisco.com>
References: <4C361738.7030102@cisco.com>
	<FA01A3A2-940D-4DBF-909D-10AFE0E1D60A@gecode.org>
	<4C362A4D.8090008@cisco.com>
	<6EB1FC07-D9B6-4D4C-A737-64D09046A8C3@gecode.org>
	<4C366DE3.6040706@cisco.com>
Message-ID: <22E23736-9BC7-4D8A-89EC-7F0D82FF15F0@gecode.org>

Kish Shen wrote:

> Guido Tack wrote:
> 
>>> reif = solver->vBool[b];
>>> ...
>>> reif = post(*solver, c);
>>> ...
> 
> Hi Guido,
> 
> Thanks for pointing this out. After some trial and error, I think I have now know how to work around the problem. The issue appears to be reif is
> on the left hand side of =, and should be a new (uninitialised) BoolVar - not an existing initialised BoolVar like what I was doing.

Yes, post returns a fresh BoolVar, and the assignment overwrites the previous variable (so it usually only makes sense if it's uninitialized).

> After the assignment, reif can then be linked to an existing BoolVar like solver->vBool[b], or an integer value (0 or 1).

Right.  But any linking has to be done by constraints (such as eqv), never by C++ assignment.  In your case, I'd try to reuse the existing BoolVars as much as possible, only creating new variables if it cannot be avoided.  In general, using

post(*solver, tt(eqv(c,b)));

will be more efficient than

BoolVar reif = post(*solver, c);
post(*solver, eqv(reif,b));

If the distinction is just between variable or 0/1 constant, you could simply add two assigned BoolVars to the array (one for 0 and one for 1), so that the posting becomes more uniform.  The post function analyzes the arguments anyway and will post the most efficient propagators (e.g. it won't post reified propagators if the reification is statically 1 or 0).

Cheers,
	Guido

-- 
Guido Tack, http://people.cs.kuleuven.be/~guido.tack/



From kisshen at cisco.com  Tue Jul 13 16:56:57 2010
From: kisshen at cisco.com (Kish Shen)
Date: Tue, 13 Jul 2010 15:56:57 +0100
Subject: [gecode-users] posting of expressions
Message-ID: <4C3C7EB9.2000401@cisco.com>

Hi,

As I have mentioned in my previous posts, I have been rewriting the code 
for handling expressions for the ECLiPSe interface to Gecode. I am 
wondering if there are any performance advantages in different ways of 
handling certain special cases of expressions, like sum.

I had some special code that handled summation of variables using linear:

linear(*solver, vars, rel, sum)

where vars in IntVarArgs, sum is int (although I guess it could be 
generalised to IntVar as well), and rel is IntRelType.

This code does not seem to be used at the moment, I assumed I had it to 
handle some specific ECLiPSe code that I wanted to run quickly with the 
interface.

Instead, such summed expressions are now handled through the general 
expression handling code, and passed to Gecode as a LinRel through 
minimodel. The sum is passed as a series of +, e.g. A+B+C rather than 
using sum of a IntVarArg, because the code was written for Gecode 3.0.2, 
which I don't think supported sum.

Is it more efficient to use the more specialised linear to post such 
expressions, and is it more efficient to use sum in LinExpr rahter than 
a series of +?

Thanks in advance for any information!

Cheers,

Kish

-- 
This e-mail may contain confidential and privileged material for the
sole use of the intended recipient. Any review, use, distribution or
disclosure by others is strictly prohibited. If you are not the intended
recipient (or authorized to receive for the recipient), please contact
the sender by reply e-mail and delete all copies of this message.
Cisco Systems Limited (Company Number: 02558939), is registered in
England and Wales with its registered office at 1 Callaghan Square,
Cardiff, South Glamorgan CF10 5BT.


From tack at gecode.org  Tue Jul 13 17:01:42 2010
From: tack at gecode.org (Guido Tack)
Date: Tue, 13 Jul 2010 17:01:42 +0200
Subject: [gecode-users] posting of expressions
In-Reply-To: <4C3C7EB9.2000401@cisco.com>
References: <4C3C7EB9.2000401@cisco.com>
Message-ID: <8B3A2926-2F5F-48C4-81F8-36515F2B50D6@gecode.org>

Kish Shen wrote:
> As I have mentioned in my previous posts, I have been rewriting the code for handling expressions for the ECLiPSe interface to Gecode. I am wondering if there are any performance advantages in different ways of handling certain special cases of expressions, like sum.
> 
> I had some special code that handled summation of variables using linear:
> 
> linear(*solver, vars, rel, sum)
> 
> where vars in IntVarArgs, sum is int (although I guess it could be generalised to IntVar as well), and rel is IntRelType.
> 
> This code does not seem to be used at the moment, I assumed I had it to handle some specific ECLiPSe code that I wanted to run quickly with the interface.
> 
> Instead, such summed expressions are now handled through the general expression handling code, and passed to Gecode as a LinRel through minimodel. The sum is passed as a series of +, e.g. A+B+C rather than using sum of a IntVarArg, because the code was written for Gecode 3.0.2, which I don't think supported sum.
> 
> Is it more efficient to use the more specialised linear to post such expressions, and is it more efficient to use sum in LinExpr rahter than a series of +?

The minimodel layer will combine such expressions automatically, and post the same propagators as when you call linear directly.  Of course, there's a small overhead for the preprocessing of the LinExprs if you use a series of +, but that should be hardly noticeable in practice.

Cheers,
	Guido

-- 
Guido Tack, http://people.cs.kuleuven.be/~guido.tack/






From cschulte at kth.se  Tue Jul 13 17:10:06 2010
From: cschulte at kth.se (Christian Schulte)
Date: Tue, 13 Jul 2010 17:10:06 +0200
Subject: [gecode-users] posting of expressions
In-Reply-To: <8B3A2926-2F5F-48C4-81F8-36515F2B50D6@gecode.org>
References: <4C3C7EB9.2000401@cisco.com>
	<8B3A2926-2F5F-48C4-81F8-36515F2B50D6@gecode.org>
Message-ID: <000001cb229d$7a7be1a0$6f73a4e0$@se>

Hi Kish,

There is one more thing that might be valuable to you: we have changed the
way how to post expressions and relations for the upcoming 3.4.0 (which
should be available end of this month at the latest). 

It is way more powerful (including arbitrary arithmetic expressions, set
variables, and so on) and distinguishes between a function expr() that posts
an expression (and hence returns a variable) and a function rel() that posts
a relation (and hence does not return a variable). This removes the
reification operator ~ and the confusion it caused.

Cheers
Christian 

--
Christian Schulte, web.ict.kth.se/~cschulte/


-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Guido Tack
Sent: Tuesday, July 13, 2010 5:02 PM
To: Kish Shen
Cc: users at gecode.org
Subject: Re: [gecode-users] posting of expressions

Kish Shen wrote:
> As I have mentioned in my previous posts, I have been rewriting the code
for handling expressions for the ECLiPSe interface to Gecode. I am wondering
if there are any performance advantages in different ways of handling
certain special cases of expressions, like sum.
> 
> I had some special code that handled summation of variables using linear:
> 
> linear(*solver, vars, rel, sum)
> 
> where vars in IntVarArgs, sum is int (although I guess it could be
generalised to IntVar as well), and rel is IntRelType.
> 
> This code does not seem to be used at the moment, I assumed I had it to
handle some specific ECLiPSe code that I wanted to run quickly with the
interface.
> 
> Instead, such summed expressions are now handled through the general
expression handling code, and passed to Gecode as a LinRel through
minimodel. The sum is passed as a series of +, e.g. A+B+C rather than using
sum of a IntVarArg, because the code was written for Gecode 3.0.2, which I
don't think supported sum.
> 
> Is it more efficient to use the more specialised linear to post such
expressions, and is it more efficient to use sum in LinExpr rahter than a
series of +?

The minimodel layer will combine such expressions automatically, and post
the same propagators as when you call linear directly.  Of course, there's a
small overhead for the preprocessing of the LinExprs if you use a series of
+, but that should be hardly noticeable in practice.

Cheers,
	Guido

-- 
Guido Tack, http://people.cs.kuleuven.be/~guido.tack/





_______________________________________________
Gecode users mailing list
users at gecode.org
https://www.gecode.org/mailman/listinfo/gecode-users



From kisshen at cisco.com  Tue Jul 13 17:30:18 2010
From: kisshen at cisco.com (Kish Shen)
Date: Tue, 13 Jul 2010 16:30:18 +0100
Subject: [gecode-users] posting of expressions
In-Reply-To: <000001cb229d$7a7be1a0$6f73a4e0$@se>
References: <4C3C7EB9.2000401@cisco.com>
	<8B3A2926-2F5F-48C4-81F8-36515F2B50D6@gecode.org>
	<000001cb229d$7a7be1a0$6f73a4e0$@se>
Message-ID: <4C3C868A.1020709@cisco.com>

Christian Schulte wrote:
> Hi Kish,
> 
> There is one more thing that might be valuable to you: we have changed the
> way how to post expressions and relations for the upcoming 3.4.0 (which
> should be available end of this month at the latest). 
> 
> It is way more powerful (including arbitrary arithmetic expressions, set
> variables, and so on) and distinguishes between a function expr() that posts
> an expression (and hence returns a variable) and a function rel() that posts
> a relation (and hence does not return a variable). This removes the
> reification operator ~ and the confusion it caused.
> 

Hi Christian,

Thanks for the info. Hmm...much of the reorganisation of the code I 
mentioned was to handle the general expressions allowed in ECLiPSe (or 
more precisely, the ic/fd libraries), to separate out non-linear 
components and reifiable constraints (ic allows (reifiable) constraints 
to occur in expressions and simply use the reified value of the 
constraint in the expression). [The aim is to make the ECLiPSe Gecode 
interface as source compatible to the ic library as possible]

I am not certain if I know what the reification operator is -- is this 
the ~ used in BoolExpr to reify LinRel? I currently use this in 
BoolExpr, but are you suggesting other constraints can be reified with 
this? Am I correct in think for integer finite domain, only LinRel and 
the dom constraints are currently reifiable? These are the only cases I 
am handling in expressions at the moment (and I am currently posting an 
extra reified dom constraint and using its boolean variable in the 
BoolExpr).

Cheers,

Kish


-- 
This e-mail may contain confidential and privileged material for the
sole use of the intended recipient. Any review, use, distribution or
disclosure by others is strictly prohibited. If you are not the intended
recipient (or authorized to receive for the recipient), please contact
the sender by reply e-mail and delete all copies of this message.
Cisco Systems Limited (Company Number: 02558939), is registered in
England and Wales with its registered office at 1 Callaghan Square,
Cardiff, South Glamorgan CF10 5BT.


From cschulte at kth.se  Tue Jul 13 17:42:29 2010
From: cschulte at kth.se (Christian Schulte)
Date: Tue, 13 Jul 2010 17:42:29 +0200
Subject: [gecode-users] posting of expressions
In-Reply-To: <4C3C868A.1020709@cisco.com>
References: <4C3C7EB9.2000401@cisco.com>
	<8B3A2926-2F5F-48C4-81F8-36515F2B50D6@gecode.org>
	<000001cb229d$7a7be1a0$6f73a4e0$@se> <4C3C868A.1020709@cisco.com>
Message-ID: <000301cb22a2$00aac8f0$02005ad0$@se>

Hi Kish,

No, it is as you say, ~ only works in the context of posting linear
relations. This will disappear.

I just attach a draft of the chapter that explains it (even though the
structure is now totally misleading).

Christian

--
Christian Schulte, web.ict.kth.se/~cschulte/



-----Original Message-----
From: Kish Shen [mailto:kisshen at cisco.com] 
Sent: Tuesday, July 13, 2010 5:30 PM
To: cschulte at kth.se
Cc: 'Guido Tack'; users at gecode.org
Subject: Re: [gecode-users] posting of expressions

Christian Schulte wrote:
> Hi Kish,
> 
> There is one more thing that might be valuable to you: we have changed the
> way how to post expressions and relations for the upcoming 3.4.0 (which
> should be available end of this month at the latest). 
> 
> It is way more powerful (including arbitrary arithmetic expressions, set
> variables, and so on) and distinguishes between a function expr() that
posts
> an expression (and hence returns a variable) and a function rel() that
posts
> a relation (and hence does not return a variable). This removes the
> reification operator ~ and the confusion it caused.
> 

Hi Christian,

Thanks for the info. Hmm...much of the reorganisation of the code I 
mentioned was to handle the general expressions allowed in ECLiPSe (or 
more precisely, the ic/fd libraries), to separate out non-linear 
components and reifiable constraints (ic allows (reifiable) constraints 
to occur in expressions and simply use the reified value of the 
constraint in the expression). [The aim is to make the ECLiPSe Gecode 
interface as source compatible to the ic library as possible]

I am not certain if I know what the reification operator is -- is this 
the ~ used in BoolExpr to reify LinRel? I currently use this in 
BoolExpr, but are you suggesting other constraints can be reified with 
this? Am I correct in think for integer finite domain, only LinRel and 
the dom constraints are currently reifiable? These are the only cases I 
am handling in expressions at the moment (and I am currently posting an 
extra reified dom constraint and using its boolean variable in the 
BoolExpr).

Cheers,

Kish


-- 
This e-mail may contain confidential and privileged material for the
sole use of the intended recipient. Any review, use, distribution or
disclosure by others is strictly prohibited. If you are not the intended
recipient (or authorized to receive for the recipient), please contact
the sender by reply e-mail and delete all copies of this message.
Cisco Systems Limited (Company Number: 02558939), is registered in
England and Wales with its registered office at 1 Callaghan Square,
Cardiff, South Glamorgan CF10 5BT.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: MPG.pdf
Type: application/pdf
Size: 71807 bytes
Desc: not available
URL: <http://www.gecode.org/pipermail/users/attachments/20100713/7cd5a0df/attachment-0001.pdf>

From kisshen at cisco.com  Wed Jul 14 20:55:39 2010
From: kisshen at cisco.com (Kish Shen)
Date: Wed, 14 Jul 2010 19:55:39 +0100
Subject: [gecode-users] performance issues
Message-ID: <4C3E082B.9010604@cisco.com>

Hi,

I have been doing some comparisons between the updated code for the 
ECLiPSe interface to Gecode with the old code. The main changes in the 
new code is to deal properly with various forms of expressions at the 
ECLiPSe level, and I did not expect much changes to the calls made to 
Gecode.

I was therefore a little surprised that one example (roster example from 
ECLiPSe's web page) seem to show that the old code was measurably and 
consistently faster than the new code -- it is about 10% faster. This 
example does part of its search using Gecode's search engine, and part 
of it in ECLiPSe (where variables are labelled with values in ECLiPSe, 
but the propagation of such labelling is still done via Gecode). The 
execution time should be dominated by the search/propagation, so it 
seems very likely that the increased execution time is from Gecode, and 
not from ECLiPSe. The same Gecode libraries are used in both.

Looking at the way Gecode is called, the only difference I noticed is 
the way boolean variables are treated. In our interface, BoolVar is 
always linked to an IntVar, connected via a channel constraint, and
the variable is always accessed via the IntVar, which is linked to an 
ECLiPSe variable.

The difference in the new code is that the IntVar is created with an 
initial domain of -1000000 to 1000000, and then the domain is 
immediately reduced to 0..1. In the old code, the IntVar is created with 
an initial domain of 0..1. In both cases, the IntVar is linked to the 
BoolVar after this.

I remember the modelling manual stated variables with large domains will 
be less efficient. Can this explain the slowdown in the performance, 
even though the variable's domain is immediately reduced to 0..1?

Thanks in advance for any information!

Cheers,

Kish

-- 
This e-mail may contain confidential and privileged material for the
sole use of the intended recipient. Any review, use, distribution or
disclosure by others is strictly prohibited. If you are not the intended
recipient (or authorized to receive for the recipient), please contact
the sender by reply e-mail and delete all copies of this message.
Cisco Systems Limited (Company Number: 02558939), is registered in
England and Wales with its registered office at 1 Callaghan Square,
Cardiff, South Glamorgan CF10 5BT.


From cschulte at kth.se  Wed Jul 14 21:03:52 2010
From: cschulte at kth.se (Christian Schulte)
Date: Wed, 14 Jul 2010 21:03:52 +0200
Subject: [gecode-users] performance issues
In-Reply-To: <4C3E082B.9010604@cisco.com>
References: <4C3E082B.9010604@cisco.com>
Message-ID: <000001cb2387$4d91f7c0$e8b5e740$@se>

Hi Kish,

Yes that can be the case. The difference in efficiency actually is not
related to the variables themselves.

If you post constraints on the IntVars before their domain is reduced to
0..1 then some propagators might have to resort to a less efficient
representation. The difference can range from anything like 10% (linear
constraints, for example) to 50% (extensional constraints, for example). 

But do you post Gecode constraints on these IntVars? I would guess that
you'd post Gecode constraints on the channeled BoolVars instead. If the
latter is the case then I would not know where the difference in performance
could come from.

Cheers
Christian

--
Christian Schulte, web.ict.kth.se/~cschulte/


-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Kish Shen
Sent: Wednesday, July 14, 2010 8:56 PM
To: users at gecode.org
Subject: [gecode-users] performance issues

Hi,

I have been doing some comparisons between the updated code for the 
ECLiPSe interface to Gecode with the old code. The main changes in the 
new code is to deal properly with various forms of expressions at the 
ECLiPSe level, and I did not expect much changes to the calls made to 
Gecode.

I was therefore a little surprised that one example (roster example from 
ECLiPSe's web page) seem to show that the old code was measurably and 
consistently faster than the new code -- it is about 10% faster. This 
example does part of its search using Gecode's search engine, and part 
of it in ECLiPSe (where variables are labelled with values in ECLiPSe, 
but the propagation of such labelling is still done via Gecode). The 
execution time should be dominated by the search/propagation, so it 
seems very likely that the increased execution time is from Gecode, and 
not from ECLiPSe. The same Gecode libraries are used in both.

Looking at the way Gecode is called, the only difference I noticed is 
the way boolean variables are treated. In our interface, BoolVar is 
always linked to an IntVar, connected via a channel constraint, and
the variable is always accessed via the IntVar, which is linked to an 
ECLiPSe variable.

The difference in the new code is that the IntVar is created with an 
initial domain of -1000000 to 1000000, and then the domain is 
immediately reduced to 0..1. In the old code, the IntVar is created with 
an initial domain of 0..1. In both cases, the IntVar is linked to the 
BoolVar after this.

I remember the modelling manual stated variables with large domains will 
be less efficient. Can this explain the slowdown in the performance, 
even though the variable's domain is immediately reduced to 0..1?

Thanks in advance for any information!

Cheers,

Kish

-- 
This e-mail may contain confidential and privileged material for the
sole use of the intended recipient. Any review, use, distribution or
disclosure by others is strictly prohibited. If you are not the intended
recipient (or authorized to receive for the recipient), please contact
the sender by reply e-mail and delete all copies of this message.
Cisco Systems Limited (Company Number: 02558939), is registered in
England and Wales with its registered office at 1 Callaghan Square,
Cardiff, South Glamorgan CF10 5BT.

_______________________________________________
Gecode users mailing list
users at gecode.org
https://www.gecode.org/mailman/listinfo/gecode-users



From kisshen at cisco.com  Wed Jul 14 21:31:36 2010
From: kisshen at cisco.com (Kish Shen)
Date: Wed, 14 Jul 2010 20:31:36 +0100
Subject: [gecode-users] performance issues
In-Reply-To: <000001cb2387$4d91f7c0$e8b5e740$@se>
References: <4C3E082B.9010604@cisco.com> <000001cb2387$4d91f7c0$e8b5e740$@se>
Message-ID: <4C3E1098.90505@cisco.com>

Hi Christian,

Thanks for your quick reply!

Christian Schulte wrote:

> Yes that can be the case. The difference in efficiency actually is not
> related to the variables themselves.
> 
> If you post constraints on the IntVars before their domain is reduced to
> 0..1 then some propagators might have to resort to a less efficient
> representation. The difference can range from anything like 10% (linear
> constraints, for example) to 50% (extensional constraints, for example). 
> 
> But do you post Gecode constraints on these IntVars? I would guess that
> you'd post Gecode constraints on the channeled BoolVars instead. If the
> latter is the case then I would not know where the difference in performance
> could come from.

I can't be absolutely certain as there are hundreds of constraints even 
in the simple example I generated a trace for (this is not the instance 
that show the 10% difference -- that is for a bigger problem instance 
that is also much harder, i.e. the search time is much longer). However,
at least some of the constraints are involving the boolean variable. 
These are in fact the BoolExpr I discussed in my previous posts, of the
form:

V1 <=> V2 #= 1 and ....

and V1 is the IntVar/BoolVar pair that was just created as described.
In my C++ code to parse this boolean expression, the BoolVar of V1 will 
be the variable extracted (V2 #= 1 will be reified with the ~ operator, 
and in this case, it is the IntVar of V2 that is used, even if it is a 
boolean variable (I don't know if it is or not from just looking at the 
trace).

Would this explain the performance differences? The reason for the 
change is that previously I had a hack to specially catch these type of 
expressions, whereas in my new code, these expressions are processed as 
general expressions (the ECLiPSe example code actually use #= instead of 
<=>, as the ic library (for which the example was originally written) 
does not actually have an <=> operator).

Cheers,

Kish

-- 
This e-mail may contain confidential and privileged material for the
sole use of the intended recipient. Any review, use, distribution or
disclosure by others is strictly prohibited. If you are not the intended
recipient (or authorized to receive for the recipient), please contact
the sender by reply e-mail and delete all copies of this message.
Cisco Systems Limited (Company Number: 02558939), is registered in
England and Wales with its registered office at 1 Callaghan Square,
Cardiff, South Glamorgan CF10 5BT.


From kisshen at cisco.com  Thu Jul 15 04:23:45 2010
From: kisshen at cisco.com (Kish Shen)
Date: Thu, 15 Jul 2010 03:23:45 +0100
Subject: [gecode-users] performance issues
In-Reply-To: <000001cb2387$4d91f7c0$e8b5e740$@se>
References: <4C3E082B.9010604@cisco.com> <000001cb2387$4d91f7c0$e8b5e740$@se>
Message-ID: <4C3E7131.5000000@cisco.com>

Hi Christian,

An update to my performance problem: the problem was after all caused by 
my new code, rather than Gecode. The reason is that the search in that 
example uses the #= and #\= constraints to set/exclude values from a 
variable's domain, and the conversion of these constraints into Gecode 
calls is precisely the code I changed, and this code is now more 
expensive, as it has to deal with various types of expressions.

The overhead with these constraints are probably unavoidable, and in 
most cases the overheads are not significant when they are only used 
during modelling, rather than in the search as in this case.

I changed the example to directly assign the value instead of using #=, 
and used refified domain constraint (with the boolean set to 0) to 
exclude a value, and the execution is now faster, probably even faster 
than the old results.

I have also been thinking about your last reply:

Christian Schulte wrote:

> If you post constraints on the IntVars before their domain is reduced to
> 0..1 then some propagators might have to resort to a less efficient
> representation. The difference can range from anything like 10% (linear
> constraints, for example) to 50% (extensional constraints, for example). 

This should not happen -- what happens is that my code now extract all 
new variables from an expression, and add them to gecode with a default 
domain, and then change any that are also booleans to the 0..1 domain.
This happens before any constraints are posted for these variables.

Cheers,

Kish

-- 
This e-mail may contain confidential and privileged material for the
sole use of the intended recipient. Any review, use, distribution or
disclosure by others is strictly prohibited. If you are not the intended
recipient (or authorized to receive for the recipient), please contact
the sender by reply e-mail and delete all copies of this message.
Cisco Systems Limited (Company Number: 02558939), is registered in
England and Wales with its registered office at 1 Callaghan Square,
Cardiff, South Glamorgan CF10 5BT.


From mauriciotorob at gmail.com  Fri Jul 16 14:47:05 2010
From: mauriciotorob at gmail.com (Mauricio Toro)
Date: Fri, 16 Jul 2010 14:47:05 +0200
Subject: [gecode-users] Problem when compiling with Gecode 3.3.1
Message-ID: <AANLkTik7UZqZQh=ChbHG7-1nFHbSCdbaBBHVz-k1uZJv@mail.gmail.com>

Hello,

I am compiling my program with Gecode 3.3.1. It used to work with Gecode
3.2.2.
I changed the functions ES_SUBSUMED, fail, etc, but I am getting these
errors
and they don't have any reference to my program:

/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp: In constructor
?Gecode::Space::Propagators::Propagators(const Gecode::Space&)?:
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:2410: error:
?static Gecode::Propagator* Gecode::Propagator::cast(Gecode::ActorLink*)? is
private
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3400: error:
within this context
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3400: error:
?Gecode::ActorLink? is an inaccessible base of ?Gecode::Propagator?
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:2418: error:
?static const Gecode::Propagator* Gecode::Propagator::cast(const
Gecode::ActorLink*)? is private
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3401: error:
within this context
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3401: error:
?Gecode::ActorLink? is an inaccessible base of ?Gecode::Propagator?
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp: In member
function ?void Gecode::Space::Propagators::operator++()?:
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:2410: error:
?static Gecode::Propagator* Gecode::Propagator::cast(Gecode::ActorLink*)? is
private
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3426: error:
within this context
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3426: error:
?Gecode::ActorLink? is an inaccessible base of ?Gecode::Propagator?
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:2418: error:
?static const Gecode::Propagator* Gecode::Propagator::cast(const
Gecode::ActorLink*)? is private
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3427: error:
within this context
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3427: error:
?Gecode::ActorLink? is an inaccessible base of ?Gecode::Propagator?
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp: In member
function ?const Gecode::Propagator& Gecode::Space::Propagators::propagator()
const?:
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:2418: error:
?static const Gecode::Propagator* Gecode::Propagator::cast(const
Gecode::ActorLink*)? is private
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3436: error:
within this context
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp: In constructor
?Gecode::Space::Branchers::Branchers(const Gecode::Space&)?:
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:2484: error:
?static Gecode::Brancher* Gecode::Brancher::cast(Gecode::ActorLink*)? is
private
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3441: error:
within this context
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3441: error:
?Gecode::ActorLink? is an inaccessible base of ?Gecode::Brancher?
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp: In member
function ?const Gecode::Brancher& Gecode::Space::Branchers::brancher()
const?:
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:2492: error:
?static const Gecode::Brancher* Gecode::Brancher::cast(const
Gecode::ActorLink*)? is private
/Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3452: error:
within this context
/Library/Frameworks/gecode.framework/Headers/minimodel/bool-expr.hpp: In
constructor ?Gecode::BoolExpr::Node::Node()?:
/Library/Frameworks/gecode.framework/Headers/minimodel/lin-rel.hpp:45:
error: ?Gecode::LinRel::LinRel()? is private
/Library/Frameworks/gecode.framework/Headers/minimodel/bool-expr.hpp:45:
error: within this context


What can I do?

Thank you,

Mauricio

-- 
Mauricio TORO BERMUDEZ

Research Postgraduate Student (Ph.D)
Computer Science Research Laboratory of Bordeaux (LABRI)
University of Bordeaux 1: Science and Technology

http://www.labri.fr/perso/mtoro/

351, cours de la Lib?ration
F-33405 Talence Cedex. France.
Phone: (+33) 5 4000 24 85
Fax: (+33) 5 4000 66 69

Please don't print this e-mail unless you really need to.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.gecode.org/pipermail/users/attachments/20100716/b5f5a6b8/attachment.htm>

From mauriciotorob at gmail.com  Fri Jul 16 14:47:47 2010
From: mauriciotorob at gmail.com (Mauricio Toro)
Date: Fri, 16 Jul 2010 14:47:47 +0200
Subject: [gecode-users] Problem when compiling with Gecode 3.3.1
In-Reply-To: <AANLkTik7UZqZQh=ChbHG7-1nFHbSCdbaBBHVz-k1uZJv@mail.gmail.com>
References: <AANLkTik7UZqZQh=ChbHG7-1nFHbSCdbaBBHVz-k1uZJv@mail.gmail.com>
Message-ID: <AANLkTimMoJU3qMPKtvJRwecaHYiJv4E_Aoq1vFCDZiDS@mail.gmail.com>

Under Mac Os X 10.5.8 with g++ 4.01

2010/7/16 Mauricio Toro <mauriciotorob at gmail.com>

> Hello,
>
> I am compiling my program with Gecode 3.3.1. It used to work with Gecode
> 3.2.2.
> I changed the functions ES_SUBSUMED, fail, etc, but I am getting these
> errors
> and they don't have any reference to my program:
>
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp: In
> constructor ?Gecode::Space::Propagators::Propagators(const Gecode::Space&)?:
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:2410: error:
> ?static Gecode::Propagator* Gecode::Propagator::cast(Gecode::ActorLink*)? is
> private
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3400: error:
> within this context
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3400: error:
> ?Gecode::ActorLink? is an inaccessible base of ?Gecode::Propagator?
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:2418: error:
> ?static const Gecode::Propagator* Gecode::Propagator::cast(const
> Gecode::ActorLink*)? is private
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3401: error:
> within this context
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3401: error:
> ?Gecode::ActorLink? is an inaccessible base of ?Gecode::Propagator?
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp: In member
> function ?void Gecode::Space::Propagators::operator++()?:
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:2410: error:
> ?static Gecode::Propagator* Gecode::Propagator::cast(Gecode::ActorLink*)? is
> private
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3426: error:
> within this context
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3426: error:
> ?Gecode::ActorLink? is an inaccessible base of ?Gecode::Propagator?
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:2418: error:
> ?static const Gecode::Propagator* Gecode::Propagator::cast(const
> Gecode::ActorLink*)? is private
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3427: error:
> within this context
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3427: error:
> ?Gecode::ActorLink? is an inaccessible base of ?Gecode::Propagator?
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp: In member
> function ?const Gecode::Propagator& Gecode::Space::Propagators::propagator()
> const?:
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:2418: error:
> ?static const Gecode::Propagator* Gecode::Propagator::cast(const
> Gecode::ActorLink*)? is private
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3436: error:
> within this context
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp: In
> constructor ?Gecode::Space::Branchers::Branchers(const Gecode::Space&)?:
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:2484: error:
> ?static Gecode::Brancher* Gecode::Brancher::cast(Gecode::ActorLink*)? is
> private
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3441: error:
> within this context
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3441: error:
> ?Gecode::ActorLink? is an inaccessible base of ?Gecode::Brancher?
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp: In member
> function ?const Gecode::Brancher& Gecode::Space::Branchers::brancher()
> const?:
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:2492: error:
> ?static const Gecode::Brancher* Gecode::Brancher::cast(const
> Gecode::ActorLink*)? is private
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3452: error:
> within this context
> /Library/Frameworks/gecode.framework/Headers/minimodel/bool-expr.hpp: In
> constructor ?Gecode::BoolExpr::Node::Node()?:
> /Library/Frameworks/gecode.framework/Headers/minimodel/lin-rel.hpp:45:
> error: ?Gecode::LinRel::LinRel()? is private
> /Library/Frameworks/gecode.framework/Headers/minimodel/bool-expr.hpp:45:
> error: within this context
>
>
> What can I do?
>
> Thank you,
>
> Mauricio
>
> --
> Mauricio TORO BERMUDEZ
>
> Research Postgraduate Student (Ph.D)
> Computer Science Research Laboratory of Bordeaux (LABRI)
> University of Bordeaux 1: Science and Technology
>
> http://www.labri.fr/perso/mtoro/
>
> 351, cours de la Lib?ration
> F-33405 Talence Cedex. France.
> Phone: (+33) 5 4000 24 85
> Fax: (+33) 5 4000 66 69
>
> Please don't print this e-mail unless you really need to.
>
>


-- 
Mauricio TORO BERMUDEZ

Research Postgraduate Student (Ph.D)
Computer Science Research Laboratory of Bordeaux (LABRI)
University of Bordeaux 1: Science and Technology

http://www.labri.fr/perso/mtoro/

351, cours de la Lib?ration
F-33405 Talence Cedex. France.
Phone: (+33) 5 4000 24 85
Fax: (+33) 5 4000 66 69

Please don't print this e-mail unless you really need to.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.gecode.org/pipermail/users/attachments/20100716/bc86fc6d/attachment.htm>

From tack at gecode.org  Fri Jul 16 14:51:32 2010
From: tack at gecode.org (Guido Tack)
Date: Fri, 16 Jul 2010 14:51:32 +0200
Subject: [gecode-users] Problem when compiling with Gecode 3.3.1
In-Reply-To: <AANLkTimMoJU3qMPKtvJRwecaHYiJv4E_Aoq1vFCDZiDS@mail.gmail.com>
References: <AANLkTik7UZqZQh=ChbHG7-1nFHbSCdbaBBHVz-k1uZJv@mail.gmail.com>
	<AANLkTimMoJU3qMPKtvJRwecaHYiJv4E_Aoq1vFCDZiDS@mail.gmail.com>
Message-ID: <3301248B-A90F-4961-8815-DA3FC7C012C1@gecode.org>

Please look at the prerequisites: Gecode requires gcc >= 4.2.  You have to give CC=gcc-4.2 CXX=g++-4.2 as options on the configure command line.

Cheers,
	Guido

Mauricio Toro wrote:

> Under Mac Os X 10.5.8 with g++ 4.01
> 
> 2010/7/16 Mauricio Toro <mauriciotorob at gmail.com>
> Hello,
> 
> I am compiling my program with Gecode 3.3.1. It used to work with Gecode 3.2.2.
> I changed the functions ES_SUBSUMED, fail, etc, but I am getting these errors 
> and they don't have any reference to my program:
> 
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp: In constructor ?Gecode::Space::Propagators::Propagators(const Gecode::Space&)?:
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:2410: error: ?static Gecode::Propagator* Gecode::Propagator::cast(Gecode::ActorLink*)? is private
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3400: error: within this context
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3400: error: ?Gecode::ActorLink? is an inaccessible base of ?Gecode::Propagator?
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:2418: error: ?static const Gecode::Propagator* Gecode::Propagator::cast(const Gecode::ActorLink*)? is private
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3401: error: within this context
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3401: error: ?Gecode::ActorLink? is an inaccessible base of ?Gecode::Propagator?
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp: In member function ?void Gecode::Space::Propagators::operator++()?:
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:2410: error: ?static Gecode::Propagator* Gecode::Propagator::cast(Gecode::ActorLink*)? is private
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3426: error: within this context
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3426: error: ?Gecode::ActorLink? is an inaccessible base of ?Gecode::Propagator?
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:2418: error: ?static const Gecode::Propagator* Gecode::Propagator::cast(const Gecode::ActorLink*)? is private
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3427: error: within this context
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3427: error: ?Gecode::ActorLink? is an inaccessible base of ?Gecode::Propagator?
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp: In member function ?const Gecode::Propagator& Gecode::Space::Propagators::propagator() const?:
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:2418: error: ?static const Gecode::Propagator* Gecode::Propagator::cast(const Gecode::ActorLink*)? is private
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3436: error: within this context
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp: In constructor ?Gecode::Space::Branchers::Branchers(const Gecode::Space&)?:
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:2484: error: ?static Gecode::Brancher* Gecode::Brancher::cast(Gecode::ActorLink*)? is private
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3441: error: within this context
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3441: error: ?Gecode::ActorLink? is an inaccessible base of ?Gecode::Brancher?
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp: In member function ?const Gecode::Brancher& Gecode::Space::Branchers::brancher() const?:
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:2492: error: ?static const Gecode::Brancher* Gecode::Brancher::cast(const Gecode::ActorLink*)? is private
> /Library/Frameworks/gecode.framework/Headers/kernel/core.hpp:3452: error: within this context
> /Library/Frameworks/gecode.framework/Headers/minimodel/bool-expr.hpp: In constructor ?Gecode::BoolExpr::Node::Node()?:
> /Library/Frameworks/gecode.framework/Headers/minimodel/lin-rel.hpp:45: error: ?Gecode::LinRel::LinRel()? is private
> /Library/Frameworks/gecode.framework/Headers/minimodel/bool-expr.hpp:45: error: within this context
> 
> 
> What can I do?
> 
> Thank you,
> 
> Mauricio
> 
> -- 
> Mauricio TORO BERMUDEZ
> 
> Research Postgraduate Student (Ph.D)
> Computer Science Research Laboratory of Bordeaux (LABRI)
> University of Bordeaux 1: Science and Technology
> 
> http://www.labri.fr/perso/mtoro/
> 
> 351, cours de la Lib?ration
> F-33405 Talence Cedex. France.
> Phone: (+33) 5 4000 24 85
> Fax: (+33) 5 4000 66 69
> 
> Please don't print this e-mail unless you really need to.
> 
> 
> 
> 
> -- 
> Mauricio TORO BERMUDEZ
> 
> Research Postgraduate Student (Ph.D)
> Computer Science Research Laboratory of Bordeaux (LABRI)
> University of Bordeaux 1: Science and Technology
> 
> http://www.labri.fr/perso/mtoro/
> 
> 351, cours de la Lib?ration
> F-33405 Talence Cedex. France.
> Phone: (+33) 5 4000 24 85
> Fax: (+33) 5 4000 66 69
> 
> Please don't print this e-mail unless you really need to.
> 
> _______________________________________________
> Gecode users mailing list
> users at gecode.org
> https://www.gecode.org/mailman/listinfo/gecode-users

-- 
Guido Tack, http://people.cs.kuleuven.be/~guido.tack/





-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.gecode.org/pipermail/users/attachments/20100716/c6c57080/attachment-0001.htm>

From kisshen at cisco.com  Fri Jul 16 18:55:25 2010
From: kisshen at cisco.com (Kish Shen)
Date: Fri, 16 Jul 2010 17:55:25 +0100
Subject: [gecode-users] posting instead of propagating domain constraints?
Message-ID: <4C408EFD.6050009@cisco.com>

Hi,

Is there anyway to post propagators for domain constraints for IntVar 
(including setting it to a single value), without doing the propagation? 
I've just noticed from the manual that most dom() constraints (as well 
as rel() between an IntVar and an int) propagates, instead of just 
posting the propator.

The main reason I ask is that I do recomputation manually, by posting 
changes to a Space ('events', such as adding constraints) without 
propagation until all recorded events are posted, which should be more 
efficient than performing propagation every time. I use rel() when 
ECLiPSe sets a variable to a value, which happens frequently during 
search. If this propagates as the manual suggest, am I correct that this 
can make the recomputation more expensive?

I noticed the reified versions of dom() do not propagate -- is this one 
way of avoiding propagation?

Thanks and cheers,

Kish

-- 
This e-mail may contain confidential and privileged material for the
sole use of the intended recipient. Any review, use, distribution or
disclosure by others is strictly prohibited. If you are not the intended
recipient (or authorized to receive for the recipient), please contact
the sender by reply e-mail and delete all copies of this message.
Cisco Systems Limited (Company Number: 02558939), is registered in
England and Wales with its registered office at 1 Callaghan Square,
Cardiff, South Glamorgan CF10 5BT.


From tack at gecode.org  Fri Jul 16 19:12:55 2010
From: tack at gecode.org (Guido Tack)
Date: Fri, 16 Jul 2010 19:12:55 +0200
Subject: [gecode-users] posting instead of propagating domain
	constraints?
In-Reply-To: <4C408EFD.6050009@cisco.com>
References: <4C408EFD.6050009@cisco.com>
Message-ID: <73C031C7-78ED-4205-B995-04E5ECCCE9A9@gecode.org>

Kish Shen wrote:
> Is there anyway to post propagators for domain constraints for IntVar (including setting it to a single value), without doing the propagation? I've just noticed from the manual that most dom() constraints (as well as rel() between an IntVar and an int) propagates, instead of just posting the propator.

No, these constraints are always propagated immediately.

> The main reason I ask is that I do recomputation manually, by posting changes to a Space ('events', such as adding constraints) without propagation until all recorded events are posted, which should be more efficient than performing propagation every time. I use rel() when ECLiPSe sets a variable to a value, which happens frequently during search. If this propagates as the manual suggest, am I correct that this can make the recomputation more expensive?

It would be more expensive to delay the propagation!  When you call dom, or when you post any constraint that can be represented in the variable domains directly, the system does not even create a propagator for it, it simply modifies the domain. This is much cheaper than creating a propagator, waking it once, and then deallocating it right away.

> I noticed the reified versions of dom() do not propagate -- is this one way of avoiding propagation?

When the reification BoolVar is assigned, these versions also propagate immediately. So you would have to call dom and then set the BoolVar to 1 afterwards. But as I said above, I would be very surprised if this was more efficient.

Cheers,
	Guido

-- 
Guido Tack, http://people.cs.kuleuven.be/~guido.tack/





From cschulte at kth.se  Fri Jul 16 19:15:30 2010
From: cschulte at kth.se (Christian Schulte)
Date: Fri, 16 Jul 2010 19:15:30 +0200
Subject: [gecode-users] posting instead of propagating domain
	constraints?
In-Reply-To: <4C408EFD.6050009@cisco.com>
References: <4C408EFD.6050009@cisco.com>
Message-ID: <000001cb250a$7e838400$7b8a8c00$@se>

Hi Kish,

Well, dom() and the integer variants of rel() propagate in the sense that
they immediately modify the variable domain and schedule some propagators
for later execution. However, they do not lead to full constraint
propagation computing a fixpoint. The invariant is that only execution of
the status() function of a space computes a fixpoint. So they are dirt
cheap, much cheaper than creating a propagator for them.

When you post constraints many of the propagators posted also modify some
variable domains to enforce some invariants they will rely on when they
actually propagate (think about element which ensures that the domain of the
index variables corresponds to available indices in the array).

Should I clarify this in MPG?

Cheers
Christian

--
Christian Schulte, web.ict.kth.se/~cschulte/


-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Kish Shen
Sent: Friday, July 16, 2010 6:55 PM
To: users at gecode.org
Subject: [gecode-users] posting instead of propagating domain constraints?

Hi,

Is there anyway to post propagators for domain constraints for IntVar 
(including setting it to a single value), without doing the propagation? 
I've just noticed from the manual that most dom() constraints (as well 
as rel() between an IntVar and an int) propagates, instead of just 
posting the propator.

The main reason I ask is that I do recomputation manually, by posting 
changes to a Space ('events', such as adding constraints) without 
propagation until all recorded events are posted, which should be more 
efficient than performing propagation every time. I use rel() when 
ECLiPSe sets a variable to a value, which happens frequently during 
search. If this propagates as the manual suggest, am I correct that this 
can make the recomputation more expensive?

I noticed the reified versions of dom() do not propagate -- is this one 
way of avoiding propagation?

Thanks and cheers,

Kish

-- 
This e-mail may contain confidential and privileged material for the
sole use of the intended recipient. Any review, use, distribution or
disclosure by others is strictly prohibited. If you are not the intended
recipient (or authorized to receive for the recipient), please contact
the sender by reply e-mail and delete all copies of this message.
Cisco Systems Limited (Company Number: 02558939), is registered in
England and Wales with its registered office at 1 Callaghan Square,
Cardiff, South Glamorgan CF10 5BT.

_______________________________________________
Gecode users mailing list
users at gecode.org
https://www.gecode.org/mailman/listinfo/gecode-users



From kisshen at cisco.com  Fri Jul 16 19:39:41 2010
From: kisshen at cisco.com (Kish Shen)
Date: Fri, 16 Jul 2010 18:39:41 +0100
Subject: [gecode-users] posting instead of propagating domain
	constraints?
In-Reply-To: <000001cb250a$7e838400$7b8a8c00$@se>
References: <4C408EFD.6050009@cisco.com> <000001cb250a$7e838400$7b8a8c00$@se>
Message-ID: <4C40995D.9070808@cisco.com>

Christian Schulte wrote:

> Well, dom() and the integer variants of rel() propagate in the sense that
> they immediately modify the variable domain and schedule some propagators
> for later execution. However, they do not lead to full constraint
> propagation computing a fixpoint. The invariant is that only execution of
> the status() function of a space computes a fixpoint. So they are dirt
> cheap, much cheaper than creating a propagator for them.

Yes, I had understood 'propagates' in the manual to mean 'full 
propagation'. I knew that dom() and rel() will do such simple things 
like update the domain and check that the value you are assigning is 
inside the domain, etc., and assumed that you will always do these 
simple checks for all constraints posted, even where the manual says 
'posting the propagator', e.g. for equality between two IntVars, you 
will check that their domains do overlap, etc.

So does 'propagate' in this case only mean 'scheduling some 
propagators', whereas where the manual state 'posting the propagator' 
does not?

Cheers,

Kish



-- 
This e-mail may contain confidential and privileged material for the
sole use of the intended recipient. Any review, use, distribution or
disclosure by others is strictly prohibited. If you are not the intended
recipient (or authorized to receive for the recipient), please contact
the sender by reply e-mail and delete all copies of this message.
Cisco Systems Limited (Company Number: 02558939), is registered in
England and Wales with its registered office at 1 Callaghan Square,
Cardiff, South Glamorgan CF10 5BT.


From cschulte at kth.se  Fri Jul 16 19:42:05 2010
From: cschulte at kth.se (Christian Schulte)
Date: Fri, 16 Jul 2010 19:42:05 +0200
Subject: [gecode-users] posting instead of propagating domain
	constraints?
In-Reply-To: <4C40995D.9070808@cisco.com>
References: <4C408EFD.6050009@cisco.com> <000001cb250a$7e838400$7b8a8c00$@se>
	<4C40995D.9070808@cisco.com>
Message-ID: <000301cb250e$34ff0850$9efd18f0$@se>

Yep, it means just scheduling. Propagation is always explicit in Gecode,
triggered by status().

Christian

--
Christian Schulte, web.ict.kth.se/~cschulte/



-----Original Message-----
From: Kish Shen [mailto:kisshen at cisco.com] 
Sent: Friday, July 16, 2010 7:40 PM
To: cschulte at kth.se
Cc: users at gecode.org
Subject: Re: [gecode-users] posting instead of propagating domain
constraints?

Christian Schulte wrote:

> Well, dom() and the integer variants of rel() propagate in the sense that
> they immediately modify the variable domain and schedule some propagators
> for later execution. However, they do not lead to full constraint
> propagation computing a fixpoint. The invariant is that only execution of
> the status() function of a space computes a fixpoint. So they are dirt
> cheap, much cheaper than creating a propagator for them.

Yes, I had understood 'propagates' in the manual to mean 'full 
propagation'. I knew that dom() and rel() will do such simple things 
like update the domain and check that the value you are assigning is 
inside the domain, etc., and assumed that you will always do these 
simple checks for all constraints posted, even where the manual says 
'posting the propagator', e.g. for equality between two IntVars, you 
will check that their domains do overlap, etc.

So does 'propagate' in this case only mean 'scheduling some 
propagators', whereas where the manual state 'posting the propagator' 
does not?

Cheers,

Kish



-- 
This e-mail may contain confidential and privileged material for the
sole use of the intended recipient. Any review, use, distribution or
disclosure by others is strictly prohibited. If you are not the intended
recipient (or authorized to receive for the recipient), please contact
the sender by reply e-mail and delete all copies of this message.
Cisco Systems Limited (Company Number: 02558939), is registered in
England and Wales with its registered office at 1 Callaghan Square,
Cardiff, South Glamorgan CF10 5BT.



From kisshen at cisco.com  Tue Jul 20 18:25:31 2010
From: kisshen at cisco.com (Kish Shen)
Date: Tue, 20 Jul 2010 17:25:31 +0100
Subject: [gecode-users] search engine and space state
Message-ID: <4C45CDFB.8060301@cisco.com>

Hi,

I am looking at some possible (non-default) behaviour with the ECLiPSe 
interface to Gecode. By default, (full) propagation happens after any 
`events' (calls to Gecode, approximately) that may change the state. It 
is implemented as a separate event, so it is possible to delay 
propagation so that multiple events can be posted without propagation.
However, looking at the code carefully now, it seems possible for a 
Space to not have propagated when I try to clone it, and also when I 
create a search engine for s Space.

In the documentation, it is stated that a Space must be stable and 
non-failed for cloning -- by stable I think this means there has been a 
full propagation. There is no corresponding requirement in the 
documentation (I looked at both the reference doc and MPG) about Space 
there, but cloning of space is mentioned, so am I correct in thinking 
that the Space needs to be stable and non-failed when a search engine is 
created for it (even if you are not cloning)?

Thanks and cheers,

Kish

-- 
This e-mail may contain confidential and privileged material for the
sole use of the intended recipient. Any review, use, distribution or
disclosure by others is strictly prohibited. If you are not the intended
recipient (or authorized to receive for the recipient), please contact
the sender by reply e-mail and delete all copies of this message.
Cisco Systems Limited (Company Number: 02558939), is registered in
England and Wales with its registered office at 1 Callaghan Square,
Cardiff, South Glamorgan CF10 5BT.


From tack at gecode.org  Tue Jul 20 18:44:51 2010
From: tack at gecode.org (Guido Tack)
Date: Tue, 20 Jul 2010 18:44:51 +0200
Subject: [gecode-users] search engine and space state
In-Reply-To: <4C45CDFB.8060301@cisco.com>
References: <4C45CDFB.8060301@cisco.com>
Message-ID: <3C75BB2B-C368-417E-8F3B-88A74073CEC4@gecode.org>

Kish Shen wrote:
> I am looking at some possible (non-default) behaviour with the ECLiPSe interface to Gecode. By default, (full) propagation happens after any `events' (calls to Gecode, approximately) that may change the state. It is implemented as a separate event, so it is possible to delay propagation so that multiple events can be posted without propagation.
> However, looking at the code carefully now, it seems possible for a Space to not have propagated when I try to clone it, and also when I create a search engine for s Space.
> 
> In the documentation, it is stated that a Space must be stable and non-failed for cloning -- by stable I think this means there has been a full propagation. There is no corresponding requirement in the documentation (I looked at both the reference doc and MPG) about Space there, but cloning of space is mentioned, so am I correct in thinking that the Space needs to be stable and non-failed when a search engine is created for it (even if you are not cloning)?

If you use the default Gecode search engines, they will always make sure that the space is stable before beginning the search (i.e., before calling clone() for the first time).  They will also work on failed spaces.  If you clone the space yourself, you must make sure it is stable (by calling status()) before doing so, and check that it's not failed.

Cheers,
	Guido

-- 
Guido Tack, http://people.cs.kuleuven.be/~guido.tack/



From tack at gecode.org  Mon Jul 26 09:21:40 2010
From: tack at gecode.org (Guido Tack)
Date: Mon, 26 Jul 2010 09:21:40 +0200
Subject: [gecode-users] Gecode 3.4.0 released
Message-ID: <02236CB9-FDC6-4A4E-AD8D-46638F779D86@gecode.org>

[sorry for multiple copies, we have had some email problems]

Dear all,

we are releasing a new version of Gecode:

             Gecode 3.4.0
      http://www.gecode.org

This release includes: considerably improved support for posting expressions and relations (also including set and full arithmetic expressions); other improvements for modeling (array initialization and element addition to arrays); state-of-the-art unary and cumulative scheduling propagators (including optional and flexible tasks); major cleanups of the variable and view infrastructure (now also documented in MPG); cleanups of the examples; several other fixes and performance improvements.

This release is the first to be accompanied by a complete version of "Modeling and Programming in Gecode" which has been extended by many new case studies and parts on programming search engines and variables.

On our web site, you find source packages, as well as binary packages for Windows and Mac OS.

Cheers,
	Guido

-- 
Guido Tack, http://people.cs.kuleuven.be/~guido.tack/



From kisshen at cisco.com  Tue Jul 27 19:10:17 2010
From: kisshen at cisco.com (Kish Shen)
Date: Tue, 27 Jul 2010 18:10:17 +0100
Subject: [gecode-users] obtaining IntVar's domain as IntSet?
Message-ID: <4C4F12F9.9050006@cisco.com>

Hi,

Is there anyway to obtain the domain of an IntVar as an independent 
object, preferably an IntSet? I looked at the documentation, and can't 
figure out how to do this.

The reason I ask is that in ECLiPSe finite domain library, ic, there are 
some operations which are performed on domains as independent objects 
(i.e. independent of their original variables), including performing 
such set-like operations like forming the union of two domains, etc.).

Thanks and cheers,

Kish

-- 
This e-mail may contain confidential and privileged material for the
sole use of the intended recipient. Any review, use, distribution or
disclosure by others is strictly prohibited. If you are not the intended
recipient (or authorized to receive for the recipient), please contact
the sender by reply e-mail and delete all copies of this message.
Cisco Systems Limited (Company Number: 02558939), is registered in
England and Wales with its registered office at 1 Callaghan Square,
Cardiff, South Glamorgan CF10 5BT.


From tack at gecode.org  Tue Jul 27 19:15:40 2010
From: tack at gecode.org (Guido Tack)
Date: Tue, 27 Jul 2010 19:15:40 +0200
Subject: [gecode-users] obtaining IntVar's domain as IntSet?
In-Reply-To: <4C4F12F9.9050006@cisco.com>
References: <4C4F12F9.9050006@cisco.com>
Message-ID: <AC3AD35D-1AC3-45DD-8E47-772BFEE7A276@gecode.org>

Kish Shen wrote:

> Hi,
> 
> Is there anyway to obtain the domain of an IntVar as an independent object, preferably an IntSet? I looked at the documentation, and can't figure out how to do this.

Yes, using an IntVarRanges iterator.  If you have an IntVar x, use the following:

IntSet s(IntVarRanges(x));

Cheers,
	Guido

-- 
Guido Tack, http://people.cs.kuleuven.be/~guido.tack/





From cschulte at kth.se  Tue Jul 27 21:02:04 2010
From: cschulte at kth.se (Christian Schulte)
Date: Tue, 27 Jul 2010 21:02:04 +0200
Subject: [gecode-users] obtaining IntVar's domain as IntSet?
In-Reply-To: <AC3AD35D-1AC3-45DD-8E47-772BFEE7A276@gecode.org>
References: <4C4F12F9.9050006@cisco.com>
	<AC3AD35D-1AC3-45DD-8E47-772BFEE7A276@gecode.org>
Message-ID: <000001cb2dbe$3427f0a0$9c77d1e0$@se>

Hi Kish,

Be warned! That's inefficient (well, the int sets are okay efficiencywise).
The very point in Gecode is to not use explicit data structures for sets but
iterators that iterate over them. For pretty much everything that works just
fine and is very very fast!

Chapter 24 in MPG goes crazy about why that's cool!

Christian

--
Christian Schulte, web.ict.kth.se/~cschulte/


-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Guido Tack
Sent: Tuesday, July 27, 2010 7:16 PM
To: Kish Shen
Cc: users at gecode.org
Subject: Re: [gecode-users] obtaining IntVar's domain as IntSet?

Kish Shen wrote:

> Hi,
> 
> Is there anyway to obtain the domain of an IntVar as an independent
object, preferably an IntSet? I looked at the documentation, and can't
figure out how to do this.

Yes, using an IntVarRanges iterator.  If you have an IntVar x, use the
following:

IntSet s(IntVarRanges(x));

Cheers,
	Guido

-- 
Guido Tack, http://people.cs.kuleuven.be/~guido.tack/




_______________________________________________
Gecode users mailing list
users at gecode.org
https://www.gecode.org/mailman/listinfo/gecode-users



From kisshen at cisco.com  Fri Jul 30 20:47:31 2010
From: kisshen at cisco.com (Kish Shen)
Date: Fri, 30 Jul 2010 19:47:31 +0100
Subject: [gecode-users] exact behaviour of different IntValBranch
Message-ID: <4C531E43.8040001@cisco.com>

Hi,

I am trying to understand how the different value selection strategies 
(IntValBranch) works. In particular, the exact behaviour after failures,
when a different value need to be selected.

I have always understood a value selection strategy (as used in ECLiPSe, 
for example), to define an order in which values from the domain of a 
variable is selected, i.e. the variable is set to the first value in 
this order, and on failures, the variable is set to the subsequent 
values in order.

 From reading Modelling with Gecode, I understand that most selections 
are done as binary choices, that is, a value is selected, and if another
value is required, the previously selected value is excluded from the 
domain (with propagation), before selecting the next value. I assume 
this does not apply to INT_VALUES_MIN/MAX. Are these the only exceptions?

For INT_VAL_MED, does this mean that the median is used for each 
selection? That is, you exclude the previous median value, and then
now select the new median in the updated domain? If this is the case,
does it mean the median has to be calculated each time? [this is a
relatively expensive operation in ECLiPSe's finite domain libraries,
and the for the "median" value selection strategy,  the median is 
calculated only once initially, subsequent selected values alternate 
between the next lower and higher value than the initial median].

For the INT_VAL_SPLIT* and INT_VAL_RANGE* strategies, the documentation
mention values (plural) being selected, rather than a single value. What 
does this mean exactly? I assume the variable still needs to be set to a
single value from the selected values? Does this simply mean that within 
the selected values, specific values are tried in some order, but 
without excluding previous values and propagating the consequences (as 
in INT_VALUES*, but not for the whole domain, just the selected values?).

Thanks in advance for any help and information!

Cheers,

Kish
-- 
This e-mail may contain confidential and privileged material for the
sole use of the intended recipient. Any review, use, distribution or
disclosure by others is strictly prohibited. If you are not the intended
recipient (or authorized to receive for the recipient), please contact
the sender by reply e-mail and delete all copies of this message.
Cisco Systems Limited (Company Number: 02558939), is registered in
England and Wales with its registered office at 1 Callaghan Square,
Cardiff, South Glamorgan CF10 5BT.


From cschulte at kth.se  Fri Jul 30 21:48:13 2010
From: cschulte at kth.se (Christian Schulte)
Date: Fri, 30 Jul 2010 21:48:13 +0200
Subject: [gecode-users] exact behaviour of different IntValBranch
In-Reply-To: <4C531E43.8040001@cisco.com>
References: <4C531E43.8040001@cisco.com>
Message-ID: <001101cb3020$25fdd530$71f97f90$@se>

Hi Kish,

Actually, it is as you understood: binary choices only (apart from
INT_VALUES_*). 

Let's take INT_VAR_SIZE_MIN and INT_VAL_MIN as an example and suppose that
you have selected the variable x with 
the smallest domain that is first in the array you branch on and that the
min of x is n. That means you create a choice (x = n) v (x != n). After
exploring either of the choices and doing propagation the brancher is run
again: it will find the first variable with smallest domain. That might be
or might not be the same variable as x. 

This gives better choices wrt the heuristic than sticking to the original x.
Suppose you do it the Eclipse way and have selected a variable x with values
{n_0, ..., n_k}. Then you try in turn that x=n_0, x=n_1, ... That might be
bad. Look at the second alternative x=n_1. What Gecode does is that it
propagates first that x != n_0 and then it chooses a variable again: this
choice is likely to be better as the additional information from propagating
x != n_0 is available.

Let's take INT_VAL_MED as an example with x as selected variable and n the
median. Then you create a choice (x <= n) v (x > n).

Let's take INT_VALUES_MIN as an example with x as selected variable with
values {n_0, ..., n_k}. Then a choice (x = n_0) v ... v (x = n_k) is
created. So, that's in fact the Eclipse style.

I hope that helps. 

Do you think it's worth explaining that in MPG?

Cheers
Christian  

--
Christian Schulte, web.ict.kth.se/~cschulte/


-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Kish Shen
Sent: Friday, July 30, 2010 8:48 PM
To: users at gecode.org
Subject: [gecode-users] exact behaviour of different IntValBranch

Hi,

I am trying to understand how the different value selection strategies 
(IntValBranch) works. In particular, the exact behaviour after failures,
when a different value need to be selected.

I have always understood a value selection strategy (as used in ECLiPSe, 
for example), to define an order in which values from the domain of a 
variable is selected, i.e. the variable is set to the first value in 
this order, and on failures, the variable is set to the subsequent 
values in order.

 From reading Modelling with Gecode, I understand that most selections 
are done as binary choices, that is, a value is selected, and if another
value is required, the previously selected value is excluded from the 
domain (with propagation), before selecting the next value. I assume 
this does not apply to INT_VALUES_MIN/MAX. Are these the only exceptions?

For INT_VAL_MED, does this mean that the median is used for each 
selection? That is, you exclude the previous median value, and then
now select the new median in the updated domain? If this is the case,
does it mean the median has to be calculated each time? [this is a
relatively expensive operation in ECLiPSe's finite domain libraries,
and the for the "median" value selection strategy,  the median is 
calculated only once initially, subsequent selected values alternate 
between the next lower and higher value than the initial median].

For the INT_VAL_SPLIT* and INT_VAL_RANGE* strategies, the documentation
mention values (plural) being selected, rather than a single value. What 
does this mean exactly? I assume the variable still needs to be set to a
single value from the selected values? Does this simply mean that within 
the selected values, specific values are tried in some order, but 
without excluding previous values and propagating the consequences (as 
in INT_VALUES*, but not for the whole domain, just the selected values?).

Thanks in advance for any help and information!

Cheers,

Kish
-- 
This e-mail may contain confidential and privileged material for the
sole use of the intended recipient. Any review, use, distribution or
disclosure by others is strictly prohibited. If you are not the intended
recipient (or authorized to receive for the recipient), please contact
the sender by reply e-mail and delete all copies of this message.
Cisco Systems Limited (Company Number: 02558939), is registered in
England and Wales with its registered office at 1 Callaghan Square,
Cardiff, South Glamorgan CF10 5BT.

_______________________________________________
Gecode users mailing list
users at gecode.org
https://www.gecode.org/mailman/listinfo/gecode-users



From tack at gecode.org  Fri Jul 30 21:57:00 2010
From: tack at gecode.org (Guido Tack)
Date: Fri, 30 Jul 2010 21:57:00 +0200
Subject: [gecode-users] exact behaviour of different IntValBranch
In-Reply-To: <001101cb3020$25fdd530$71f97f90$@se>
References: <4C531E43.8040001@cisco.com> <001101cb3020$25fdd530$71f97f90$@se>
Message-ID: <F70A597D-C5AB-4220-BF4C-B12DC69B4C17@gecode.org>

Christian Schulte wrote:
> Let's take INT_VAL_MED as an example with x as selected variable and n the
> median. Then you create a choice (x <= n) v (x > n).

That's not quite correct, INT_VAL_MED creates (x==n) v (x != n) just like INT_VAL_{MIN,MAX}.  And the median is computed again for each new node.

The splitting cases are INT_SPLIT_MIN, which does (x <= n) v (x > n) for n = (x.min()+x.max())/2, or INT_SPLIT_MAX where the two choices are swapped.  That's why the documentation talks about values (plural) here: The branching does not assign a single value to the variable, but splits the domain (of course, when the domain had size 2, the result of the split is a single value).

A good way to find out what the branchings do exactly is to have a look at the search tree in Gist.

Cheers,
	Guido

-- 
Guido Tack, http://people.cs.kuleuven.be/~guido.tack/





From kisshen at cisco.com  Fri Jul 30 22:52:22 2010
From: kisshen at cisco.com (Kish Shen)
Date: Fri, 30 Jul 2010 21:52:22 +0100
Subject: [gecode-users] exact behaviour of different IntValBranch
In-Reply-To: <001101cb3020$25fdd530$71f97f90$@se>
References: <4C531E43.8040001@cisco.com> <001101cb3020$25fdd530$71f97f90$@se>
Message-ID: <4C533B86.8090504@cisco.com>

Christian Schulte wrote:

> Let's take INT_VAR_SIZE_MIN and INT_VAL_MIN as an example and suppose that
> you have selected the variable x with 
> the smallest domain that is first in the array you branch on and that the
> min of x is n. That means you create a choice (x = n) v (x != n). After
> exploring either of the choices and doing propagation the brancher is run
> again: it will find the first variable with smallest domain. That might be
> or might not be the same variable as x. 

Ah, this is the part I did not know (that you might not be using the 
same variable). This is indeed different from what ECLiPSe (and most 
likely other backtracking constraint solver) does.

> This gives better choices wrt the heuristic than sticking to the original x.
> Suppose you do it the Eclipse way and have selected a variable x with values
> {n_0, ..., n_k}. Then you try in turn that x=n_0, x=n_1, ... That might be
> bad. Look at the second alternative x=n_1. What Gecode does is that it
> propagates first that x != n_0 and then it chooses a variable again: this
> choice is likely to be better as the additional information from propagating
> x != n_0 is available.

However, propagation of x != n_0 can also occur with ECLiPSe -- it does 
not affect your selection of variable (i.e. you will still label x),
but it may reduce the domain of x and other variables. On the other 
hand, you perform additional propagations that might not pay off. Both 
of these value choices strategy are available in the search/6 predicate 
of the ic library.

I was first made aware of this difference in discussion with Helmut 
Simonis (who also introduced search/6 to ECLiPSe), and he said that it 
is not always clear which strategy is better, and depends on the problem 
  being solved, which is why both are provided in search/6.



> Let's take INT_VALUES_MIN as an example with x as selected variable with
> values {n_0, ..., n_k}. Then a choice (x = n_0) v ... v (x = n_k) is
> created. So, that's in fact the Eclipse style.
> 

I assume you don't do any propagations here; as already discussed, it is 
not the only possibility.

I think it is also worth noting that INT_VALUES_MIN strategy is more 
expensive in a recomputation based system than a backtracking system, 
because in a recomputation system you need to remember all the choices, 
rather than just the value selected.

> I hope that helps. 
> 
> Do you think it's worth explaining that in MPG?
>

Yes, I think it is worth explaining. I had very great problems 
understanding the search chapter in the MPG (actually the MG then :-)),
until I had my discussion with Helmut. It was not obvious to me
that you had binary choices at each choicepoint until that discussion.
This was when I first started implementing the Gecode interface more 
than a year ago. However, the fact that you perform variable selection 
again was not known to me until your message today, so I think it is 
worth discussing both points.

Cheers,

Kish

-- 
This e-mail may contain confidential and privileged material for the
sole use of the intended recipient. Any review, use, distribution or
disclosure by others is strictly prohibited. If you are not the intended
recipient (or authorized to receive for the recipient), please contact
the sender by reply e-mail and delete all copies of this message.
Cisco Systems Limited (Company Number: 02558939), is registered in
England and Wales with its registered office at 1 Callaghan Square,
Cardiff, South Glamorgan CF10 5BT.


From kisshen at cisco.com  Fri Jul 30 23:06:03 2010
From: kisshen at cisco.com (Kish Shen)
Date: Fri, 30 Jul 2010 22:06:03 +0100
Subject: [gecode-users] exact behaviour of different IntValBranch
In-Reply-To: <F70A597D-C5AB-4220-BF4C-B12DC69B4C17@gecode.org>
References: <4C531E43.8040001@cisco.com> <001101cb3020$25fdd530$71f97f90$@se>
	<F70A597D-C5AB-4220-BF4C-B12DC69B4C17@gecode.org>
Message-ID: <4C533EBB.90602@cisco.com>

Hi Guido,

Guido Tack wrote:

> That's not quite correct, INT_VAL_MED creates (x==n) v (x != n) just like INT_VAL_{MIN,MAX}.  And the median is computed again for each new node.
> 

Yes, that make sense, and is what I assumed it did (as I wrote in my 
original message).

So as I thought, you need to compute the median again. Does it make 
sense to provide something like what ECLiPSe does, to avoid the expense 
of computing the median? In terms of value selected, it probably does 
not make a huge difference -- the important thing is just which part of 
the domain you want to start selecting values from. You just need to 
remember in the x != n case, you want to select a value as close to n as 
possible.

> The splitting cases are INT_SPLIT_MIN, which does (x <= n) v (x > n) for n = (x.min()+x.max())/2, or INT_SPLIT_MAX where the two choices are swapped.  That's why the documentation talks about values (plural) here: The branching does not assign a single value to the variable, but splits the domain (of course, when the domain had size 2, the result of the split is a single value).
> 
> A good way to find out what the branchings do exactly is to have a look at the search tree in Gist.
> 


Ah, I think I understand this now. It means instead of always labelling
a variable to a value, its domain is simply reduced, and the variable 
can be selected again and again until it is reduced to 1.

Thanks and cheers,

Kish


-- 
This e-mail may contain confidential and privileged material for the
sole use of the intended recipient. Any review, use, distribution or
disclosure by others is strictly prohibited. If you are not the intended
recipient (or authorized to receive for the recipient), please contact
the sender by reply e-mail and delete all copies of this message.
Cisco Systems Limited (Company Number: 02558939), is registered in
England and Wales with its registered office at 1 Callaghan Square,
Cardiff, South Glamorgan CF10 5BT.


