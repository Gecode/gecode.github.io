From cschulte at kth.se  Tue Dec  8 10:12:46 2015
From: cschulte at kth.se (Christian Schulte)
Date: Tue, 8 Dec 2015 10:12:46 +0100
Subject: [gecode-users] Gecode had birthday on Sunday!
Message-ID: <008901d13198$9b617320$d2245960$@kth.se>

Dear all,

I am very proud that Gecode had a milestone birthday on Sunday: Gecode is
now 10 years old.

The best news is that Gecode is still healthy and has grown from an infant
to a rather strong teen! It started with measly 43 klocs (including 9 kloc
examples and tests) and has grown over the years to a healthy 268 kloc
(including 164 kloc examples and tests). It took 44 releases to get there
where a new major release to 5.0.0 is on its way. In the same time tutorial
documentation grew from 0 pages to over 500 pages!

 Thank you very much to all users, contributors, and developers!
Christian

--
Christian Schulte, www.gecode.org/~schulte 
Professor of Computer Science, KTH, cschulte at kth.se
Expert Researcher, SICS, cschulte at sics.se





From aqwzsxaqwzsx at orange.fr  Sun Dec 20 12:56:25 2015
From: aqwzsxaqwzsx at orange.fr (Philippe)
Date: Sun, 20 Dec 2015 11:56:25 +0000 (UTC)
Subject: [gecode-users] Order of branching
Message-ID: <loom.20151220T125207-422@post.gmane.org>

Hi all and happy birthday to Gecode !

Here is the question of the day: 
I have an IntVarArray _x and I would like to dynamically choose the
order of branching. The indice of the first variable to branch is 0. 
Then if x[0] = j, the next variable to branch is x[j] and so on.
I've checked the MPG guide, especially "Branching on integer and Boolean
variables" but without success for now.

Thank you for your help
Philippe.



From cschulte at kth.se  Mon Dec 21 12:46:48 2015
From: cschulte at kth.se (Christian Schulte)
Date: Mon, 21 Dec 2015 12:46:48 +0100
Subject: [gecode-users] Order of branching
In-Reply-To: <loom.20151220T125207-422@post.gmane.org>
References: <loom.20151220T125207-422@post.gmane.org>
Message-ID: <004401d13be5$486e6900$d94b3b00$@kth.se>

Hi,

You might have to implement a brancher on your own, check part B in MPG.
There is an example both in MPG as well as with Gecode "Knights" that uses a
brancher similarly to the one you sketch.

Cheers
Christian

--
Christian Schulte, www.gecode.org/~schulte 
Professor of Computer Science, KTH, cschulte at kth.se
Expert Researcher, SICS, cschulte at sics.se


-----Original Message-----
From: users-bounces at gecode.org [mailto:users-bounces at gecode.org] On Behalf
Of Philippe
Sent: Sunday, December 20, 2015 12:56 PM
To: users at gecode.org
Subject: [gecode-users] Order of branching

Hi all and happy birthday to Gecode !

Here is the question of the day: 
I have an IntVarArray _x and I would like to dynamically choose the order of
branching. The indice of the first variable to branch is 0. 
Then if x[0] = j, the next variable to branch is x[j] and so on.
I've checked the MPG guide, especially "Branching on integer and Boolean
variables" but without success for now.

Thank you for your help
Philippe.


_______________________________________________
Gecode users mailing list
users at gecode.org
https://www.gecode.org/mailman/listinfo/gecode-users



From cviner at cs.toronto.edu  Wed Dec 23 00:26:12 2015
From: cviner at cs.toronto.edu (Coby Viner)
Date: Tue, 22 Dec 2015 18:26:12 -0500
Subject: [gecode-users] Usage of layered graphs,
 without regard for propagation, and audit failure
Message-ID: <549c387c1e2d5c1a5c32d7c64c7feee4@cs.toronto.edu>

Dear Gecode Users:

I am working on a project for which (as an initial step) I need to 
convert regular expressions to layered graphs, of the form provided by 
Gilles Pesant in his 2004 LNCS paper.

For this purpose, I would like to use 
Gecode::Int::Extensional::LayeredGraph, constructed from a Gecode 
DFA-converted regex. I am able to construct a valid DFA, but am having 
some difficulties constructing a layered graph corresponding to it. I 
can create the object itself, using the LayeredGraph (Home home, const 
VarArgArray< Var > &x, const DFA &dfa) constructor for posting. However, 
the resulting graph appears to be invalid.

Upon posting it (via Gecode::Int::Extensional::LayeredGraph< View, Val, 
Degree, StateIdx >::LayeredGraph), it appears that I also need to run 
Gecode::Int::Extensional::LayeredGraph< View, Val, Degree, StateIdx 
 >::initialize, with the same arguments to get a valid initialization of the layered graph (otherwise the pointer assigned to layers is invalid, as are further indices of that array). Once I call initialize, I can access all layers, and there are indeed as many as stated by n (the number of layers). However, the  data structures of the layered graph are not consistent. In particular, audit fails on its first assertion (concerning the number of edges). Manual inspection in gdb shows that the numbers reported for total states and edges are way off, both having values of zero, while the actual numbers vastly exceed that (e.g. layer 0 of 11, on support index 2, appears to have 16254 edges and 8880 states). Valgrind shows an error when a call to audit is included, saying that a "Conditional jump or move depends on uninitialised value(s)", but providing no further information other than showing the error originated from the audit call and that the "Uninitialised value was created by a
stack allocation" from the main method itself. Valgrind shows similar errors if n_states or n_edges are printed from the layered graph. While both erroneously (I assume) output 0, Valgrind detects memory errors, one similar to the previous one and another referring to the "Use of uninitialised value of size 8" at the line of code that outputs either n_states or n_edges.

The documentation on this topic is sparse, and understandably so, since 
I am essentially abusing an internal Gecode class for something that it 
was not designed for. I was hoping for some guidance on how best to 
construct the layered graph corresponding to a DFA, ignoring notions of 
propagation or constraint-satisfaction, since I am only interested in 
using the layered graph itself.

What would be a reasonable instantiation of the templates: <View, Val, 
Degree, StateId> for this purpose? Currently I am using: <Int::IntView, 
int, int, int>. Is this a sensible instantiation?

For my purpose, I am attempting to use IntVarArgs that consist of 
constant integers (i.e. argument is an IntVar, but with min = max). 
These integers correspond to those used in my DFA. Is there any issue 
with having such a sequence and is that a valid usage of IntVarArgs?

What would be a good way to simply output the structure of the entire 
layered graph in some structured format or for me to access its 
components? It appears that I can access the layers easily enough, but 
the edges themselves are only temporarily recorded or bound to their 
support; is that correct? What would be an idiomatic way of iterating 
over the representation of transition variables / state variables?

I apologize if my questions lack precision and would be happy to provide 
any necessary clarifications; this is far from my area of expertise.

I would appreciate any pointers or advice that anyone can provide.

Thank you in advance,

Coby Viner

P.S.  Congratulations on Gecode's recent 10th birthday!


From aqwzsxaqwzsx at orange.fr  Fri Dec 25 12:18:38 2015
From: aqwzsxaqwzsx at orange.fr (Philippe)
Date: Fri, 25 Dec 2015 11:18:38 +0000 (UTC)
Subject: [gecode-users] Order of branching
References: <loom.20151220T125207-422@post.gmane.org>
	<004401d13be5$486e6900$d94b3b00$@kth.se>
Message-ID: <loom.20151225T121522-369@post.gmane.org>

Hi,

Thanks for the "Knights" example.
Could this be an improvement of Gecode than developing this brancher so that we 
can call via the branch method? If so how can we call the variable selection
 strategy?

Merry Chrismath !
Philippe



