/* Author: Stefano Gualandi, gualandi@elet.polimi.it 
 */

#include "support.hh"
#include <int.hh>

class MyModel : public Example {

private:
  IntVarArray xs;
 
public:
  MyModel(const Options& o)
    : xs(this, 3, 0, 3)
  {
    IntVarArgs c(4);
    dom(this, c[0], 0, 1, ICL_DEF);
    dom(this, c[1], 0, 1, ICL_DEF);
    dom(this, c[2], 0, 1, ICL_DEF);
    dom(this, c[3], 0, 3, ICL_DEF);

    gcc(this, xs, c, ICL_DEF);

    branch(this, xs, BVAR_SIZE_MIN, BVAL_MIN);
  }

  /// Constructor for cloning \a s
  MyModel(bool share, MyModel& s) : Example(share,s) {
    xs.update(this, share, s.xs);
  }

  /// Perform copying during cloning
  virtual Space*
  copy(bool share) {
    return new MyModel(share, *this);
  }

  virtual void
  print(void) {

    // print services
    for (int i = 0; i < xs.size(); i++) 
      std::cout << "\t var: " << i <<"\t value " << xs[i] 
		<< std::endl;

    std::cout << std::endl;
  }
};

int
main(int argc, char** argv) {
  Options opt("New Model");

  //opt.n          = 6;
  opt.iterations = 200;
  opt.c_d        = 5;
  opt.parse(argc,argv);

  Example::run<MyModel,DFS<MyModel> >(opt);
  return 0;
}

