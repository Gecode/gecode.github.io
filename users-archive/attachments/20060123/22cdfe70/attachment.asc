
namespace Gecode { namespace Int { namespace Tunneling {

  /*
   * "Tunneling" propagator
   *
   */

  // not used in practice at the moment
  forceinline
  Tunneling::Tunneling(Space* home, ViewArray<IntView>& y0, ViewArray<IntView>& y1, ViewArray<IntView>& y2, std::set<int>* (*fptr)(const int&))
    : Propagator(home), suc(y0), pre(y1), veh(y2), overlapping(fptr) {
    suc.subscribe(home,this,PC_INT_VAL);
    pre.subscribe(home,this,PC_INT_VAL);	
    veh.subscribe(home,this,PC_INT_VAL);
  }

  forceinline
  Tunneling::Tunneling(Space* home, bool share, Tunneling& p)
    : Propagator(home,share,p), procSuc(p.procSuc), procPre(p.procPre), procVeh(p.procVeh), overlapping(p.overlapping) {
    suc.update(home,share,p.suc);
    pre.update(home,share,p.pre);
    veh.update(home,share,p.veh);
  }
  
  forceinline ExecStatus
  Tunneling::post(Space* home, ViewArray<IntView>& x, ViewArray<IntView>& y, ViewArray<IntView>& z, std::set<int>* (*fptr)(const int&)) {
    (void) new (home) Tunneling(home,x,y,z,fptr);
    return ES_OK;
  }

}}}

