#include <string>
#include <map>
#include <list>

struct my_spec {
  int index;
  int dur;
  std::list<std::string> pre;
  std::string res;
};

struct problem_desc {
  int n,r;
  std::map<std::string,my_spec> problem;
  std::map<std::string,int>     resources;
};

void readSpec(problem_desc& pd) {
  my_spec ms;
 
  /* pa(dur:0) */
  ms.index = 0;
  ms.dur   = 0;
  ms.pre   = std::list<std::string>();
  ms.res   = "noResource";
  pd.problem["pa"] = ms;

  /* a1(dur:4 pre:[pa] res:excavator) */
  ms.index = 1;
  ms.dur   = 4;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("pa");
  ms.res   = "excavator";
  pd.problem["a1"] = ms;

  /* a2(dur:2 pre:[pa] res:excavator) */
  ms.index = 2;
  ms.dur   = 2;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("pa");
  ms.res   = "excavator";
  pd.problem["a2"] = ms;

  /* a3(dur:2 pre:[pa] res:excavator) */
  ms.index = 3;
  ms.dur   = 2;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("pa");
  ms.res   = "excavator";
  pd.problem["a3"] = ms;

  /* a4(dur:2 pre:[pa] res:excavator) */
  ms.index = 4;
  ms.dur   = 2;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("pa");
  ms.res   = "excavator";
  pd.problem["a4"] = ms;

  /* a5(dur:2 pre:[pa] res:excavator) */
  ms.index = 5;
  ms.dur   = 2;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("pa");
  ms.res   = "excavator";
  pd.problem["a5"] = ms;

  /* a6(dur:5 pre:[pa] res:excavator) */
  ms.index = 6;
  ms.dur   = 5;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("pa");
  ms.res   = "excavator";
  pd.problem["a6"] = ms;

  /* p1(dur:20 pre:[a3] res:pileDriver) */
  ms.index = 7;
  ms.dur   = 20;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("a3");
  ms.res   = "pileDriver";
  pd.problem["p1"] = ms;

  /* p2(dur:13 pre:[a4] res:pileDriver) */
  ms.index = 8;
  ms.dur   = 13;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("a4");
  ms.res   = "pileDriver";
  pd.problem["p2"] = ms;

  /* ue(dur:10 pre:[pa]) */
  ms.index = 9;
  ms.dur   = 10;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("pa");
  ms.res   = "noResource";
  pd.problem["ue"] = ms;

  /* s1(dur:8 pre:[a1] res:carpentry) */
  ms.index = 10;
  ms.dur   = 8;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("a1");
  ms.res   = "carpentry";
  pd.problem["s1"] = ms;

  /* s2(dur:4 pre:[a2] res:carpentry) */
  ms.index = 11;
  ms.dur   = 4;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("a2");
  ms.res   = "carpentry";
  pd.problem["s2"] = ms;

  /* s3(dur:4 pre:[p1] res:carpentry) */
  ms.index = 12;
  ms.dur   = 4;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("p1");
  ms.res   = "carpentry";
  pd.problem["s3"] = ms;

  /* s4(dur:4 pre:[p2] res:carpentry) */
  ms.index = 13;
  ms.dur   = 4;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("p2");
  ms.res   = "carpentry";
  pd.problem["s4"] = ms;

  /* s5(dur:4 pre:[a5] res:carpentry) */
  ms.index = 14;
  ms.dur   = 4;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("a5");
  ms.res   = "carpentry";
  pd.problem["s5"] = ms;

  /* s6(dur:10 pre:[a6] res:carpentry) */
  ms.index = 15;
  ms.dur   = 10;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("a6");
  ms.res   = "carpentry";
  pd.problem["s6"] = ms;

  /* b1(dur:1 pre:[s1] res:concreteMixer) */
  ms.index = 16;
  ms.dur   = 1;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("s1");
  ms.res   = "concreteMixer";
  pd.problem["b1"] = ms;

  /* b2(dur:1 pre:[s2] res:concreteMixer) */
  ms.index = 17;
  ms.dur   = 1;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("s2");
  ms.res   = "concreteMixer";
  pd.problem["b2"] = ms;

  /* b3(dur:1 pre:[s3] res:concreteMixer) */
  ms.index = 18;
  ms.dur   = 1;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("s3");
  ms.res   = "concreteMixer";
  pd.problem["b3"] = ms;

  /* b4(dur:1 pre:[s4] res:concreteMixer) */
  ms.index = 19;
  ms.dur   = 1;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("s4");
  ms.res   = "concreteMixer";
  pd.problem["b4"] = ms;

  /* b5(dur:1 pre:[s5] res:concreteMixer) */
  ms.index = 20;
  ms.dur   = 1;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("s5");
  ms.res   = "concreteMixer";
  pd.problem["b5"] = ms;

  /* b6(dur:1 pre:[s6] res:concreteMixer) */
  ms.index = 21;
  ms.dur   = 1;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("s6");
  ms.res   = "concreteMixer";
  pd.problem["b6"] = ms;

  /* ab1(dur:1 pre:[b1]) */
  ms.index = 22;
  ms.dur   = 1;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("b1");
  ms.res   = "noResource";
  pd.problem["ab1"] = ms;

  /* ab2(dur:1 pre:[b2]) */
  ms.index = 23;
  ms.dur   = 1;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("b2");
  ms.res   = "noResource";
  pd.problem["ab2"] = ms;

  /* ab3(dur:1 pre:[b3]) */
  ms.index = 24;
  ms.dur   = 1;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("b3");
  ms.res   = "noResource";
  pd.problem["ab3"] = ms;

  /* ab4(dur:1 pre:[b4]) */
  ms.index = 25;
  ms.dur   = 1;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("b4");
  ms.res   = "noResource";
  pd.problem["ab4"] = ms;

  /* ab5(dur:1 pre:[b5]) */
  ms.index = 26;
  ms.dur   = 1;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("b5");
  ms.res   = "noResource";
  pd.problem["ab5"] = ms;

  /* ab6(dur:1 pre:[b6]) */
  ms.index = 27;
  ms.dur   = 1;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("b6");
  ms.res   = "noResource";
  pd.problem["ab6"] = ms;

  /* m1(dur:16 pre:[ab1] res:bricklaying) */
  ms.index = 28;
  ms.dur   = 16;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("ab1");
  ms.res   = "bricklaying";
  pd.problem["m1"] = ms;

  /* m2(dur:8 pre:[ab2] res:bricklaying) */
  ms.index = 29;
  ms.dur   = 8;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("ab2");
  ms.res   = "bricklaying";
  pd.problem["m2"] = ms;

  /* m3(dur:8 pre:[ab3] res:bricklaying) */
  ms.index = 30;
  ms.dur   = 8;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("ab3");
  ms.res   = "bricklaying";
  pd.problem["m3"] = ms;

  /* m4(dur:8 pre:[ab4] res:bricklaying) */
  ms.index = 31;
  ms.dur   = 8;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("ab4");
  ms.res   = "bricklaying";
  pd.problem["m4"] = ms;

  /* m5(dur:8 pre:[ab5] res:bricklaying) */
  ms.index = 32;
  ms.dur   = 8;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("ab5");
  ms.res   = "bricklaying";
  pd.problem["m5"] = ms;

  /* m6(dur:20 pre:[ab6] res:bricklaying) */
  ms.index = 33;
  ms.dur   = 20;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("ab6");
  ms.res   = "bricklaying";
  pd.problem["m6"] = ms;

  /* l(dur:2 res:crane) */
  ms.index = 34;
  ms.dur   = 2;
  ms.pre   = std::list<std::string>();
  ms.res   = "crane";
  pd.problem["l"] = ms;

  /* t1(dur:12 pre:[m1 m2 l] res:crane) */
  ms.index = 35;
  ms.dur   = 12;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("m1");
  ms.pre.push_back("m2");
  ms.pre.push_back("l");
  ms.res   = "crane";
  pd.problem["t1"] = ms;

  /* t2(dur:12 pre:[m2 m3 l] res:crane) */
  ms.index = 36;
  ms.dur   = 12;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("m2");
  ms.pre.push_back("m3");
  ms.pre.push_back("l");
  ms.res   = "crane";
  pd.problem["t2"] = ms;

  /* t3(dur:12 pre:[m3 m4 l] res:crane) */
  ms.index = 37;
  ms.dur   = 12;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("m3");
  ms.pre.push_back("m4");
  ms.pre.push_back("l");
  ms.res   = "crane";
  pd.problem["t3"] = ms;

  /* t4(dur:12 pre:[m4 m5 l] res:crane) */
  ms.index = 38;
  ms.dur   = 12;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("m4");
  ms.pre.push_back("m5");
  ms.pre.push_back("l");
  ms.res   = "crane";
  pd.problem["t4"] = ms;

  /* t5(dur:12 pre:[m5 m6 l] res:crane) */
  ms.index = 39;
  ms.dur   = 12;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("m5");
  ms.pre.push_back("m6");
  ms.pre.push_back("l");
  ms.res   = "crane";
  pd.problem["t5"] = ms;

  /* ua(dur:10) */
  ms.index = 40;
  ms.dur   = 10;
  ms.pre   = std::list<std::string>();
  ms.res   = "noResource";
  pd.problem["ua"] = ms;

  /* v1(dur:15 pre:[t1] res:caterpillar) */
  ms.index = 41;
  ms.dur   = 15;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("t1");
  ms.res   = "caterpillar";
  pd.problem["v1"] = ms;

  /* v2(dur:10 pre:[t5] res:caterpillar) */
  ms.index = 42;
  ms.dur   = 10;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("t5");
  ms.res   = "caterpillar";
  pd.problem["v2"] = ms;

  /* pe(dur:0 pre:[t2 t3 t4 v1 v2 ua]) */
  ms.index = 43;
  ms.dur   = 0;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("t2");
  ms.pre.push_back("t3");
  ms.pre.push_back("t4");
  ms.pre.push_back("v1");
  ms.pre.push_back("v2");
  ms.pre.push_back("ua");
  ms.res   = "noResource";
  pd.problem["pe"] = ms;

  pd.resources["bricklaying"] = 0;
  pd.resources["carpentry"] = 1;
  pd.resources["caterpillar"] = 2;
  pd.resources["concreteMixer"] = 3;
  pd.resources["crane"] = 4;
  pd.resources["excavator"] = 5;
  pd.resources["noResource"] = 6;
  pd.resources["pileDriver"] = 7;

  pd.n = 44;
  pd.r = 8;
}

void fillSpecHouse(problem_desc& pd) {
  my_spec ms;
 
  /* a(dur:7 res:constructionInc) */
  ms.index = 0;
  ms.dur   = 7;
  ms.pre   = std::list<std::string>();
  ms.res   = "constructionInc";
  pd.problem["a"] = ms;

  /* b(dur:3 pre:[a] res:houseInc) */
  ms.index = 1;
  ms.dur   = 3;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("a");
  ms.res   = "houseInc";
  pd.problem["b"] = ms;

  /* c(dur:1 pre:[b] res:houseInc) */
  ms.index = 2;
  ms.dur   = 1;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("b");
  ms.res   = "houseInc";
  pd.problem["c"] = ms;

  /* d(dur:8 pre:[a] res:constructionInc) */
  ms.index = 3;
  ms.dur   = 8;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("a");
  ms.res   = "constructionInc";
  pd.problem["d"] = ms;

  /* e(dur:2 pre:[c d] res:constructionInc) */
  ms.index = 4;
  ms.dur   = 2;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("c");
  ms.pre.push_back("d");
  ms.res   = "constructionInc";
  pd.problem["e"] = ms;

  /* f(dur:1 pre:[c d] res:houseInc) */
  ms.index = 5;
  ms.dur   = 1;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("c");
  ms.pre.push_back("d");
  ms.res   = "houseInc";
  pd.problem["f"] = ms;

  /* g(dur:1 pre:[c d] res:houseInc) */
  ms.index = 6;
  ms.dur   = 1;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("c");
  ms.pre.push_back("d");
  ms.res   = "houseInc";
  pd.problem["g"] = ms;

  /* h(dur:3 pre:[a] res:constructionInc) */
  ms.index = 7;
  ms.dur   = 3;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("a");
  ms.res   = "constructionInc";
  pd.problem["h"] = ms;

  /* i(dur:2 pre:[f h] res:builderCorp) */
  ms.index = 8;
  ms.dur   = 2;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("f");
  ms.pre.push_back("h");
  ms.res   = "builderCorp";
  pd.problem["i"] = ms;

  /* j(dur:1 pre:[i] res:builderCorp) */
  ms.index = 9;
  ms.dur   = 1;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("i");
  ms.res   = "builderCorp";
  pd.problem["j"] = ms;

  /* pe(dur:0 pre:[j]) */
  ms.index = 10;
  ms.dur   = 0;
  ms.pre   = std::list<std::string>();
  ms.pre.push_back("j");
  ms.res   = "noResource";
  pd.problem["pe"] = ms;

  pd.resources["builderCorp"] = 0;
  pd.resources["constructionInc"] = 1;
  pd.resources["houseInc"] = 2;
  pd.resources["noResource"] = 3;

  pd.n = 11;
  pd.r = 4;
}





#include "kernel.hh"
#include "int.hh"
#include "search.hh"
#include "minimodel.hh"

#include <vector>

using namespace Gecode;
using namespace std;


template<class T>
void print_vector(string s, T v) {
  for (int i=0; i < v.size(); i++) {
    std::cout << s << " #" << i+1 << ": " << v[i] << endl;
  }
}

class SchedulingDesc : public BranchingDesc {
  const int i,j;
public:

  SchedulingDesc(Branching* b, int ii, int jj) : BranchingDesc(b), i(ii), j(jj) {}
  virtual size_t size(void) const {
    return sizeof(SchedulingDesc);
  }
  int task1() const {
    return i;
  }
  int task2() const {
    return j;
  }
};

using Int::IntView;
class SchedulingBranch : public Branching {
protected:
  int i,j;
  //ViewArray<IntView> iv;
  IntVarArray iv;
  SchedulingBranch(Space* home, bool share, SchedulingBranch& sb)
  : Branching(home,share,sb),
    i(sb.i), j(sb.j)
  {
    iv.update(home,share,sb.iv);
  }
public:
  //SchedulingBranch(Space* home, ViewArray<IntView>& liv)
  SchedulingBranch(Space* home, IntVarArray& liv)
  : Branching(home), iv(liv), i(0), j(0)
  {
    cout << "SchedulingBranch(Space* home, IntVarArray& liv)" << endl;
  }
  
  virtual unsigned int branch(void) {
    const int n = iv.size();
    for (;i < n; ++i) {
      ++j;
      for (; j < n; ++j) {
        if (i == j) continue;
        // !((a < b) || (c > d))  ====>  !(a < b) && !(c > d)   ====>  (a >= b) && (c =< d)
        //if ((iv[i].max() >= iv[j].min()) && (iv[i].min() <= iv[j].max())) {
          goto exit_for;
        //}
      }
      j = -1;
    }
  exit_for:
    if ((i<n)&&(j<n)) {
      std::cout << "var: " << i << " and " << j << endl;
      return 2;
    }
    cout << "branch: returning 0" << endl;
    return 0;
  }
  
  virtual Actor* copy(Space* home, bool share) {
    cout << "virtual Actor* copy(Space* home, bool share)" << endl;
    return new (home) SchedulingBranch(home,share,*this);
  }
  virtual BranchingDesc* description(void) {
    return new SchedulingDesc(this,i,j);
    //return NULL;
  }
  
  virtual ExecStatus commit(Space* home, unsigned int a, BranchingDesc* d) {
    assert((a==0)||(a==1));
    int li,lj;
    
    if (d != NULL) {
      SchedulingDesc* sd = static_cast<SchedulingDesc*>(d);
      li = sd->task1();
      lj = sd->task2();
      //cout << "using BranchingDesc. ";
    }
    else {
      li = i; lj = j;
    }
    std::cout << "branching in " << (a==0 ? "L" : "R") << " vars " << li << " and " << lj << endl;
    if (a==0) {      // i < j
      //post(home, iv[li] < iv[lj]);
    }
    else if (a==1) { // j < i
      //post(home, iv[lj] < iv[li]);
    }
    for (li=0; li < iv.size(); li++) {
      if (iv[li].size()==0) {
        cout << "failing #1" << endl;
        return ES_FAILED;
      }
    }
    {
      int si=i, sj=j;
      if (home->failed()) {
        cout << "failing #2" << endl;
        return ES_FAILED;
      }
      i = si; j = sj;
    }
    return ES_OK;
  }
};

class SchedulingProblem : public Space {
  int n;
  IntVarArray start;
  IntVarArray end;
public:
  SchedulingProblem(problem_desc& pd) :
    n(pd.n),
    start(this,pd.n),
    end(this,pd.n)
  {
    IntArgs machine(pd.n),duration(pd.n),height(pd.n),limit(pd.r);
    IntVarArgs _start(start);
    IntVarArgs _end(end);
    {
      map<string,my_spec>::iterator it;
      int max_dur = -1, sum_dur=0;
      for (it=pd.problem.begin(); it != pd.problem.end(); it++) {
        my_spec ms = it->second;
        if (ms.dur > max_dur) max_dur = ms.dur;
        sum_dur += ms.dur;
      }
      for (int i=0; i < pd.n; i++) {
        start[i].init(this,0,sum_dur);
        end[i].init(this,0,sum_dur+max_dur);
      }
      /* for each task */
      for (it=pd.problem.begin(); it != pd.problem.end(); it++) {
	      my_spec ms = it->second;
	      int idx = ms.index;
	      machine[idx]  = pd.resources[ms.res];
	      duration[idx] = ms.dur;
	      height[idx]   = 1;
	      post(this,start[idx] + ms.dur == end[idx]);
        
	      /* post precedence constraints */
	      list<string>::iterator it2 = ms.pre.begin();
	      for(; it2 != ms.pre.end(); it2++) {
  	      /* the task in ms.pre must be before ms */
  	      my_spec pre_task = pd.problem[*it2];
	        //std::cout << "imposing start["<<pre_task.index<<"] + "<<pre_task.dur<<" <= start["<<ms.index<<"]" << endl;
	        post(this, start[pre_task.index] + pre_task.dur <= start[ms.index]);
	        
	      }
      }
    }

    {
      map<string,int>::iterator it;
      for (it=pd.resources.begin(); it != pd.resources.end(); it++) {
      	limit[it->second] = 1;
      }
    }
    
    /*print_vector("machine ",machine);
    print_vector("start   ",start);
    print_vector("end     ",end);
    print_vector("duration",duration);
    print_vector("height  ",height);
    print_vector("limit   ",limit);*/
    
    
    
    cumulatives(this, machine,start,duration,end,height,limit,true,ICL_DEF);
    //branch(this, start, BVAR_SIZE_MIN, BVAL_MIN);
    (void) new (this) SchedulingBranch(this,start);
  }
  
  SchedulingProblem(bool share, SchedulingProblem& s) : Space(share,s) {
    n = s.n;
    start.update(this, share, s.start);
    end.update(this, share, s.end);
  }
 
  virtual Space* copy(bool share) {
     return new SchedulingProblem(share,*this);
  }
  
  void print() {
    for (int i=0; i < n; i++) {
      std::cout << "task #" << i << ":\t" << start[i] << endl;
    }
    std::cout << flush;
  }


  
};

int main() {
  int* x = 0;
  //*x = 0;
  //try {
    problem_desc pd;
    fillSpecHouse(pd);
    //readSpec(pd);
    
    SchedulingProblem* s = new SchedulingProblem(pd);
    DFS<SchedulingProblem> e(s);
    int i=2;
    delete s;
    cout << "start" << endl;
    do {
      SchedulingProblem* ex = e.next();
      if (ex == NULL) break;
      cout << "solution #" << i << endl;
      //ex->print();
      delete ex;
    } while (--i != 0);
    cout << "end" << endl;
  /*}
  catch(Gecode::Exception& e) {
    cout << "'" << e.info() << "'" << endl;
    cout << "at: '" << e.location() << "'" << endl;
  }
  //catch(std::exception& e) {}
  */
  return 0;
}






