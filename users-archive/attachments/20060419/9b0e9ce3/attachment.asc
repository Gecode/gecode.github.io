/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2001
 *
 */

#include <iostream>

#include "gecode/int.hh"
#include "gecode/search.hh"

using namespace Gecode;

/// Define class to host problem
class Simple : public Space {
protected:
  /// Single variable x
  IntVar x;
public:
  /// Actual model
  Simple(void) : x(this,0,100) {
    rel(this, x, IRT_LE, 10);
  }
  /// Constructor for cloning \a s
  Simple(bool share, Simple& s) : Space(share,s) {
    x.update(this, share, s.x);
  }
  /// Copy during cloning
  virtual Space*
  copy(bool share) {
    return new Simple(share,*this);
  }
  /// Print solution
  virtual void 
  print(void) {
    std::cout << "x = " << x  << std::endl;
  }
};

/** \brief Main-function
 *  \relates Simple
 */
int
main(int, char**) {
  /// Create space for simple
  Simple* s = new Simple;
  /// Create depth-first search engine
  DFS<Simple> e(s);
  /// Iterate over all solutions
  while (Simple* sol = e.next()) {
    sol->print(); delete sol;
  }
  delete s;
  return 0;
}

