#include "examples/support.hh"
#include "gecode/minimodel.hh"

class CumulativesCase : public Example {
protected:
  ;
  IntVarArray      start;
  IntVarArray      end;
public:
  /// Actual model
  CumulativesCase(const Options& opt) 
    : start(this,2,0,60),end(this,2,0,60)
      {
        IntArgs machine(2,0,0);
        IntArgs duration(2,20,20);
        IntArgs height(2,1,1);
        IntArgs limit(2,1,1);

        /// First task starts at 0 ends at 20
        rel(this, start[0], IRT_EQ, 0);

        cumulatives(this,machine,start,duration,end,height,limit,true);

        branch(this, start,INT_VAR_SIZE_MIN,INT_VAL_MIN);
  }

  /// Constructor for cloning \a s
  CumulativesCase(bool share, CumulativesCase& s) : Example(share,s) {
    start.update(this, share, s.start);
    end.update(this, share, s.end);
  }
  /// Copy during cloning
  virtual Space*
  copy(bool share) {
    return new CumulativesCase(share,*this);
  }
};

/** \brief Main-function
 */
int
main(int argc, char* argv[]) {
  Options opt("CumulativesCase");
  opt.solutions(1);
  opt.parse(argc,argv);
  Example::run<CumulativesCase,DFS,Options>(opt);
  return 0;
}

