#include "support.hh"
#include "gecode/minimodel.hh"

int solutions_number;

class MyTest : public Example {

public:
	IntVarArray x;

	MyTest(const SizeOptions& opt)
	: x(this,3,0,2) {
		branch(this, x, INT_VAR_NONE, INT_VAL_MIN);
	}

	/// Constructor for cloning \a s
	MyTest(bool share, MyTest& s) : Example(share,s) {
		x.update(this, share, s.x);
	}

	/// Perform copying during cloning
	virtual Space*
		copy(bool share) {
	return new MyTest(share,*this);
	}

	void constrain(MyTest * solution) {
		if (solutions_number == 4) {
			std::cout << "put constraint x[1] = 1" << std::endl;
			rel(this,x[1],IRT_EQ,1,ICL_DEF,PK_DEF);
		}
		solutions_number++;
	}

	/// Print solution
	virtual void print(std::ostream& os) {
		os << "solution "<< solutions_number << ": " << x << std::endl;
	}
};

/** \brief Main-function
 */
int main(int argc, char* argv[]) {
	solutions_number = 0;
	SizeOptions opt("MyTest");
	opt.iterations(20);
	opt.solutions(0);
	opt.parse(argc,argv);
	Example::run<MyTest,BAB,SizeOptions>(opt);
	return 0;
}
