#ifndef __EDGEFINDER_H__
#define __EDGEFINDER_H__

#include "gecode/int.hh"
#include <vector>
#include <limits>
#include <algorithm>

using namespace Gecode;

class  TaskInfo
{
public:
  Int::IntView start;
  int processingTime;
  int releaseTime;
  int Ci;

  TaskInfo(Int::IntView _start, int _proctime) : start(_start), processingTime(_proctime), releaseTime(_start.min()), Ci(0) {}; 
};

inline bool nondecreasingEstSort(const TaskInfo& t1, const TaskInfo& t2)
{
  return ( t1.start.min() < t2.start.min() );
};

class EdgeFinder: NaryPropagator<Gecode::Int::IntView, Gecode::Int::PC_INT_BND> //Gecode::PC_GEN_ASSIGNED Gecode::Int::PC_INT_BND
{
protected:
  // Number of tasks
  int n;

  // List of processingTimes
  SharedArray<int>  processingTime; 

  // Constructor for propagator creation
  EdgeFinder(Space * home, ViewArray<Gecode::Int::IntView> &_start, const IntArgs& _processing_time);

  // Constructor for cloning \a p
  EdgeFinder(Space * home, bool share, EdgeFinder& p);

public:

  virtual PropCost cost();
  virtual size_t dispose(Space* home);
  virtual ExecStatus propagate(Space * home, ModEventDelta med);
  virtual Actor*  copy(Space * home, bool share);
  static  ExecStatus post(Space* home, const IntVarArgs& _starts, const int* _machine, const int* _processing_time, int size);

};

#endif // __EDGEFINDER_H__