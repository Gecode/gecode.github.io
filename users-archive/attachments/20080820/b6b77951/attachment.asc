#include "edgeFinder.h"
#include "examples/support.hh"
#include "gecode/minimodel.hh" 
#include <cstdio>

// random jobshop 4x4
const int processingTime04[] = {
  2, 3, 5, 1,
  7, 2, 3, 4,
  3, 8, 2, 6,
  1, 2, 8, 5
};

int resource04[] = {
  1, 3, 2, 4,
  2, 4, 3, 1,
  4, 2, 1, 3,
  1, 2, 4, 3
};

// jobshop FT6
const int processingTime06[] = { 
  1,  3,  6,  7,  3,  6, 
  8,  5, 10, 10, 10,  4,
  5,  4,  8,  9,  1,  7,
  5,  5,  5,  3,  8,  9,
  9,  3,  5,  4,  3,  1,
  3,  3,  9, 10,  4,  1 
};

int resource06[] =  { 
  3, 1, 2, 4, 6, 5,  
  2, 3, 5, 6, 1, 4,
  3, 4, 6, 1, 2, 5,
  2, 1, 3, 4, 5, 6,
  3, 2, 5, 6, 1, 4,
  2, 4, 6, 1, 5, 3 
};


class Jobshop : public Example
{
protected:
  IntVarArray S; // starting time variables
  const int n;   // size (jobshop n x n)

public:
  // The actual problem
  Jobshop(const SizeOptions& opt)
    : n(opt.size()), S(this,opt.size()*opt.size()+1,0,100)
  {  
    const int* processingTime = processingTime04;
    int* resource = resource04;


    switch(opt.size())
    {
    case 4:
      resource = resource04;
      processingTime = processingTime04;
      break;
    case 6:
      resource = resource06;
      processingTime = processingTime06;
      break;
    }

    // count resources from 0
    for (int i = 0; i < n*n; ++i)
      resource[i]--;

    // precedence constraints
    for (int i = 0; i<n; ++i){
      for (int j = 0; j < n-1; ++j){ 
        post(this,S[i*n+j] + processingTime[i*n+j] <= S[i*n+j+1]);
      }
    }

    // every job ends before makespan
    for (int i = 0; i<n; ++i){
      post(this,S[i*n+n-1] + processingTime[i*n+n-1] <= S[n*n]);
    }

    // disjunctive resource constraints
    for (int k = 0; k < n*n; ++k) {
      for (int l = k+1; l <n*n; ++l){
        if(resource[k] == resource[l]) {
          post(this,tt(~(S[k] + processingTime[k] <= S[l])||~(S[l] + processingTime[l] <= S[k])));
        }
      }
    }

    EdgeFinder::post(this,S,resource,processingTime,n);

    // ATTENTION: when uncommented, a solution with correct optimal Cmax=55 for FT06 is found
    //post(this,S[n*n] < 57);

    branch(this, S, INT_VAR_SIZE_MIN, INT_VAL_MIN);
  };

  // Constructor for cloning \a s
  Jobshop(bool share, Jobshop& s) : Example(share,s), n(s.n) {
    S.update(this, share, s.S);
  }

  // Perform copying during cloning
  virtual Space*
    copy(bool share) {
      return new Jobshop(share,*this);
  }

  // Print solution
  virtual void  print(std::ostream& os) {
    for (int i = 0; i < S.size(); i++) {
      //os << S[i] << ", ";  //raises memory allocation exception
      os << S[i].val() << ", ";  //this works
      if ((i+1) % n == 0){
        os << std::endl;
      }
    }
    os << std::endl;
  }

  // add requirement for better next result - for BAB
  void constrain(Space * s){
    rel(this, S[n*n], IRT_LE, static_cast<Jobshop*>(s)->S[n*n].min());
  }
}; 

int main(int argc, char* argv[])
{
  SizeOptions opt("Jobshop");
  opt.solutions(0); 
  opt.size(6);
  opt.parse(argc,argv);
  opt.icl(ICL_BND);
  Example::run<Jobshop,BAB,SizeOptions>(opt);
  return 0; 
};
