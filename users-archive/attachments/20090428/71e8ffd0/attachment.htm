<tt>
What&nbsp;are&nbsp;the&nbsp;possible&nbsp;reasons&nbsp;for&nbsp;an&nbsp;immediate&nbsp;search&nbsp;failure? &nbsp;I&amp;#39;ve&nbsp;changed&nbsp;something&nbsp;in&nbsp;my&nbsp;model,&nbsp;but&nbsp;I&amp;#39;m&nbsp;not&nbsp;sure&nbsp;what&nbsp;could&nbsp;be&nbsp;causing&nbsp;immediate&nbsp;failures&nbsp;(using&nbsp;Gecode&nbsp;2.2.0). &nbsp;Setup&nbsp;code&nbsp;is&nbsp;below,&nbsp;and&nbsp;the&nbsp;output&nbsp;is&nbsp;at&nbsp;the&nbsp;bottom. &nbsp;This&nbsp;is&nbsp;solving&nbsp;a&nbsp;simple&nbsp;scheduling&nbsp;problem&nbsp;with&nbsp;a&nbsp;simple&nbsp;model&nbsp;instance&nbsp;that&nbsp;I&nbsp;can&nbsp;solve&nbsp;by&nbsp;hand. &nbsp;According&nbsp;to&nbsp;the&nbsp;debug&nbsp;statements,&nbsp;the&nbsp;model&nbsp;should&nbsp;be&nbsp;feasible. &nbsp;Or&nbsp;-&nbsp;maybe&nbsp;I&amp;#39;ve&nbsp;been&nbsp;looking&nbsp;at&nbsp;it&nbsp;for&nbsp;too&nbsp;long...&lt;br&gt;<br>
&lt;br&gt;Thanks,&lt;br&gt;-Joe&lt;br&gt;&lt;br&gt;//&nbsp;CP&nbsp;Solver&nbsp;Engine&lt;br&gt;CPEngine::CPEngine(&nbsp;InstanceKeeper&nbsp;*&nbsp;pIK,&nbsp;unsigned&nbsp;long&nbsp;long&nbsp;min,&nbsp;unsigned&nbsp;long&nbsp;long&nbsp;max&nbsp;)&nbsp;:&nbsp;&lt;br&gt;   &nbsp;vars(&nbsp;this,&nbsp;pIK-&amp;gt;NumVars(),&nbsp;(int)&nbsp;min,&nbsp;(int)&nbsp;max&nbsp;), &nbsp;//&nbsp;instantiate&nbsp;constraint&nbsp;vars&lt;br&gt;<br>
   &nbsp;latencies(&nbsp;this,&nbsp;pIK-&amp;gt;NumLatencies()+1,&nbsp;0,&nbsp;(int)&nbsp;2&nbsp;*&nbsp;max&nbsp;),&lt;br&gt;   &nbsp;lin_cstr(this,&nbsp;1,0,1),                                                       &nbsp;/*&nbsp;not&nbsp;used&nbsp;in&nbsp;this&nbsp;model&nbsp;*/&lt;br&gt;   &nbsp;sat_cstr(this,&nbsp;1,&nbsp;0,&nbsp;(int)&nbsp;pIK-&amp;gt;GetNumLinearRelations()&nbsp;),  &nbsp;/*&nbsp;not&nbsp;used&nbsp;in&nbsp;this&nbsp;model&nbsp;*/&lt;br&gt;<br>
   &nbsp;_pIK(&nbsp;pIK&nbsp;)&lt;br&gt;{&lt;br&gt;   &nbsp;//&nbsp;All&nbsp;equality&nbsp;constraints&lt;br&gt;   &nbsp;LinearRelation&nbsp;lrel;&lt;br&gt;   &nbsp;bool&nbsp;loop&nbsp;=&nbsp;pIK-&amp;gt;GetNextEqualityPair(&nbsp;lrel,&nbsp;true&nbsp;);&lt;br&gt;   &nbsp;while&nbsp;(loop)&lt;br&gt;   &nbsp;{&lt;br&gt;   &nbsp;   &nbsp;IntVarArgs&nbsp;v(2);&lt;br&gt;   &nbsp;   &nbsp;v[0]&nbsp;=&nbsp;vars[lrel.xvar];&lt;br&gt;<br>
   &nbsp;   &nbsp;v[1]&nbsp;=&nbsp;vars[lrel.yvar];&lt;br&gt;   &nbsp;   &nbsp;IntArgs&nbsp;a(2);&lt;br&gt;   &nbsp;   &nbsp;a[0]&nbsp;=&nbsp;1;&nbsp;//&nbsp;&amp;#39;x&amp;#39;&nbsp;of&nbsp;x&nbsp;=&nbsp;y&nbsp;+&nbsp;o&lt;br&gt;   &nbsp;   &nbsp;a[1]&nbsp;=&nbsp;-1;&nbsp;//&nbsp;&amp;#39;y&amp;#39;&nbsp;of&nbsp;x&nbsp;=&nbsp;y&nbsp;+&nbsp;o&lt;br&gt;   &nbsp;   &nbsp;linear(&nbsp;this,&nbsp;a,&nbsp;v,&nbsp;IRT_EQ,&nbsp;lrel.offset&nbsp;);&lt;br&gt;   &nbsp;   &nbsp;cout&nbsp;&amp;lt;&amp;lt;&nbsp;&amp;quot;Posted&nbsp;equality&nbsp;relation&nbsp;(x,y)&nbsp;=&nbsp;(&amp;quot;&nbsp;&amp;lt;&amp;lt;&nbsp;lrel.xvar&nbsp;&amp;lt;&amp;lt;&nbsp;&amp;quot;,&amp;quot;&nbsp;&amp;lt;&amp;lt;&nbsp;lrel.yvar&nbsp;&amp;lt;&amp;lt;&nbsp;&amp;quot;)&nbsp;w/&nbsp;offset&nbsp;&amp;quot;&nbsp;&amp;lt;&amp;lt;&nbsp;lrel.offset&nbsp;&amp;lt;&amp;lt;&nbsp;std::endl;&lt;br&gt;<br>
   &nbsp;   &nbsp;loop&nbsp;=&nbsp;pIK-&amp;gt;GetNextEqualityPair(&nbsp;lrel&nbsp;);&lt;br&gt;   &nbsp;}&lt;br&gt;&lt;br&gt;   &nbsp;//&nbsp;All&nbsp;inequality&nbsp;constraints&lt;br&gt;   &nbsp;loop&nbsp;=&nbsp;pIK-&amp;gt;GetNextInequalityPair(&nbsp;lrel,&nbsp;true&nbsp;);&lt;br&gt;   &nbsp;while&nbsp;(loop)&lt;br&gt;   &nbsp;{&lt;br&gt;   &nbsp;   &nbsp;IntVarArgs&nbsp;v(2);&lt;br&gt;<br>
   &nbsp;   &nbsp;v[0]&nbsp;=&nbsp;vars[lrel.xvar];&lt;br&gt;   &nbsp;   &nbsp;v[1]&nbsp;=&nbsp;vars[lrel.yvar];&lt;br&gt;   &nbsp;   &nbsp;IntArgs&nbsp;a(2);&lt;br&gt;   &nbsp;   &nbsp;a[0]&nbsp;=&nbsp;1;&nbsp;//&nbsp;&amp;#39;x&amp;#39;&nbsp;of&nbsp;x&nbsp;&amp;lt;=&nbsp;y&nbsp;+&nbsp;o&lt;br&gt;   &nbsp;   &nbsp;a[1]&nbsp;=&nbsp;-1;&nbsp;//&nbsp;&amp;#39;y&amp;#39;&nbsp;of&nbsp;x&nbsp;&amp;lt;=&nbsp;y&nbsp;+&nbsp;o&lt;br&gt;   &nbsp;   &nbsp;linear(&nbsp;this,&nbsp;a,&nbsp;v,&nbsp;IRT_LQ,&nbsp;lrel.offset&nbsp;);&lt;br&gt;<br>
   &nbsp;   &nbsp;cout&nbsp;&amp;lt;&amp;lt;&nbsp;&amp;quot;Posted&nbsp;inequality&nbsp;relation&nbsp;(x,y)&nbsp;=&nbsp;(&amp;quot;&nbsp;&amp;lt;&amp;lt;&nbsp;lrel.xvar&nbsp;&amp;lt;&amp;lt;&nbsp;&amp;quot;,&amp;quot;&nbsp;&amp;lt;&amp;lt;&nbsp;lrel.yvar&nbsp;&amp;lt;&amp;lt;&nbsp;&amp;quot;)&nbsp;w/&nbsp;offset&nbsp;&amp;quot;&nbsp;&amp;lt;&amp;lt;&nbsp;lrel.offset&nbsp;&amp;lt;&amp;lt;&nbsp;std::endl;&lt;br&gt;   &nbsp;   &nbsp;loop&nbsp;=&nbsp;pIK-&amp;gt;GetNextInequalityPair(&nbsp;lrel&nbsp;);   &nbsp;   &nbsp;&lt;br&gt;<br>
   &nbsp;}&lt;br&gt;&lt;br&gt;   &nbsp;//&nbsp;All&nbsp;duration&nbsp;constraints&lt;br&gt;   &nbsp;DurativeVariable&nbsp;dv;&lt;br&gt;   &nbsp;loop&nbsp;=&nbsp;pIK-&amp;gt;GetNextDuration(&nbsp;dv,&nbsp;true&nbsp;);&lt;br&gt;   &nbsp;while&nbsp;(&nbsp;loop&nbsp;)&lt;br&gt;   &nbsp;{&lt;br&gt;   &nbsp;   &nbsp;IntVarArgs&nbsp;v(1);&lt;br&gt;   &nbsp;   &nbsp;v[0]&nbsp;=&nbsp;vars[dv.xvar];&lt;br&gt;   &nbsp;   &nbsp;IntArgs&nbsp;a(1);&lt;br&gt;<br>
   &nbsp;   &nbsp;a[0]&nbsp;=&nbsp;1;&lt;br&gt;   &nbsp;   &nbsp;linear(&nbsp;this,&nbsp;a,&nbsp;v,&nbsp;IRT_LQ,&nbsp;((int)max)&nbsp;-&nbsp;dv.duration&nbsp;);&nbsp;//&nbsp;don&amp;#39;t&nbsp;run&nbsp;over&nbsp;the&nbsp;end&lt;br&gt;   &nbsp;   &nbsp;cout&nbsp;&amp;lt;&amp;lt;&nbsp;&amp;quot;Posted&nbsp;duration&nbsp;relation&nbsp;(x)&nbsp;=&nbsp;(&amp;quot;&nbsp;&amp;lt;&amp;lt;&nbsp;dv.xvar&nbsp;&amp;lt;&amp;lt;&nbsp;&amp;quot;)&nbsp;w/&nbsp;length&nbsp;&amp;quot;&nbsp;&amp;lt;&amp;lt;&nbsp;dv.duration&nbsp;&amp;lt;&amp;lt;&nbsp;std::endl;&lt;br&gt;<br>
   &nbsp;   &nbsp;loop&nbsp;=&nbsp;pIK-&amp;gt;GetNextDuration(&nbsp;dv&nbsp;);&lt;br&gt;   &nbsp;}&lt;br&gt;&lt;br&gt;   &nbsp;//&nbsp;All&nbsp;serialization&nbsp;constraints&lt;br&gt;   &nbsp;int&nbsp;ser_count&nbsp;=&nbsp;0;&lt;br&gt;   &nbsp;std::vector&amp;lt;&nbsp;DurativeVariable&nbsp;&amp;gt;&nbsp;vdv;&lt;br&gt;   &nbsp;loop&nbsp;=&nbsp;pIK-&amp;gt;GetNextSerialization(&nbsp;vdv,&nbsp;true&nbsp;);&lt;br&gt;<br>
   &nbsp;while&nbsp;(loop)&nbsp;//&nbsp;&amp;amp;&amp;amp;&nbsp;false)&lt;br&gt;   &nbsp;{&lt;br&gt;   &nbsp;   &nbsp;IntVarArgs&nbsp;v(&nbsp;(int)&nbsp;vdv.size()&nbsp;);&lt;br&gt;   &nbsp;   &nbsp;IntVarArgs&nbsp;e(&nbsp;(int)&nbsp;vdv.size()&nbsp;);&lt;br&gt;   &nbsp;   &nbsp;IntArgs&nbsp;d(&nbsp;(int)&nbsp;vdv.size()&nbsp;);&lt;br&gt;&lt;br&gt;   &nbsp;   &nbsp;cout&nbsp;&amp;lt;&amp;lt;&nbsp;&amp;quot;Serializing&nbsp;(x,d):&nbsp;&amp;quot;;&lt;br&gt;<br>
   &nbsp;   &nbsp;for&nbsp;(unsigned&nbsp;int&nbsp;idx&nbsp;=&nbsp;0;&nbsp;idx&nbsp;&amp;lt;&nbsp;vdv.size();&nbsp;idx++&nbsp;)&lt;br&gt;   &nbsp;   &nbsp;{&lt;br&gt;   &nbsp;   &nbsp;   &nbsp;v[idx]&nbsp;=&nbsp;vars[vdv[idx].xvar];&lt;br&gt;   &nbsp;   &nbsp;   &nbsp;d[idx]&nbsp;=&nbsp;(int)&nbsp;vdv[idx].duration;&lt;br&gt;   &nbsp;   &nbsp;   &nbsp;e[idx].init(this,min,max);&lt;br&gt;   &nbsp;   &nbsp;   &nbsp;cout&nbsp;&amp;lt;&amp;lt;&nbsp;&amp;quot;(&amp;quot;&nbsp;&amp;lt;&amp;lt;&nbsp;vdv[idx].xvar&nbsp;&amp;lt;&amp;lt;&nbsp;&amp;quot;,&amp;quot;&nbsp;&amp;lt;&amp;lt;&nbsp;vdv[idx].duration&nbsp;&amp;lt;&amp;lt;&nbsp;&amp;quot;),&nbsp;&amp;quot;;&lt;br&gt;<br>
   &nbsp;   &nbsp;}&lt;br&gt;   &nbsp;   &nbsp;cout&nbsp;&amp;lt;&amp;lt;&nbsp;endl;&lt;br&gt;&lt;br&gt;   &nbsp;   &nbsp;IntArgs&nbsp;height(v.size()),&nbsp;m(v.size());&lt;br&gt;   &nbsp;   &nbsp;for&nbsp;(&nbsp;int&nbsp;idx&nbsp;=&nbsp;v.size();&nbsp;idx--;&nbsp;)&nbsp;{&nbsp;height[idx]&nbsp;=&nbsp;1;&nbsp;m[idx]&nbsp;=&nbsp;0&nbsp;/*ser_count*/;&nbsp;}&lt;br&gt;   &nbsp;   &nbsp;cumulatives(this,&nbsp;m,&nbsp;v,&nbsp;d,&nbsp;e,&nbsp;height,&nbsp;1,&nbsp;true&nbsp;);&lt;br&gt;<br>
   &nbsp;   &nbsp;loop&nbsp;=&nbsp;pIK-&amp;gt;GetNextSerialization(&nbsp;vdv&nbsp;);&lt;br&gt;   &nbsp;   &nbsp;ser_count++;&lt;br&gt;   &nbsp;}&lt;br&gt;&lt;br&gt;   &nbsp;//&nbsp;Instantiate&nbsp;latency&nbsp;variables&nbsp;here&lt;br&gt;   &nbsp;std::vector&amp;lt;&nbsp;LatencyBound&nbsp;&amp;gt;&nbsp;vlb;&lt;br&gt;   &nbsp;loop&nbsp;=&nbsp;pIK-&amp;gt;GetNextLatencyBound(&nbsp;vlb,&nbsp;true&nbsp;);&lt;br&gt;<br>
   &nbsp;while&nbsp;(&nbsp;loop&nbsp;)&lt;br&gt;   &nbsp;{&lt;br&gt;&lt;br&gt;   &nbsp;   &nbsp;std::vector&amp;lt;&nbsp;LatencyBound&nbsp;&amp;gt;::iterator&nbsp;pLB&nbsp;=&nbsp;vlb.begin();&lt;br&gt;   &nbsp;   &nbsp;//&nbsp;First&nbsp;set&nbsp;up&nbsp;the&nbsp;range&nbsp;for&nbsp;the&nbsp;latency&nbsp;variables&lt;br&gt;   &nbsp;   &nbsp;rel(&nbsp;this,&nbsp;latencies[pLB-&amp;gt;latvar],&nbsp;IRT_GQ,&nbsp;1&nbsp;);&lt;br&gt;<br>
   &nbsp;   &nbsp;rel(&nbsp;this,&nbsp;latencies[pLB-&amp;gt;latvar],&nbsp;IRT_LQ,&nbsp;pLB-&amp;gt;maxdist&nbsp;);&lt;br&gt;&lt;br&gt;   &nbsp;   &nbsp;cout&nbsp;&amp;lt;&amp;lt;&nbsp;&amp;quot;Latency&nbsp;(l)&nbsp;=&nbsp;(&amp;quot;&nbsp;&amp;lt;&amp;lt;&nbsp;pLB-&amp;gt;latvar&nbsp;&amp;lt;&amp;lt;&nbsp;&amp;quot;)&nbsp;alternatives:&nbsp;&amp;quot;;&nbsp;&lt;br&gt;&lt;br&gt;   &nbsp;   &nbsp;//&nbsp;Then&nbsp;define&nbsp;the&nbsp;relationship&nbsp;between&nbsp;the&nbsp;instances&lt;br&gt;<br>
   &nbsp;   &nbsp;//&nbsp;and&nbsp;the&nbsp;latencies&lt;br&gt;   &nbsp;   &nbsp;int&nbsp;k&nbsp;=&nbsp;0;&lt;br&gt;   &nbsp;   &nbsp;BoolVarArgs&nbsp;bs(vlb.size());&lt;br&gt;   &nbsp;   &nbsp;for&nbsp;(&nbsp;pLB&nbsp;=&nbsp;vlb.begin();&nbsp;pLB&nbsp;!=&nbsp;vlb.end();&nbsp;pLB++&nbsp;)&lt;br&gt;   &nbsp;   &nbsp;{&lt;br&gt;   &nbsp;   &nbsp;   &nbsp;BoolVar&nbsp;b(this,0,1);&lt;br&gt;   &nbsp;   &nbsp;   &nbsp;IntVarArgs&nbsp;v(2);&lt;br&gt;<br>
   &nbsp;   &nbsp;   &nbsp;v[0]&nbsp;=&nbsp;vars[pLB-&amp;gt;rcvrvar];&lt;br&gt;   &nbsp;   &nbsp;   &nbsp;v[1]&nbsp;=&nbsp;vars[pLB-&amp;gt;sendervar];&lt;br&gt;   &nbsp;   &nbsp;   &nbsp;IntArgs&nbsp;a(2);&lt;br&gt;   &nbsp;   &nbsp;   &nbsp;a[0]&nbsp;=&nbsp;1;&nbsp;//&nbsp;&amp;#39;x&amp;#39;&nbsp;of&nbsp;x&nbsp;=&nbsp;y&nbsp;+&nbsp;o&lt;br&gt;   &nbsp;   &nbsp;   &nbsp;a[1]&nbsp;=&nbsp;-1;&nbsp;//&nbsp;&amp;#39;y&amp;#39;&nbsp;of&nbsp;x&nbsp;=&nbsp;y&nbsp;+&nbsp;o&lt;br&gt;<br>
   &nbsp;   &nbsp;   &nbsp;cout&nbsp;&amp;lt;&amp;lt;&nbsp;&amp;quot;(s,r)&nbsp;=&nbsp;(&amp;quot;&nbsp;&amp;lt;&amp;lt;&nbsp;pLB-&amp;gt;sendervar&nbsp;&amp;lt;&amp;lt;&nbsp;&amp;quot;,&amp;quot;&nbsp;&amp;lt;&amp;lt;&nbsp;pLB-&amp;gt;rcvrvar&nbsp;&amp;lt;&amp;lt;&nbsp;&amp;quot;)&nbsp;&amp;quot;;&lt;br&gt;   &nbsp;   &nbsp;   &nbsp;linear(&nbsp;this,&nbsp;a,&nbsp;v,&nbsp;IRT_EQ,&nbsp;latencies[pLB-&amp;gt;latvar],&nbsp;b&nbsp;);&lt;br&gt;<br>
   &nbsp;   &nbsp;   &nbsp;bs[k++]&nbsp;=&nbsp;b;&lt;br&gt;   &nbsp;   &nbsp;}&lt;br&gt;   &nbsp;   &nbsp;cout&nbsp;&amp;lt;&amp;lt;&nbsp;endl;&lt;br&gt;   &nbsp;   &nbsp;linear(&nbsp;this,&nbsp;bs,&nbsp;IRT_GR,&nbsp;0&nbsp;);&nbsp;//&nbsp;Force&nbsp;at&nbsp;least&nbsp;one&nbsp;of&nbsp;the&nbsp;constraints&nbsp;in&nbsp;this&nbsp;collection&nbsp;to&nbsp;be&nbsp;true&lt;br&gt;&lt;br&gt;   &nbsp;   &nbsp;loop&nbsp;=&nbsp;pIK-&amp;gt;GetNextLatencyBound(&nbsp;vlb&nbsp;);&lt;br&gt;<br>
   &nbsp;}&lt;br&gt;&lt;br&gt;   &nbsp;//&nbsp;Dummy&nbsp;latency&nbsp;in&nbsp;case&nbsp;there&nbsp;are&nbsp;no&nbsp;latencies&nbsp;in&nbsp;the&nbsp;spec!&lt;br&gt;   &nbsp;//&nbsp;We&nbsp;have&nbsp;to&nbsp;branch&nbsp;on&nbsp;something!&lt;br&gt;   &nbsp;rel(&nbsp;this,&nbsp;latencies[pIK-&amp;gt;NumLatencies()],&nbsp;IRT_GQ,&nbsp;1&nbsp;);&lt;br&gt;   &nbsp;rel(&nbsp;this,&nbsp;latencies[pIK-&amp;gt;NumLatencies()],&nbsp;IRT_LQ,&nbsp;1&nbsp;);&lt;br&gt;<br>
   &nbsp;cout&nbsp;&amp;lt;&amp;lt;&nbsp;&amp;quot;Dummy&nbsp;latency&nbsp;(==1)&amp;quot;&nbsp;&amp;lt;&amp;lt;&nbsp;endl;&lt;br&gt;&lt;br&gt;   &nbsp;//&nbsp;Do&nbsp;branching&lt;br&gt;   &nbsp;branch(this,&nbsp;vars,&nbsp;INT_VAR_REGRET_MAX_MAX,&nbsp;INT_VAL_MED);&lt;br&gt;   &nbsp;branch(this,&nbsp;latencies,&nbsp;INT_VAR_SIZE_MIN,&nbsp;INT_VAL_MAX&nbsp;);&nbsp;//&nbsp;start&nbsp;with&nbsp;max&nbsp;latency&nbsp;and&nbsp;work&nbsp;down&lt;br&gt;<br>
}&lt;br&gt;&lt;br&gt;Domain&nbsp;size:&nbsp;100000&lt;br&gt;Posted&nbsp;equality&nbsp;relation&nbsp;(x,y)&nbsp;=&nbsp;(0,1)&nbsp;w/&nbsp;offset&nbsp;-20000&lt;br&gt;Posted&nbsp;equality&nbsp;relation&nbsp;(x,y)&nbsp;=&nbsp;(1,2)&nbsp;w/&nbsp;offset&nbsp;-20000&lt;br&gt;Posted&nbsp;equality&nbsp;relation&nbsp;(x,y)&nbsp;=&nbsp;(2,3)&nbsp;w/&nbsp;offset&nbsp;-20000&lt;br&gt;Posted&nbsp;equality&nbsp;relation&nbsp;(x,y)&nbsp;=&nbsp;(3,4)&nbsp;w/&nbsp;offset&nbsp;-20000&lt;br&gt;<br>
Posted&nbsp;duration&nbsp;relation&nbsp;(x)&nbsp;=&nbsp;(4)&nbsp;w/&nbsp;length&nbsp;19&nbsp;(0,max-19)&lt;br&gt;Posted&nbsp;duration&nbsp;relation&nbsp;(x)&nbsp;=&nbsp;(5)&nbsp;w/&nbsp;length&nbsp;57&nbsp;(0,&nbsp;max-57)&lt;br&gt;Serializing&nbsp;(x,d):&nbsp;(0,19),&nbsp;(1,19),&nbsp;(2,19),&nbsp;(3,19),&nbsp;(4,19),&lt;br&gt;Dummy&nbsp;latency&nbsp;(==1)&lt;br&gt;Stats:&nbsp;Search&nbsp;Stats&lt;br&gt;<br>
&lt;br&gt;Initial&lt;br&gt;       &nbsp;propagators:  &nbsp;4294967295&lt;br&gt;       &nbsp;branchings:   &nbsp;4294967295&lt;br&gt;&lt;br&gt;Summary&lt;br&gt;       &nbsp;propagations: &nbsp;0&lt;br&gt;       &nbsp;failures:     &nbsp;1&lt;br&gt;       &nbsp;clones:       &nbsp;0&lt;br&gt;       &nbsp;commits:      &nbsp;0&lt;br&gt;       &nbsp;peak&nbsp;memory:  &nbsp;5&nbsp;KB&lt;br&gt;<br>
&lt;br&gt;<br>

</tt>
