<tt>
I&nbsp;offer&nbsp;excuses&nbsp;for&nbsp;the&nbsp;wrong&nbsp;message,&nbsp;this&nbsp;is&nbsp;the&nbsp;correct&nbsp;message:&lt;br&gt;I&nbsp;am&nbsp;trying&nbsp;to&nbsp;use&nbsp;Gecode&nbsp;for &nbsp;solve&nbsp;this &nbsp;problem:&lt;br&gt;I&nbsp;have&nbsp;two&nbsp;SetVar &nbsp;and&nbsp;each&nbsp;one &nbsp;must &nbsp;satisfy &nbsp;the&nbsp;constraints:&lt;br&gt;1.To&nbsp;have&nbsp;a&nbsp;domain&nbsp;in&nbsp;an&nbsp;interval&nbsp;defined  &nbsp;between&nbsp;your&nbsp;position&nbsp;in&nbsp;the&nbsp;SetVarArray&nbsp;and &nbsp;your&nbsp;position&nbsp;+&nbsp;n&nbsp;,&nbsp;for&nbsp;example&nbsp;,&nbsp;if &nbsp;n=3:&lt;br&gt;<br>
 &nbsp;dom(setvar1)=&nbsp;{1..4}&lt;br&gt; &nbsp;dom(setvar2)={2..5}&lt;br&gt;2.The&nbsp;domain&nbsp;of&nbsp;each&nbsp;variable&nbsp;must&nbsp;be &nbsp;Subset &nbsp;of&nbsp;other&nbsp;SetVar&nbsp;called &nbsp;Sets_Possibles.&lt;br&gt;&lt;br&gt;I&nbsp;believe&nbsp;that&nbsp;this&nbsp;model:&lt;br&gt;class&nbsp;model&nbsp;:&nbsp;public&nbsp;model&nbsp;{&lt;br&gt;       &nbsp;public:&lt;br&gt;<br>
               &nbsp;SetVarArray&nbsp;t;&lt;br&gt;               &nbsp;SetVar&nbsp;Sets_Possibles;&lt;br&gt;               &nbsp;void&nbsp;explore(Space*&nbsp;root,&nbsp;Gist::Inspector*&nbsp;i){&lt;br&gt;                       &nbsp;(void&nbsp;)&nbsp;Gecode::explore(root,i);&lt;br&gt;               &nbsp;}&lt;br&gt;<br>
&lt;br&gt;               &nbsp;model():t(this,2,IntSet::empty,&nbsp;IntSet(1,10),4,4),&nbsp;Sets_Possibles(this,IntSet::empty,1,6,4,4)&lt;br&gt;               &nbsp;{&lt;br&gt;                       &nbsp;for(int&nbsp;i=0;&nbsp;i&nbsp;&amp;lt;&nbsp;2;&nbsp;i++){&lt;br&gt;                               &nbsp;dom(this,t[0],SRT_EQ,&nbsp;i+1,&nbsp;i+3);&lt;br&gt;<br>
                               &nbsp;rel(this,t[0],&nbsp;SRT_SUB,Dia1SetVar);&lt;br&gt;                       &nbsp;}&lt;br&gt;                       &nbsp;branch(this,&nbsp;t,&nbsp;Gecode::SET_VAR_NONE, &nbsp;SET_VAL_MAX);&lt;br&gt;               &nbsp;}&lt;br&gt;&lt;br&gt;               &nbsp;model(bool&nbsp;share,&nbsp;model&amp;amp;&nbsp;m)&nbsp;:&nbsp;Space(share,m)&nbsp;{&lt;br&gt;<br>
               &nbsp;   &nbsp;t.update(this,&nbsp;share,&nbsp;m.t);&lt;br&gt;                   &nbsp;Sets_Possibles.update(this,&nbsp;share,&nbsp;m.Sets_Possibles);&lt;br&gt;               &nbsp;}&lt;br&gt;   &nbsp;   &nbsp;....&lt;br&gt;&lt;br&gt;&lt;br&gt;Should&nbsp;throw&nbsp;the&nbsp;solutions&nbsp;t[0]=&nbsp;{1..4}&nbsp;t[1]=&nbsp;{2..5},&nbsp;but&nbsp;I&nbsp;do&nbsp;not&nbsp;obtain&nbsp;any&nbsp;solution,so,&nbsp;someone&nbsp;can&nbsp;help&nbsp;me&nbsp;with&nbsp;an&nbsp;idea &nbsp;about&nbsp;why&nbsp;it&nbsp;does&nbsp;not&nbsp;work.&nbsp;&lt;br&gt;<br>
Thanks&nbsp;for&nbsp;your&nbsp;great&nbsp;patience&nbsp;and&nbsp;any&nbsp;colaboration.&lt;br&gt;
</tt>
