/*
 *  Main authors:
 *      Tias Guns <tias.guns@cs.kuleuven.be>
 *
 *  Copyright:
 *      Tias Guns, 2008
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
// example mostly taken from the manual 'Modeling with Gecode'

#include <gecode/int.hh>
#include <gecode/search.hh>

// custom propagator
#include "constr_myprop.hpp"

using namespace Gecode;

class Example: public Space {
protected:
    BoolVarArray boolvars;

public:
    Example(void) {
        // init array with 10 booleans
        boolvars = BoolVarArray(*this, 10, 0, 1);

        // post our custom constraint
        myprop::cleaner(*this, boolvars);

        // do branching
        branch(*this, boolvars, INT_VAR_DEGREE_MAX, INT_VAL_MIN);
    }

    // search support
    Example(bool share, Example& s) : Space(share, s) {
        boolvars.update(*this, share, s.boolvars);
    }
    virtual Space* copy(bool share) {
        return new Example(share, *this);
    }

    // print solution
    void print(void) const {
        std::cout << boolvars << std::endl;
    }
};

int main(int argc, char* argv[]) {
    // create model and search engine
    Example* m = new Example;
    DFS<Example> e(m);
    delete m;

    // search and print all solutions
    while (Example* s = e.next()) {
        s->print(); delete s;
    }

    return 0;
}

