<tt>
&lt;div&gt;Hello,&lt;br&nbsp;clear=&quot;all&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Probably&nbsp;what&nbsp;I&nbsp;am&nbsp;going&nbsp;to&nbsp;ask&nbsp;is&nbsp;not&nbsp;useful&nbsp;or&nbsp;is&nbsp;just&nbsp;to&nbsp;much&nbsp;particular&nbsp;to&nbsp;my&nbsp;case&nbsp;that&nbsp;does&nbsp;not&nbsp;worth&nbsp;have&nbsp;it,&nbsp;however,&nbsp;I&nbsp;wouldn&amp;#39;t&nbsp;hesitate&nbsp;to&nbsp;ask&nbsp;:).&lt;/div&gt;&lt;div&gt;<br>
&lt;br&gt;&lt;/div&gt;&lt;div&gt;While&nbsp;writing&nbsp;a&nbsp;propagator&nbsp;I&nbsp;realized&nbsp;that&nbsp;keeping&nbsp;some&nbsp;state&nbsp;in&nbsp;it&nbsp;will&nbsp;lower&nbsp;the&nbsp;complexity.&nbsp;This&nbsp;propagator&nbsp;is&nbsp;on&nbsp;a&nbsp;finite&nbsp;set&nbsp;variable&nbsp;and&nbsp;what&nbsp;I&nbsp;does&nbsp;is&nbsp;to&nbsp;track&nbsp;&amp;quot;the&nbsp;new&nbsp;elements&nbsp;in&nbsp;the&nbsp;glb&amp;quot;&nbsp;and&nbsp;propagate&nbsp;according&nbsp;with&nbsp;its&nbsp;semantics.&nbsp;At&nbsp;the&nbsp;beginning&nbsp;to&nbsp;I&nbsp;was&nbsp;using&nbsp;an&nbsp;std::set&nbsp;to&nbsp;keep&nbsp;the&nbsp;&amp;quot;old&nbsp;values&amp;quot;&nbsp;and&nbsp;using&nbsp;it&nbsp;to&nbsp;compute&nbsp;the&nbsp;new&nbsp;elements:&lt;/div&gt;<br>
&lt;div&gt; &lt;/div&gt;&lt;div&gt;new&nbsp;elements&nbsp;=&nbsp;current&nbsp;glb&nbsp;\ &nbsp;old&nbsp;values&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;div&gt;The&nbsp;propagator&nbsp;was&nbsp;performing&nbsp;well&nbsp;but&nbsp;the&nbsp;memory&nbsp;consumption&nbsp;and&nbsp;the&nbsp;time&nbsp;to&nbsp;compute&nbsp;the&nbsp;intersection&nbsp;was&nbsp;quite&nbsp;high.&nbsp;After&nbsp;realizing&nbsp;that&nbsp;I&nbsp;start&nbsp;using&nbsp;an&nbsp;IntSet&nbsp;instead&nbsp;of&nbsp;a&nbsp;std::set&nbsp;to&nbsp;keep&nbsp;the&nbsp;data.&nbsp;The&nbsp;advantage&nbsp;is&nbsp;that&nbsp;the&nbsp;IntSet&nbsp;stores&nbsp;ranges&nbsp;and&nbsp;then&nbsp;is&nbsp;*hopefully*&nbsp;less&nbsp;memory&nbsp;hungry.&nbsp;There&nbsp;is&nbsp;also&nbsp;something&nbsp;nice,&nbsp;you&nbsp;can&nbsp;use&nbsp;all&nbsp;the&nbsp;iterators&nbsp;with&nbsp;them&nbsp;(range&nbsp;iterators).&nbsp;The&nbsp;only&nbsp;problem&nbsp;is&nbsp;that&nbsp;they&nbsp;are&nbsp;intended&nbsp;to&nbsp;be&nbsp;used&nbsp;only&nbsp;to&nbsp;represent&nbsp;variable&nbsp;domains&nbsp;in&nbsp;initializations&nbsp;or&nbsp;when&nbsp;posting&nbsp;constraints&nbsp;and&nbsp;this&nbsp;is&nbsp;reflected&nbsp;in&nbsp;the&nbsp;fact&nbsp;that&nbsp;they&nbsp;lack&nbsp;of&nbsp;&amp;quot;modification&nbsp;operations&amp;quot;&nbsp;in&nbsp;the&nbsp;API.&lt;/div&gt;<br>
&lt;div&gt; &lt;/div&gt;&lt;div&gt;In&nbsp;my&nbsp;case&nbsp;I&nbsp;have&nbsp;to&nbsp;copy&nbsp;construct&nbsp;all&nbsp;the&nbsp;time&nbsp;and&nbsp;this&nbsp;is&nbsp;of&nbsp;course&nbsp;time&nbsp;consuming&nbsp;but&nbsp;far&nbsp;better&nbsp;than&nbsp;my&nbsp;previous&nbsp;implementation.&nbsp;Now&nbsp;my&nbsp;question,&nbsp;sounds&nbsp;it&nbsp;very&nbsp;crazy&nbsp;or&nbsp;stupid&nbsp;to&nbsp;use&nbsp;the&nbsp;IntSet&nbsp;in&nbsp;this&nbsp;way?,&nbsp;if&nbsp;it&nbsp;does&nbsp;not,&nbsp;then&nbsp;it&nbsp;would&nbsp;be&nbsp;nice&nbsp;to&nbsp;provide&nbsp;an&nbsp;specialization&nbsp;(via&nbsp;inheritance,&nbsp;for&nbsp;instance)&nbsp;that&nbsp;allows&nbsp;this&nbsp;kind&nbsp;of&nbsp;use.&nbsp; What&nbsp;do&nbsp;you&nbsp;think?&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Best&nbsp;regards,&lt;br&gt;&lt;/div&gt;--&nbsp;&lt;br&gt;Gustavo&nbsp;Gutierrez&lt;br&gt;<br>

</tt>
