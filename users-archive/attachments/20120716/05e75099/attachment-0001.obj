#include <gecode/driver.hh>
#include <gecode/int.hh>

using namespace Gecode;

class Mon_test : public MinimizeScript {
protected:
    BoolVarArray x;
    IntVar cout;
    
public:

  Mon_test(const SizeOptions& opt): x(*this, 2, 0,1),cout(*this,0,10000000)
  {
      TupleSet tupleSet;
      tupleSet.add(IntArgs(2,0,1));
      tupleSet.add(IntArgs(2,1,1));
      tupleSet.finalize();
      
      extensional(*this,x,tupleSet);
      
      branch(*this,x,INT_VAR_NONE,INT_VAL_MIN);
      branch(*this,cout,INT_VAL_MAX);
}
        /// Return cost
    virtual IntVar cost(void) const {
        return (cout);
    }
    
  /// Print solution
  virtual void
  print(std::ostream& os) const {
    os << "Solution:" << std::endl;
    for (int i = 0; i < 2; i++) 
    {
      
        os << "x"<<i<<": " <<x[i].val() << " ";
     
    }
      os << std::endl;
      os<<cout.val()<<std::endl;
      
  }

  /// Constructor for cloning \a s
  Mon_test(bool share, Mon_test& s) : MinimizeScript(share,s) {
    x.update(*this, share, s.x);
     cout.update(*this, share, s.cout);
  }
  /// Copy during cloning
  virtual Space*
  copy(bool share) {
    return new Mon_test(share,*this);
  }
};

/** \brief Main-function
 */
int
main(int argc, char* argv[]) {
  SizeOptions opt("Mon test:");
    opt.threads(4);
    opt.solutions(0);
  MinimizeScript::run<Mon_test,Restart,SizeOptions>(opt);
  return 0;
}


